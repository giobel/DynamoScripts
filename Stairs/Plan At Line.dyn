<Workspace Version="1.2.0.2514" X="0" Y="0" zoom="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="1e068773-e3d3-44db-9daf-4eb0de94dea1" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="StructuralPlanView.ByLevel" x="1926.06553847555" y="1184.18522632999" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="RevitNodes.dll" function="Revit.Elements.Views.StructuralPlanView.ByLevel@Revit.Elements.Level">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="29581b2c-1030-474f-bba6-06868a8e0091" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Tool.AlignSheetViewsFromTemplateSheet" x="2323.06553847555" y="1056.18522632999" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <ID value="369b6856-2958-4fe6-8931-8daa800f865e" />
      <Name value="Tool.AlignSheetViewsFromTemplateSheet" />
      <Description value="Align views and schedules from a sheet template" />
      <Inputs>
        <Input value="TemplateSheet" />
        <Input value="Sheets" />
      </Inputs>
      <Outputs>
        <Output value="" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <PythonNodeModels.PythonNode guid="e7e0218f-c774-4d25-ae5a-a2210447a4d4" type="PythonNodeModels.PythonNode" nickname="Python Script" x="2183.06553847555" y="1377.18522632999" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="4">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

rooms = UnwrapElement(IN[0])
namePrefix = IN[1]
bboxOffset = IN[2]
runMe = IN[3]

def OffsetBBox(bbox, offset):
	bboxMinX = bbox.Min.X - offset
	bboxMinY = bbox.Min.Y - offset
	bboxMinZ = bbox.Min.Z - offset
	bboxMaxX = bbox.Max.X + offset
	bboxMaxY = bbox.Max.Y + offset
	bboxMaxZ = bbox.Max.Z + offset
	newBbox = BoundingBoxXYZ()
	newBbox.Min = XYZ(bboxMinX, bboxMinY, bboxMinZ)
	newBbox.Max = XYZ(bboxMaxX, bboxMaxY, bboxMaxZ)
	return newBbox

if runMe:
	viewTypes = FilteredElementCollector(doc).OfClass(ViewFamilyType)
	for i in viewTypes:
		if i.ViewFamily == ViewFamily.FloorPlan:
			viewTypeId = i.Id
			break
		else:
			continue
	existingPlans = FilteredElementCollector(doc).OfClass(View).ToElements()
	existingPlanNames, existingPlanElements = [], []
	for i in existingPlans:
		if not i.IsTemplate:
			if i.ViewType == ViewType.FloorPlan:
				existingPlanNames.append(i.ToDSType(True).Name)
				existingPlanElements.append(i)
				
	# Start Transaction
	doc = DocumentManager.Instance.CurrentDBDocument
	TransactionManager.Instance.EnsureInTransaction(doc)
	
	floorPlans = []
	for i in rooms:
		levelId = i.LevelId
		bbox = i.BoundingBox[doc.ActiveView]
		newBbox = OffsetBBox(bbox, bboxOffset)
		viewName = namePrefix + "-" + i.get_Parameter("Number").AsString() + "-" + i.get_Parameter("Name").AsString()
		if viewName in existingPlanNames:
			view = existingPlanElements[existingPlanNames.index(viewName)]
			view.CropBox = newBbox
			view.CropBoxActive = True
			view.CropBoxVisible = False
			floorPlans.append(view)
		else:
			view = ViewPlan.Create(doc, viewTypeId, levelId)
			view.ViewName = viewName
			view.CropBox = newBbox
			view.CropBoxActive = True
			view.CropBoxVisible = False
			floorPlans.append(view)

	# End Transaction
	TransactionManager.Instance.TransactionTaskDone()
else:
	floorPlans = "Run Me set to False"

#Assign your output to the OUT variable
OUT = floorPlans</Script>
    </PythonNodeModels.PythonNode>
    <CoreNodeModels.Input.BoolSelector guid="421bc86c-e085-450f-9711-f41a1428de1f" type="CoreNodeModels.Input.BoolSelector" nickname="Boolean" x="1925.06553847555" y="1361.18522632999" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.Boolean>False</System.Boolean>
    </CoreNodeModels.Input.BoolSelector>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="421bc86c-e085-450f-9711-f41a1428de1f" start_index="0" end="e7e0218f-c774-4d25-ae5a-a2210447a4d4" end_index="3" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>