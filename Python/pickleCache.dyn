<Workspace Version="1.3.2.2480" X="2287.88527559618" Y="374.552066305263" zoom="1.26333177263822" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="b7636a8f-be48-4dbf-b4a8-7f3ec013c5e5" type="PythonNodeModels.PythonNode" nickname="Python Script" x="-1397.69470783388" y="2.67343383006862" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>import sys
sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')

import pickle

from cStringIO import StringIO

src = StringIO()
p = pickle.Pickler(src)

def persistent_id(obj):
    if hasattr(obj, 'x'):
        return 'the value %d' % obj.x
    else:
        return None

p.persistent_id = persistent_id

class Integer:
    def __init__(self, x):
        self.x = x
    def __str__(self):
        return 'My name is integer %d' % self.x

i = Integer(7)

p.dump(i)

datastream = src.getvalue()

dst = StringIO(datastream)

up = pickle.Unpickler(dst)

class FancyInteger(Integer):
    def __str__(self):
        return 'I am the integer %d' % self.x

def persistent_load(persid):
    if persid.startswith('the value '):
        value = int(persid.split()[2])
        return FancyInteger(value)
    else:
        raise pickle.UnpicklingError, 'Invalid persistent id'

up.persistent_load = persistent_load

j = up.load()





class Opening:

	def __init__(self, Shape, Width, Height, Centroid, HostedBeamDepth, BeamDirection, Distance0, Distance1, ZTop, Element, BeamElement):
		self.Shape = Shape
		self.Width = Width
		self.Height = Height
		self.Centroid = Centroid
		self.HostedBeamDepth = HostedBeamDepth
		self.BeamDirection = BeamDirection
		self.Distance0 = Distance0
		self.Distance1 = Distance1
		self.ZTop = ZTop
		self.Element = Element
		self.BeamElement = BeamElement
		pass
	
	def printOut(self):
		return [self.Shape, self.Width, self.Height, self.Centroid, self.HostedBeamDepth, self.BeamDirection, self.Distance0, self.Distance1, self.ZTop, self.Element, self.BeamElement]
		pass
		
	def distance(self, point):
		return Geometry.DistanceTo(self.Centroid, point)
		pass
	
	def XYDistance(self, Pt1):
		distance = math.pow((math.pow((self.Centroid.X-Pt1.X),2) + math.pow((self.Centroid.Y-Pt1.Y),2)),0.5)
		return round(distance,0)
		pass
		
	def __getitem__(self, item):
		return getattr(self, item)
		pass

instance = Opening("Rect",12,13,14,15,16,17,18,19,15,20)

OUT = datastream
</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="ce556a92-db71-4e62-8c61-4cc59d195fbb" type="PythonNodeModels.PythonNode" nickname="Python Script" x="-1180.94871787886" y="122.792223078096" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>import sys
sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')

import pickle
from cStringIO import StringIO

src = StringIO()
p = pickle.Pickler(src)

def persistent_id(obj):
    if hasattr(obj, 'x'):
        return 'the value %d' % obj.x
    else:
        return None

p.persistent_id = persistent_id

class Integer:
    def __init__(self, x):
        self.x = x
    def __str__(self):
        return 'My name is integer %d' % self.x

i = Integer(7)

#1. OUT =  i

p.dump(i)

datastream = src.getvalue()

#OUT = repr(datastream)


dst = StringIO(datastream)

up = pickle.Unpickler(dst)

class FancyInteger(Integer):
    def __str__(self):
        return 'I am the integer %d' % self.x

def persistent_load(persid):
    if persid.startswith('the value '):
        value = int(persid.split()[2])
        return FancyInteger(value)
    else:
        raise pickle.UnpicklingError, 'Invalid persistent id'

up.persistent_load = persistent_load

j = up.load()
OUT = j</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors />
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>