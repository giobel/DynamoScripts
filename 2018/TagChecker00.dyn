{
  "Uuid": "541468e2-7c13-480d-a8e7-cf4aff6492b9",
  "IsCustomNode": false,
  "Description": null,
  "Name": "TagChecker",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import Point as dPoint\r\nfrom System.Drawing import Size as dSize\r\n\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\n\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n\r\nusage = {\"Primary\" : \"PB\", \"Secondary\" : \"SB\", \"Vertical Bracing\" : \"VB\", \"Diaphragm\" : \"DB\"}\r\n\r\n\r\ndef MarkGenerator(beamId):\r\n\tbeam = doc.GetElement(beamId)\r\n\txDist = abs((beam.Location.Curve.Evaluate(0.5, True).X*304.8 + 67286.598)/1000)\r\n\tyDist = abs((beam.Location.Curve.Evaluate(0.5, True).Y*304.8 - 559.835)/1000)\r\n\tlvlId = beam.LookupParameter(\"Reference Level\").AsElementId()\r\n\tlvlName = doc.GetElement(lvlId).Name\r\n\ts = lvlName.Split(' ')\r\n\ttry:\r\n\t\tusageValue = usage[beam.LookupParameter(\"Str Framing Use\").AsString()]\r\n\texcept:\r\n\t\tusageValue = \"Usage error\"\r\n\tif xDist<9.5 and yDist<10:\r\n\t\tvalue = '{}{}0{:.0f}0{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telif xDist<9.5:\r\n\t\tvalue = '{}{}0{:.0f}{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telif yDist<9.5:\r\n\t\tvalue = '{}{}{:.0f}0{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telse:\r\n\t\tvalue = '{}{}{:.0f}{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\treturn value\r\n\r\ndef GetMark(beamId):\r\n\tp = doc.GetElement(beamId).LookupParameter(\"Mark\")\r\n\treturn p.AsString()\r\n\r\n\r\ndef TagAndOverride():\r\n\telementsIds = uidoc.Selection.GetElementIds()\r\n\tform.addElements(elementsIds)\r\n\tt = Transaction(doc, \"Set Tag and Override\")\r\n\tt.Start()\r\n\t[OverrideColor(elid) for elid in elementsIds]\r\n\tsetTemporaryMark(elementsIds)\r\n\tt.Commit()\r\n\t#TaskDialog.Show(\"resu;t\", \":Tagg\")\r\n\r\n\r\n\r\ndef DiscardChanges(elementIds, originalMarks):\r\n\tt = Transaction(doc, \"Discard changes\")\r\n\tt.Start()\r\n\tResetOverrideColor(elementIds)\r\n\tassignOriginalMark(elementIds, originalMarks)\r\n\tt.Commit()\r\n\t\r\n\r\ndef AcceptChanges(elementIds):\r\n\tt = Transaction(doc, \"Cancel operation\")\r\n\tt.Start()\r\n\tResetOverrideColor(elementIds)\r\n\tassignMark(elementIds)\r\n\tt.Commit()\r\n\t\r\n\t\r\n\r\ndef ResetOverrideColor(elements):\r\n\tv = doc.ActiveView\r\n\tbooleans = []\r\n\toverride = OverrideGraphicSettings()\t\r\n\tfor item in elements:\r\n\t\ttry:\r\n\t\t\tv.SetElementOverrides(item, override)\r\n\t\t\tbooleans.append(True)\r\n\t\texcept:\r\n\t\t\tbooleans.append(False)\r\n\t#TaskDialog.Show(\"result\", str( len(elements) ) )\r\n\treturn booleans\r\n\t\r\n\r\ndef setTemporaryMark(elementIds):\r\n\tfor elid in elementIds:\r\n\t\ttag = MarkGenerator(elid)\r\n\t\tp = doc.GetElement(elid).LookupParameter(\"Mark\")\r\n\t\tform.originalMarks.append(p.AsString())\r\n\t\tp.Set(p.AsString() + \"(new:\" + tag + \")\")\r\n\t\r\n\r\ndef assignMark(elementIds):\r\n\tfor elid in elementIds:\r\n\t\ttag = MarkGenerator(elid)\r\n\t\tp = doc.GetElement(elid).LookupParameter(\"Mark\")\r\n\t\tp.Set(tag)\r\n\r\ndef assignOriginalMark(elementIds, marks):\r\n\tfor elid,mark in zip(elementIds,marks):\r\n\t\tp = doc.GetElement(elid).LookupParameter(\"Mark\")\r\n\t\tp.Set(mark)\r\n\r\ndef OverrideColor(elid):\r\n\tbooleans = []\r\n\tview = doc.ActiveView\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\tif GetMark(elid) == MarkGenerator(elid):\r\n\t\toverride.SetProjectionFillColor(Color(0,255,0))\r\n\telif GetMark(elid) == \"\":\r\n\t\toverride.SetProjectionFillColor(Color(255,255,0))\r\n\telse:\r\n\t\toverride.SetProjectionFillColor(Color(255,0,0))\r\n\ttry:\r\n\t\tview.SetElementOverrides(elid, override)\r\n\texcept:\r\n\t\t\"uh-oh to be implemented\"\r\n\treturn booleans\r\n\r\n\r\ndef close(form):\r\n\tform.Close()\r\n\r\n\r\n\r\n\r\nclass CustomizableEvent:\r\n    def __init__(self):\r\n        self.function_or_method = None\r\n        self.args = ()\r\n        self.kwargs = {}\r\n\r\n    def raised_method(self):\r\n        self.function_or_method(*self.args, **self.kwargs)\r\n\r\n    def raise_event(self, function_or_method, *args, **kwargs):\r\n        self.args = args\r\n        self.kwargs = kwargs\r\n        self.function_or_method = function_or_method\r\n        custom_event.Raise()\r\n\r\ncustomizable_event = CustomizableEvent()\r\n\r\n# Create a subclass of IExternalEventHandler\r\nclass CustomHandler(IExternalEventHandler):\r\n    def Execute(self, application):\r\n        try:\r\n            customizable_event.raised_method()\r\n        except InvalidOperationException:\r\n            # If you don't catch this exeption Revit may crash.\r\n            print(\"InvalidOperationException catched\")\r\n\r\n    # noinspection PyMethodMayBeStatic, PyPep8Naming\r\n    def GetName(self):\r\n        return \"Execute an function or method in a IExternalHandler\"\r\n\r\n\r\n# Create an handler instance and his associated ExternalEvent\r\ncustom_handler = CustomHandler()\r\ncustom_event = ExternalEvent.Create(custom_handler)\r\n\r\n\r\n\r\nlabel1 = Label();\r\nbutton1 = Button();\r\nbutton2 = Button();\r\n\r\nbutton4 = Button();\r\n\r\n# A simple WPF form used to call the ExternalEvent\r\nclass ModelessForm(Form):\r\n\t\"\"\"\r\n\tSimple modeless form sample\r\n\t\"\"\"\r\n\tdef __init__(self):\r\n\t\tself.Text = 'Place Beam Tags'\r\n\t\tself.elementsIds = []\r\n\t\tself.originalMarks = []\r\n\t\tself.values = []\r\n\t\tself.Show()\r\n\t\r\n\tdef addElements(self, items):\r\n\t\tfor i in items:\r\n\t\t\tself.elementsIds.append(i)\r\n\r\n\tdef acceptChanges(self, sender, e):\r\n\t\tif len(self.elementsIds) > 0:\r\n\t\t\tCustomizableEvent.raise_event(customizable_event, AcceptChanges, self.elementsIds) \r\n\t\t\t#self.Close()\r\n\t\telse:\r\n\t\t\tTaskDialog.Show(\"Warning\", \"No beams have been selected\")\r\n\t\r\n\tdef undoChanges(self, sender, e):\r\n\t\tCustomizableEvent.raise_event(customizable_event, DiscardChanges, self.elementsIds, self.originalMarks)\r\n#\t\tself.Close()\r\n\t\t\r\n\tdef PlaceTags(self, sender, e):\r\n\t\tCustomizableEvent.raise_event(customizable_event, TagAndOverride)\r\n\t\t\r\n\t\t\r\n\t\t\r\n# Let's launch our beautiful and useful form !\r\nform = ModelessForm()\r\nform.TopMost = True\r\n\r\n\r\nform.TopMost = True\r\nform.Height = 150\r\nform.Width = 380\r\nform.StartPosition = FormStartPosition.CenterScreen\r\n\r\n\r\nlabel1.Location = dPoint(12, 75);\r\nlabel1.Name = \"label1\";\r\nlabel1.Size = dSize(300, 63);\r\nlabel1.TabIndex = 2;\r\nlabel1.Text = \"You are updating the beam tags. Click Apply Changes to update the beam Mark values.\";\r\nlabel1.UseCompatibleTextRendering = True;\r\n\r\n\r\nbutton1.Location = dPoint(10, 20);\r\nbutton1.Name = \"button1\";\r\nbutton1.Size = dSize(88, 32);\r\nbutton1.TabIndex = 0;\r\nbutton1.Text = \"New Tags\";\r\nbutton1.UseCompatibleTextRendering = True;\r\nbutton1.UseVisualStyleBackColor = True;\r\nbutton1.Click += EventHandler(form.PlaceTags);\r\n\r\n\r\nbutton2.Location = dPoint(250, 20);\r\nbutton2.Name = \"Cancel\";\r\nbutton2.Size = dSize(88, 32);\r\nbutton2.TabIndex = 1;\r\nbutton2.Text = \"Undo Changes\";\r\nbutton2.UseCompatibleTextRendering = True;\r\nbutton2.UseVisualStyleBackColor = True;\r\nbutton2.Click += EventHandler(form.undoChanges);\r\n\r\n\r\nbutton4.Location = dPoint(125, 20);\r\nbutton4.Name = \"OK\";\r\nbutton4.Size = dSize(100, 32);\r\nbutton4.TabIndex = 1;\r\nbutton4.Text = \"Apply Changes\";\r\nbutton4.UseCompatibleTextRendering = True;\r\nbutton4.UseVisualStyleBackColor = True;\r\nbutton4.Click += EventHandler(form.acceptChanges);\r\n\r\n\r\n\r\nform.Controls.Add(button1);\r\nform.Controls.Add(button2);\r\n\r\nform.Controls.Add(button4);\r\nform.Controls.Add(label1);\r\n\r\n#result = form.values\r\n\r\n\r\n\r\nOUT = form.elementsIds",
      "VariableInputPorts": true,
      "Id": "ff999a306f0c4d39b2cac0518f4bf415",
      "Inputs": [
        {
          "Id": "4ecd8d781ad5447b8bd2f1db5000c0b3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a22d4384a6744474a80d2641acbd0528",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "a3a01c47285c48c7827a277dac8b8841",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "86029df071e14c009caa3a36b1bd9e34",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import Point as dPoint\r\nfrom System.Drawing import Size as dSize\r\n\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\ndef ResetOverrideColor(elements):\r\n\tview = doc.ActiveView\r\n\tbooleans = []\r\n\toverride = OverrideGraphicSettings()\r\n\tt = Transaction(doc, \"Undo\")\r\n\tt.Start()\r\n\tfor item in elements:\r\n\t\tview.SetElementOverrides(item, override)\r\n\t\tbooleans.append(True)\r\n\tt.Commit()\r\n\t#TaskDialog.Show(\"result\", str(len(elements)))\r\n\treturn booleans\r\n\t\r\nelements = uidoc.Selection.GetElementIds()\r\n\r\nform = []\r\n\r\nfor i in elements:\r\n\tform.append(i)\r\n\r\n\r\n\r\n\r\n\r\nOUT = elements, form, ResetOverrideColor(form)",
      "VariableInputPorts": true,
      "Id": "702fff34d69246e5a6523eca93b88411",
      "Inputs": [
        {
          "Id": "cba4605babb444afa64da17cd46973c6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6c3c92a31034fe1b5086d84fa939b18",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "8639d5b0-84be-4301-97e0-c4ed9ca4f687-001bc5f8"
      ],
      "Id": "87605e96583b497c89d41ee4cb565eb2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bff3fbe811144d48b2022e6489e2b707",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import Point as dPoint\r\nfrom System.Drawing import Size as dSize\r\n\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nimport math\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\nbeams = UnwrapElement(IN[0])\r\n\r\nusage = {\"Primary\" : \"PB\", \"Secondary\" : \"SB\", \"Vertical Bracing\" : \"VB\", \"Diaphragm\" : \"DB\"}\r\n\r\n\r\ndef GenerateMark(beam):\r\n\txDist = abs((beam.Location.Curve.Evaluate(0.5, True).X*304.8 + 67286.598)/1000)\r\n\tyDist = abs((beam.Location.Curve.Evaluate(0.5, True).Y*304.8 - 559.835)/1000)\r\n\tlvlId = beam.LookupParameter(\"Reference Level\").AsElementId()\r\n\tlvlName = doc.GetElement(lvlId).Name\r\n\ts = lvlName.Split(' ')\r\n\ttry:\r\n\t\tusageValue = usage[beam.LookupParameter(\"Str Framing Use\").AsString()]\r\n\texcept:\r\n\t\tusageValue = \"Usage error\"\r\n\tif xDist<9.5 and yDist<10:\r\n\t\tvalue = '{}{}0{:.0f}0{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telif xDist<9.5:\r\n\t\tvalue = '{}{}0{:.0f}{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telif yDist<9.5:\r\n\t\tvalue = '{}{}{:.0f}0{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telse:\r\n\t\tvalue = '{}{}{:.0f}{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\treturn value\r\n\t#return [xDist, yDist]\r\n\t\r\n\r\nOUT = [GenerateMark(b) for b in beams]",
      "VariableInputPorts": true,
      "Id": "0d59067cd159468aba3b6a01ab1222f3",
      "Inputs": [
        {
          "Id": "1a9f2402cf2148c18b06956f8028410a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b390158d7b5e4116a105e97b17f56af7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import Point as dPoint\r\nfrom System.Drawing import Size as dSize\r\n\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\n\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n\r\nusage = {\"Primary\" : \"PB\", \"Secondary\" : \"SB\", \"Vertical Bracing\" : \"VB\", \"Diaphragm\" : \"DB\"}\r\n\r\n\r\ndef MarkGenerator(beamId):\r\n\tbeam = doc.GetElement(beamId)\r\n\txDist = abs((beam.Location.Curve.Evaluate(0.5, True).X*304.8 + 67286.598)/1000)\r\n\tyDist = abs((beam.Location.Curve.Evaluate(0.5, True).Y*304.8 - 559.835)/1000)\r\n\tlvlId = beam.LookupParameter(\"Reference Level\").AsElementId()\r\n\tlvlName = doc.GetElement(lvlId).Name\r\n\ts = lvlName.Split(' ')\r\n\ttry:\r\n\t\tusageValue = usage[beam.LookupParameter(\"Str Framing Use\").AsString()]\r\n\texcept:\r\n\t\tusageValue = \"Usage error\"\r\n\tif xDist<9.5 and yDist<10:\r\n\t\tvalue = '{}{}0{:.0f}0{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telif xDist<9.5:\r\n\t\tvalue = '{}{}0{:.0f}{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telif yDist<9.5:\r\n\t\tvalue = '{}{}{:.0f}0{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\telse:\r\n\t\tvalue = '{}{}{:.0f}{:.0f}'.format(s[1],usageValue, xDist,yDist)\r\n\treturn value\r\n\r\ndef GetMark(beamId):\r\n\tp = doc.GetElement(beamId).LookupParameter(\"Mark\")\r\n\treturn p.AsString()\r\n\t\r\ndef OverrideColor(elid):\r\n\tbooleans = []\r\n\tview = doc.ActiveView\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\tif GetMark(elid) == MarkGenerator(elid):\r\n\t\toverride.SetProjectionFillColor(Color(0,255,0))\r\n\telif GetMark(elid) == \"\":\r\n\t\toverride.SetProjectionFillColor(Color(255,255,0))\r\n\telse:\r\n\t\toverride.SetProjectionFillColor(Color(255,0,0))\r\n\ttry:\r\n\t\tview.SetElementOverrides(elid, override)\r\n\texcept:\r\n\t\t\"uh-oh to be implemented\"\r\n\treturn booleans\r\n\t\r\nele = UnwrapElement(IN[0]).Id\r\n\r\nOUT = OverrideColor(ele)",
      "VariableInputPorts": true,
      "Id": "3dac9804b89a4e99b5644965f67cd225",
      "Inputs": [
        {
          "Id": "d53b5ae892e8466c822453608c42fd1d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8fd262e1a1a3454dbdf968e1a5bac6bd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "86029df071e14c009caa3a36b1bd9e34",
      "End": "4ecd8d781ad5447b8bd2f1db5000c0b3",
      "Id": "44ed8f75b3464b96b3d0e83083defd88"
    },
    {
      "Start": "bff3fbe811144d48b2022e6489e2b707",
      "End": "d53b5ae892e8466c822453608c42fd1d",
      "Id": "16279e2b0c16448eb3a50445c762108c"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.1.5055",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "ff999a306f0c4d39b2cac0518f4bf415",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 497.38026902780666,
        "Y": 462.69075264681413
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "a3a01c47285c48c7827a277dac8b8841",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 307.02568238801894,
        "Y": 464.680346111581
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "702fff34d69246e5a6523eca93b88411",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 921.8835566343721,
        "Y": 818.87057928604145
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Elements",
        "Id": "87605e96583b497c89d41ee4cb565eb2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 392.38983772240658,
        "Y": 872.51997137908018
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "0d59067cd159468aba3b6a01ab1222f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 298.024289179529,
        "Y": 113.95513680773809
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "3dac9804b89a4e99b5644965f67cd225",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 668.15525965712334,
        "Y": 858.37129733796337
      }
    ],
    "Annotations": [],
    "X": -174.84124557989435,
    "Y": -19.582987127402021,
    "Zoom": 0.77997097939582383
  }
}