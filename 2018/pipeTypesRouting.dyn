{
  "Uuid": "d9d44665-e4d2-4821-bf76-33a36a5b1730",
  "IsCustomNode": false,
  "Description": null,
  "Name": "pipeTypesRouting",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\nfrom Autodesk.Revit.DB.Plumbing import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#doc = DocumentManager.Instance.CurrentDBDocument\r\n#uidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\ndoc = UnwrapElement(IN[0])\r\n\r\ntypes = FilteredElementCollector(doc).OfClass(PipeType)\r\n\r\n#typesItems = [t for t in types]\r\npipeSegmentNames = []\r\npipeElbowNames = []\r\npipeJunctionNames = []\r\npipeCrossNames = []\r\npipeTransitionNames = []\r\npipeUnionNames = []\r\nmjNames = []\r\npipeCapNames = []\r\nprefJunction = []\r\n\r\nerrors = []\r\n\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.Segments)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tpipeSegmentNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tpipeSegment = rpm.GetRule(RoutingPreferenceRuleGroupType.Segments,i)\r\n\t\t\tpipeSegmentId = pipeSegment.MEPPartId\r\n\t\t\tpipeSegmentElement = doc.GetElement(pipeSegmentId)\r\n\t\t\tsubList.append(pipeSegmentElement.Name)\r\n\telse:\r\n\t\tpipeSegmentNames.append([\"Empty\"])\r\n\t\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.Elbows)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tpipeElbowNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tpipeElbow = rpm.GetRule(RoutingPreferenceRuleGroupType.Elbows,i)\r\n\t\t\tpipeElbowId = pipeElbow.MEPPartId\r\n\t\t\tpipeElbowElement = doc.GetElement(pipeElbowId)\r\n\t\t\tsubList.append(pipeElbowElement.FamilyName + \":\" + pipeElbowElement.ToDSType(True).Name)\r\n\telse:\r\n\t\tpipeElbowNames.append([\"Empty\"])\r\n\r\n\t\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.Junctions)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tpipeJunctionNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tpipeJunction = rpm.GetRule(RoutingPreferenceRuleGroupType.Junctions,i)\r\n\t\t\tpipeJunctionId = pipeJunction.MEPPartId\r\n\t\t\tpipeJunctionElement = doc.GetElement(pipeJunctionId)\r\n\t\t\tsubList.append(pipeJunctionElement.FamilyName + \":\" + pipeJunctionElement.ToDSType(True).Name)\r\n\telse:\r\n\t\tpipeJunctionNames.append([\"Empty\"])\r\n\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.Crosses)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tpipeCrossNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tpipeCross = rpm.GetRule(RoutingPreferenceRuleGroupType.Crosses,i)\r\n\t\t\tpipeCrossId = pipeCross.MEPPartId\r\n\t\t\tpipeCrossElement = doc.GetElement(pipeCrossId)\r\n\t\t\tsubList.append(pipeCrossElement.FamilyName + \":\" + pipeCrossElement.ToDSType(True).Name)\r\n\telse:\r\n\t\tpipeCrossNames.append([\"Empty\"])\r\n\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.Transitions)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tpipeTransitionNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tpipeTransition = rpm.GetRule(RoutingPreferenceRuleGroupType.Transitions,i)\r\n\t\t\tpipeTransitionId = pipeTransition.MEPPartId\r\n\t\t\tpipeTransitionElement = doc.GetElement(pipeTransitionId)\r\n\t\t\tsubList.append(pipeTransitionElement.FamilyName + \":\" + pipeTransitionElement.ToDSType(True).Name)\r\n\telse:\r\n\t\tpipeTransitionNames.append([\"Empty\"])\r\n\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.Unions)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tpipeUnionNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tpipeUnion = rpm.GetRule(RoutingPreferenceRuleGroupType.Unions,i)\r\n\t\t\tpipeUnionId = pipeUnion.MEPPartId\r\n\t\t\tpipeUnionElement = doc.GetElement(pipeUnionId)\r\n\t\t\tsubList.append(pipeUnionElement.FamilyName + \":\" + pipeUnionElement.ToDSType(True).Name)\r\n\telse:\r\n\t\tpipeUnionNames.append([\"Empty\"])\r\n\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.MechanicalJoints)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tmjNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tmj = rpm.GetRule(RoutingPreferenceRuleGroupType.MechanicalJoints,i)\r\n\t\t\tmjId = mj.MEPPartId\r\n\t\t\tmjElement = doc.GetElement(mjId)\r\n\t\t\tsubList.append(mjElement.FamilyName + \":\" + mjElement.ToDSType(True).Name)\r\n\telse:\r\n\t\tmjNames.append([\"Empty\"])\r\n\t\r\n\r\nfor t in types:\r\n\trpm = t.RoutingPreferenceManager\r\n\tnRules = rpm.GetNumberOfRules(RoutingPreferenceRuleGroupType.Caps)\r\n\tif nRules>0:\r\n\t\tsubList = []\r\n\t\tpipeCapNames.append(subList)\r\n\t\tfor i in range(0,nRules):\r\n\t\t\tpipeCap = rpm.GetRule(RoutingPreferenceRuleGroupType.Caps,i)\r\n\t\t\tpipeCapId = pipeCap.MEPPartId\r\n\t\t\tpipeCapElement = doc.GetElement(pipeCapId)\r\n\t\t\tsubList.append(pipeCapElement.FamilyName + \":\" + pipeCapElement.ToDSType(True).Name)\r\n\telse:\r\n\t\tpipeCapNames.append([\"Empty\"])\r\n\r\n\r\nfor t in types:\r\n\trpm = t.PreferredJunctionType\r\n\tprefJunction.append([rpm])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nOUT = [[t.ToDSType(True).Name] for t in types], pipeSegmentNames, pipeElbowNames, pipeJunctionNames, pipeCrossNames, pipeTransitionNames, pipeUnionNames, mjNames, pipeCapNames, prefJunction, errors\r\n\r\n\r\n\r\n#OUT = doc.GetElement(typesItems[0].RoutingPreferenceManager.GetRule(RoutingPreferenceRuleGroupType.Crosses, 0).MEPPartId).FamilyName + \":\"+ doc.GetElement(typesItems[0].RoutingPreferenceManager.GetRule(RoutingPreferenceRuleGroupType.Crosses, 0).MEPPartId).ToDSType(True).Name\r\n",
      "VariableInputPorts": true,
      "Id": "7f34b26d1b1342838d4ced869d293095",
      "Inputs": [
        {
          "Id": "dda2a5717088483183bd7f89b0811feb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1b7058f38f64e03afbb846513b0ab62",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ExportExcel@string,string,int,int,var[][],bool",
      "Id": "be4debccdf774af1bb7dd4e86efb2311",
      "Inputs": [
        {
          "Id": "e6c37430db724688a0a3b15693792a7d",
          "Name": "filePath",
          "Description": "File path to the Microsoft Excel spreadsheet.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f683f248156c42d0bf725f6453070e85",
          "Name": "sheetName",
          "Description": "Name of the workseet to write data to.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eaac85008e124928b1a035ef5e0b5588",
          "Name": "startRow",
          "Description": "Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "65fdfae4c6c649d1bf6121792e716774",
          "Name": "startCol",
          "Description": "Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3690a17281c74694b51de45cd0c56294",
          "Name": "data",
          "Description": "Data to write to the spreadsheet.\n\nvar[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c741f96999da409dbb68c8af20dd84d6",
          "Name": "overWrite",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ce6056ea255b46bc82c43e8c19bc6294",
          "Name": "data",
          "Description": "Data written to the spreadsheet.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Write data to a Microsoft Excel spreadsheet. Data is written by row with sublists to be written in successive rows. Rows and columns are zero-indexed; for example, the value in the data list at [0,0] will be written to cell A1. Null values and empty lists are written to Excel as empty cells. This node requires Microsoft Excel to be installed.\n\nData.ExportExcel (filePath: string, sheetName: string, startRow: int, startCol: int, data: var[][], overWrite: bool = false): var[][]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "\\\\cadtools\\cadtools\\UKMEA BIM Team\\Working Area\\Global Revit Standards\\02 Templates\\01 Existing Arup Templates\\ViewColorCheck\\routingPreferences",
      "InputValue": "\\\\cadtools\\cadtools\\UKMEA BIM Team\\Working Area\\Global Revit Standards\\02 Templates\\01 Existing Arup Templates\\ViewColorCheck\\routingPreferences",
      "NodeType": "ExtensionNode",
      "Id": "d93e15a6d14f487b88dda7d97cebe259",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "395ceb580e234308b38d5162e7130812",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Sheet1\";",
      "Id": "53b11d94e15b46dabf95f9d5b1ecfff2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "62329f37ce114033861c15925b439343",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "be4ce2360a7040f7aaeb7c2f543ac3b4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1e2c25fddfd842379ca195b13a93e5be",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "643a5e406eb84cfd8cb9e360342a5fdb",
      "Inputs": [
        {
          "Id": "97079a17a61e4c488d4b3ec7bf4af13e",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eaf529245a214512bd7201ce78683434",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"Pipe Type\",\"Segment\",\n\"Elbow\",\n\"Junction\",\n\"Cross\",\n\"Transition\",\n\"Union\",\n\"Flanges\",\n\"Cap\",\"Preferred Junction Type\"];",
      "Id": "e7c1900852154c11bdf2b4d1ad3f4b5e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "93aa6c682b01457c9edaa0ca8384b8c8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.DropItems@var[]..[],int",
      "Id": "cb5d70b2c5cf4a00a1d6ee4a0254b47a",
      "Inputs": [
        {
          "Id": "bcd9c83ec2ee4b5883cde33c465268e9",
          "Name": "list",
          "Description": "List to remove items from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8da0fc1aed74497080a173510f58c091",
          "Name": "amount",
          "Description": "Amount of items to remove. If negative, items are removed from the end of the list.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bc7b9dafa1464976980e3db07f1d45e6",
          "Name": "list",
          "Description": "List of remaining items.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes an amount of items from the start of the list. If the amount is a negative value, items are removed from the end of the list.\n\nList.DropItems (list: var[]..[], amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "-1;",
      "Id": "9e2365607f864b64b1b09ce367b4d852",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "88639553d8ca4a9eb311be90b5b1e13c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AddItemToFront@var[]..[],var[]..[]",
      "Id": "c8c8fefa9ab54c6c88c59f6eb2f4eb05",
      "Inputs": [
        {
          "Id": "effc165e407d49b39f28b4710fdc5cd6",
          "Name": "item",
          "Description": "Item to be added. Item could be an object or a list.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e1905a132db94998a447bc00c98c034f",
          "Name": "list",
          "Description": "List to add on to.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00dfa3000f114a979e3f15b23adc32ee",
          "Name": "list",
          "Description": "New list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adds an item to the beginning of a list.\n\nList.AddItemToFront (item: var[]..[], list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "lista = IN[0]\r\nresult = []\r\n\r\nfor item in lista:\r\n\tsubList = []\r\n\tresult.append(subList)\r\n\tfor i in item:\r\n\t\tif len(i)>1:\r\n\t\t\tsubList.append(i[0] + \" & \" + i[1])\r\n\t\telse:\r\n\t\t\tsubList.append(i[0])\r\n\t\t\r\nOUT = result\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "da8716cc31d64f078ed576b01727dd8d",
      "Inputs": [
        {
          "Id": "9ed1393894244c11a88057c5a6c3f54e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f5b6cf8e9d634ed0afb5151a038bde2e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0][0];",
      "Id": "0f198646e1ad4ef995a210875b41f726",
      "Inputs": [
        {
          "Id": "0113c337cf0a438195a7c4856cd99a20",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b9d19017d3c341d4a1a91d8a6a4d3a2c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Rhythm.Revit.Application.Application.OpenDocumentFile@string,bool,bool",
      "Id": "9abf33cd04874839a3e73fe4b1839c55",
      "Inputs": [
        {
          "Id": "c014ed303f944c3eb884ba15fff6c9e3",
          "Name": "filePath",
          "Description": "The file to obtain document from.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a47c3472aa754b1cb5f1b2287dfc06c2",
          "Name": "audit",
          "Description": "Choose whether or not to audit the file upon opening. (Will run slower with this)\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00e383bcad5e4c9e969202f21aa2ce71",
          "Name": "detachFromCentral",
          "Description": "Choose whether or not to detach from central upon opening. Only for RVT files.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ac14de04ef554a22902d26b3ff55678a",
          "Name": "Document",
          "Description": "The document.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "This node will open the given file in the background.\n\nApplication.OpenDocumentFile (filePath: string, audit: bool = false, detachFromCentral: bool = false): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\giovanni.brogiolo\\Desktop\\target.rvt",
      "InputValue": "..\\Desktop\\target.rvt",
      "NodeType": "ExtensionNode",
      "Id": "b432fdab0f6c4f03855c218ddd6831f9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7dd39478297b4e2daa0aa89e41eccf7c",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    }
  ],
  "Connectors": [
    {
      "Start": "a1b7058f38f64e03afbb846513b0ab62",
      "End": "bcd9c83ec2ee4b5883cde33c465268e9",
      "Id": "1fc6b14fa8f145338e60902cb378e1a4"
    },
    {
      "Start": "395ceb580e234308b38d5162e7130812",
      "End": "e6c37430db724688a0a3b15693792a7d",
      "Id": "62075fc982f14e29b5c4c34ce3660e2b"
    },
    {
      "Start": "62329f37ce114033861c15925b439343",
      "End": "f683f248156c42d0bf725f6453070e85",
      "Id": "528cc6bab35e4baa9b1207d877beb2c3"
    },
    {
      "Start": "1e2c25fddfd842379ca195b13a93e5be",
      "End": "eaac85008e124928b1a035ef5e0b5588",
      "Id": "a4db77288449479b8dbdc0973259ef60"
    },
    {
      "Start": "1e2c25fddfd842379ca195b13a93e5be",
      "End": "65fdfae4c6c649d1bf6121792e716774",
      "Id": "bb5f161d53ed46569c18b0d50644d995"
    },
    {
      "Start": "eaf529245a214512bd7201ce78683434",
      "End": "e1905a132db94998a447bc00c98c034f",
      "Id": "1119b0cca7bf445b90691e79ecb5c4ba"
    },
    {
      "Start": "93aa6c682b01457c9edaa0ca8384b8c8",
      "End": "effc165e407d49b39f28b4710fdc5cd6",
      "Id": "053e75a940c441b1af571da1fdfbd94e"
    },
    {
      "Start": "bc7b9dafa1464976980e3db07f1d45e6",
      "End": "9ed1393894244c11a88057c5a6c3f54e",
      "Id": "b370c646934647ab8e2728b0fdc47e41"
    },
    {
      "Start": "bc7b9dafa1464976980e3db07f1d45e6",
      "End": "0113c337cf0a438195a7c4856cd99a20",
      "Id": "64c5399587f64c14a6359d5fad98a2bf"
    },
    {
      "Start": "88639553d8ca4a9eb311be90b5b1e13c",
      "End": "8da0fc1aed74497080a173510f58c091",
      "Id": "2ad279de2e2342b5a9757d1cf0fab08b"
    },
    {
      "Start": "00dfa3000f114a979e3f15b23adc32ee",
      "End": "3690a17281c74694b51de45cd0c56294",
      "Id": "a42ac81020ec4b4b8ed4c9b2defeeb3d"
    },
    {
      "Start": "f5b6cf8e9d634ed0afb5151a038bde2e",
      "End": "97079a17a61e4c488d4b3ec7bf4af13e",
      "Id": "d30416d0614f4e3d8e3e4c7339a65414"
    },
    {
      "Start": "ac14de04ef554a22902d26b3ff55678a",
      "End": "dda2a5717088483183bd7f89b0811feb",
      "Id": "bfa321ecd6b24b75a1ff0fe51249ff7f"
    },
    {
      "Start": "7dd39478297b4e2daa0aa89e41eccf7c",
      "End": "c014ed303f944c3eb884ba15fff6c9e3",
      "Id": "5e17a3a7290d49eaa5904764a6fdae6f"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.1.4955",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "7f34b26d1b1342838d4ced869d293095",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 357.57152729037495,
        "Y": 169.5227096067768
      },
      {
        "ShowGeometry": true,
        "Name": "Data.ExportExcel",
        "Id": "be4debccdf774af1bb7dd4e86efb2311",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1894.037855805989,
        "Y": -139.24068573849837
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "d93e15a6d14f487b88dda7d97cebe259",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1082.5669165025263,
        "Y": -127.23667776063651
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "53b11d94e15b46dabf95f9d5b1ecfff2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1509.791111701212,
        "Y": -23.893596134303266
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "be4ce2360a7040f7aaeb7c2f543ac3b4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1664.791111701212,
        "Y": 34.106403865696734
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "643a5e406eb84cfd8cb9e360342a5fdb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1119.2142832258785,
        "Y": 213.527641492702
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e7c1900852154c11bdf2b4d1ad3f4b5e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 561.9886459674168,
        "Y": 431.19706081623463
      },
      {
        "ShowGeometry": true,
        "Name": "List.DropItems",
        "Id": "cb5d70b2c5cf4a00a1d6ee4a0254b47a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 567.20546066123325,
        "Y": 170.31042091447671
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9e2365607f864b64b1b09ce367b4d852",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 566.0,
        "Y": 343.0
      },
      {
        "ShowGeometry": true,
        "Name": "List.AddItemToFront",
        "Id": "c8c8fefa9ab54c6c88c59f6eb2f4eb05",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1615.4014678626895,
        "Y": 232.03665093255364
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "da8716cc31d64f078ed576b01727dd8d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 946.32321169006229,
        "Y": 105.60199052683579
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0f198646e1ad4ef995a210875b41f726",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1361.0445303437323,
        "Y": 115.99223947253589
      },
      {
        "ShowGeometry": true,
        "Name": "Application.OpenDocumentFile",
        "Id": "9abf33cd04874839a3e73fe4b1839c55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -103.21391043123356,
        "Y": 171.9131050527285
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "b432fdab0f6c4f03855c218ddd6831f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -660.4462542436811,
        "Y": 154.61542697429326
      }
    ],
    "Annotations": [],
    "X": 154.53691978108486,
    "Y": 186.86089359364897,
    "Zoom": 0.80935718288419567
  }
}