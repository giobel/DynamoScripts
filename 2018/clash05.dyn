<Workspace Version="1.3.2.2480" X="-3147.79776767947" Y="-910.877310565929" zoom="1.26333177263822" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Nodes.DSModelElementsSelection guid="74909603-d31f-454e-a5c1-60f50c5e7c17" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="2024.24715647574" y="-75.2433054388928" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true" />
    <Dynamo.Nodes.DSModelElementsSelection guid="b45993f0-0ea7-421f-bc55-7540531e4b3c" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="1832.18149389624" y="274.815645499112" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true" />
    <Dynamo.Nodes.DSModelElementsSelection guid="b5998032-2c50-4da2-8bf4-23d225873212" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="2047.08013734183" y="62.8146626503214" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true" />
    <Dynamo.Nodes.DSModelElementsSelection guid="0441048c-b4f8-4b4c-b50f-48b608ee108d" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="1900.68043649452" y="532.111578291935" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="bea7452d-1c0e-468f-b959-92dfd128d2db" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="2462.17263139583" y="14.0643846370327" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" CodeText="{a,b};" ShouldFocus="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="b88378c8-ffce-4819-9584-16f96ecceb27" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="2447.16903795191" y="253.003755018465" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" CodeText="{a,b};" ShouldFocus="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <PythonNodeModels.PythonNode guid="f85789a3-7418-40a9-9dd7-7c6318f7ccbb" type="PythonNodeModels.PythonNode" nickname="Python Script" x="2628.13528352121" y="136.546483495434" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>import clr
clr.AddReference("ProtoGeometry")
from Autodesk.DesignScript.Geometry import *

LineBestFit = Line.ByBestFitThroughPoints

# Import RevitAPI
clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *
clr.AddReference("RevitAPIUI")
from Autodesk.Revit.UI import TaskDialog
# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
# Import ToProtoType, ToRevitType geometry conversion extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)

import math

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application


beam = UnwrapElement(IN[0])
duct = UnwrapElement(IN[1])
dynamoBeams = IN[0]


def GetElemType(e):
	try:
		elemType = doc.GetElement(e.GetTypeId())
		return elemType
	except:
		pass
		return None

def GetParamValue(eType, pName):
	paramValue = None
	for i in eType.Parameters:
		if i.Definition.Name == pName:
			paramValue = i.AsValueString()
			break
		else:
			continue
	return paramValue


def GetParam(element, name):
	p = element.get_Parameter(name)	
	if p.StorageType == StorageType.String:
		return p.AsString()
	elif p.StorageType == StorageType.ElementId:
		elem = doc.GetElement(p.AsElementId())
		return elem
	elif p.StorageType == StorageType.Double:
		ProjectUnits = p.DisplayUnitType
		newval = UnitUtils.ConvertFromInternalUnits(p.AsDouble(),ProjectUnits)
		return newval
	else:
		return p.AsInteger()

def GetEndPoints(beam):
	return [beam.Location.Curve.GetEndPoint(0).ToPoint(), beam.Location.Curve.GetEndPoint(1).ToPoint()]


def PointXYDistance(Pt0, Pt1):
	distance = math.pow((math.pow((Pt0.X-Pt1.X),2) + math.pow((Pt0.Y-Pt1.Y),2)),0.5)
	return round(distance,0)

def beamRealCurve(element):
	vertex = element.Geometry()[0].Vertices
	pGeom = []
	for v in vertex:
		pGeom.append(v.PointGeometry)
	crv = LineBestFit(pGeom)	
	return crv
	

values = []
checks = []

for i in range(0,len(beam)):
	val = []
	values.append(val)
	che = []
	checks.append(che)
	for j in range(0,len(duct[i])):
		# BEAM PARAMETERS
		
		zOffset = GetParam(beam[i], BuiltInParameter.Z_OFFSET_VALUE) # NEGATIVE VALUE!
		
		beamZTop = GetEndPoints(beam[i])[0].Z + zOffset
		
		#beamEndPoint = GetEndPoints(beam)[1] NOT ACCURATE!
		
		beamStPoint = beamRealCurve(dynamoBeams[i]).StartPoint
		beamEndPoint = beamRealCurve(dynamoBeams[i]).EndPoint
		
		#length = round(GetParam(beam, BuiltInParameter.INSTANCE_LENGTH_PARAM),0) NOT NEEDED ANYMORE!
		
		#cutLength = round(GetParam(beam, BuiltInParameter.STRUCTURAL_FRAME_CUT_LENGTH),0) NOT NEEDED ANYMORE!
		
		#remainLength = length - cutLength NOT NEEDED ANYMORE!
		
		beamDepth = int(GetParamValue(GetElemType(beam[i]), "d"))
		
		
		# DUCT PARAMETERS
		
		ductWidth = int(GetParamValue(duct[i][j], "y"))
		
		
		
		ductHeight = int(GetParamValue(duct[i][j], "z"))
		
		
		
		ductCentroid = duct[i][j].Location.Point.ToPoint()
		
		
		# CHECKS 
		
		# 1. BEAM START POINT TO OPENING EDGE DISTANCE
		
		beamStOpeningEdgeDist = PointXYDistance(ductCentroid, beamStPoint) - ductWidth/2
		
		val.append(beamStOpeningEdgeDist)
		
		beamEndOpeningEdgeDist = PointXYDistance(ductCentroid, beamEndPoint) - ductWidth/2
		
		val.append(beamEndOpeningEdgeDist)
		
		# 2. DISTANCE FROM FLANGES
		
		distTopFlange = round(beamZTop - ductCentroid.Z - ductHeight/2,0)
		
		val.append(distTopFlange)
		
		distBotFlange = round(beamDepth - ductHeight - distTopFlange,0)
		
		val.append(distBotFlange)
		
		val.append(ductWidth)
		
		val.append(ductHeight)
		
		# 3. CHECKS
		
		checkA = beamStOpeningEdgeDist &gt; (2 * beamDepth or ductWidth)
		
		checkB = beamEndOpeningEdgeDist &gt; (2 * beamDepth or ductWidth)
		
		checkC = distTopFlange &gt; (0.25 * beamDepth)
		
		checkD = distBotFlange &gt; (0.25 * beamDepth)
		
		checkE = ductWidth &lt; beamDepth
		
		checkF = ductHeight &lt; (0.5 * beamDepth)
		
		che.append(checkA)
		che.append(checkB)
		che.append(checkC)
		che.append(checkD)
		che.append(checkE)
		che.append(checkF)
		
		


#names = ["beamStOpeningEdgeDist", "beamEndOpeningEdgeDist", "distTopFlange", "distBotFlange", "ductWidth", "ductHeight"]
#values = [beamStOpeningEdgeDist, beamEndOpeningEdgeDist, distTopFlange, distBotFlange, ductWidth, ductHeight]
#checks = [checkA, checkB, checkC, checkD, checkE, checkF]

#dict = [names, values, checks]

#OUT = map(list, zip(*dict))

OUT = values, checks
</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="447ec7f8-8f19-4c8f-899c-a8363a1f4482" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.Chop" x="3111.76596637689" y="93.1888781641344" isVisible="true" isUpstreamVisible="true" lacing="Longest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="DSCoreNodes.dll" function="DSCore.List.Chop@var[]..[],int[]">
      <PortInfo index="0" default="False" useLevels="True" level="2" shouldKeepListStructure="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="0e14dc84-39a5-4405-9f3a-07155a5d33b0" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="2963.79729630798" y="164.778878555277" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="6;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="543c4ce4-65bf-4252-8730-33419c99591c" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Duct Clash Check" x="2392.4895164373" y="770.691020050934" isVisible="true" isUpstreamVisible="true" lacing="Longest" isSelectedInput="False" IsFrozen="false" isPinned="true">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <ID value="0b22c6e1-1550-4023-8180-bec2378903cf" />
      <Name value="Duct Clash Check" />
      <Description value="Check Clash" />
      <Inputs>
        <Input value="Beams" />
        <Input value="Ducts" />
      </Inputs>
      <Outputs>
        <Output value="OUT" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Nodes.DSModelElementsSelection guid="9fa38eff-7571-40c0-9a8c-8321554bbc0d" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="1949.75579231187" y="744.140882947266" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true">
      <instance id="a132903f-7405-4136-bdae-341b10076756-0022055d" />
    </Dynamo.Nodes.DSModelElementsSelection>
    <Dynamo.Nodes.DSModelElementsSelection guid="5b39453d-d73b-488d-8e4d-307b6d12a33a" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="2053.02735824171" y="943.701940938104" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true">
      <instance id="a132903f-7405-4136-bdae-341b10076756-0022057d" />
      <instance id="a132903f-7405-4136-bdae-341b10076756-002205f3" />
      <instance id="a132903f-7405-4136-bdae-341b10076756-0022060d" />
    </Dynamo.Nodes.DSModelElementsSelection>
    <PythonNodeModels.PythonNode guid="379fb9b0-b5c0-4d20-8d1d-6a19ec4302c9" type="PythonNodeModels.PythonNode" nickname="Python Script" x="3307.65062185013" y="758.453331209866" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>import clr
clr.AddReference("ProtoGeometry")
from Autodesk.DesignScript.Geometry import *

LineBestFit = Line.ByBestFitThroughPoints

# Import RevitAPI
clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *
clr.AddReference("RevitAPIUI")
from Autodesk.Revit.UI import TaskDialog
# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
# Import ToProtoType, ToRevitType geometry conversion extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.GeometryConversion)

import math

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application


beamList = UnwrapElement(IN[0])
ductList = UnwrapElement(IN[1])
dynamoBeams = IN[0]


def GetElemType(e):
	try:
		elemType = doc.GetElement(e.GetTypeId())
		return elemType
	except:
		pass
		return None

def GetParamValue(eType, pName):
	paramValue = None
	for i in eType.Parameters:
		if i.Definition.Name == pName:
			paramValue = i.AsValueString()
			break
		else:
			continue
	return paramValue


def GetParam(element, name):
	p = element.get_Parameter(name)	
	if p.StorageType == StorageType.String:
		return p.AsString()
	elif p.StorageType == StorageType.ElementId:
		elem = doc.GetElement(p.AsElementId())
		return elem
	elif p.StorageType == StorageType.Double:
		ProjectUnits = p.DisplayUnitType
		newval = UnitUtils.ConvertFromInternalUnits(p.AsDouble(),ProjectUnits)
		return newval
	else:
		return p.AsInteger()

def GetEndPoints(beam):
	return [beam.Location.Curve.GetEndPoint(0).ToPoint(), beam.Location.Curve.GetEndPoint(1).ToPoint()]


def PointXYDistance(Pt0, Pt1):
	distance = math.pow((math.pow((Pt0.X-Pt1.X),2) + math.pow((Pt0.Y-Pt1.Y),2)),0.5)
	return round(distance,0)

def beamRealCurve(element):
	vertex = element.Geometry()[0].Vertices
	pGeom = []
	for v in vertex:
		pGeom.append(v.PointGeometry)
	crv = LineBestFit(pGeom)	
	return crv
	

values = []
checks = []



class RectDuct:
	def __init__(self, Shape, Width, HostedBeam):
		self.Shape = "Rectangle"
		self.Width = Width
		self.HostedBeam = HostedBeam
	
	def printOut(self):
		return [self.Shape, self.Width, self.HostedBeam]
		

objDuct = []


for i in range(0,len(beamList)):
	for j in range(0,len(ductList[i])):
		if ductList[i][j].Name == "RectDuct":
			instance = RectDuct("Rectangle", GetParamValue(ductList[i][j], "y"), beamList[i].Id)
#			instance.Width = GetParamValue(ductList[i][j], "y")
			objDuct.append(instance)
		else:
			objDuct.append("another duct")


		


OUT = [d.printOut() for d in objDuct]
</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="ee55b356-a8c3-405d-9742-b6f962988995" type="PythonNodeModels.PythonNode" nickname="Python Script" x="3083.07195982509" y="1058.40127000145" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *

clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.Elements)

clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB.Electrical import *
from Autodesk.Revit.DB import MEPSystem

clr.AddReference('DSCoreNodes')
import DSCore
from DSCore.List import *

#The inputs to this node will be stored as a list in the IN variables.

input = UnwrapElement(IN[0])

listElectComponents = []


for i in range(0, len(input)):
	electComponents = List[ElementId]()
	listElectComponents.append(electComponents)
	for j in range (0,len(input[i])):
		electComponents.Add(input[i][j].Id)


#Assign your output to the OUT variable.
OUT = listElectComponents
</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="f5c23599-1536-441f-91b3-98d5d81ccb18" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Object.Type" x="3443.26366907126" y="1044.65992424368" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="DSCoreNodes.dll" function="DSCore.Object.Type@var">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="bf49876e-910f-4c37-8227-79912153a776" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="2862.65158116362" y="755.899133504149" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" CodeText="{a};" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="22b352ae-65b8-4b6d-89b4-dddf69d812ba" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="2848.21285050566" y="1077.61148320224" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" CodeText="{b};" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <PythonNodeModels.PythonNode guid="ffb5a005-577c-4de4-8222-c4ec12e469cb" type="PythonNodeModels.PythonNode" nickname="Python Script" x="2889.47728883164" y="1320.91467240055" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *

clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.Elements)

clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB.Electrical import *
from Autodesk.Revit.DB import MEPSystem

clr.AddReference('DSCoreNodes')
import DSCore
from DSCore.List import *

#The inputs to this node will be stored as a list in the IN variables.

input = UnwrapElement(IN[0])

list = []

class me():
	pass


class Rev():
    def __init__(self, initval=0, name='var'):
        self.val = initval
        self.name = name


io = me()

io.age = 34
io.name = "giovann"


tu = me()

tu.age = 45
tu.Name = "serg"

ei = Rev()


#Assign your output to the OUT variable.
OUT = io.name, tu.Name</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="0d7138be-2051-4580-ba6f-22e29c75f867" type="PythonNodeModels.PythonNode" nickname="Python Script" x="3163.06568115624" y="1323.39581386629" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
#The inputs to this node will be stored as a list in the IN variables.

list = IN[0]


class Shape:

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.description = "This shape has not been described yet"
        self.author = "Nobody has claimed to make this shape yet"

    def area(self):
        return self.x * self.y

    def perimeter(self):
        return 2 * self.x + 2 * self.y

    def describe(self, text):
        self.description = text

    def authorName(self, text):
        self.author = text

    def scaleSize(self, scale):
        self.x = self.x * scale
        self.y = self.y * scale


rect = Shape(10,45)

#Assign your output to the OUT variable.
OUT = rect</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="74909603-d31f-454e-a5c1-60f50c5e7c17" start_index="0" end="bea7452d-1c0e-468f-b959-92dfd128d2db" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b45993f0-0ea7-421f-bc55-7540531e4b3c" start_index="0" end="b88378c8-ffce-4819-9584-16f96ecceb27" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b5998032-2c50-4da2-8bf4-23d225873212" start_index="0" end="bea7452d-1c0e-468f-b959-92dfd128d2db" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0441048c-b4f8-4b4c-b50f-48b608ee108d" start_index="0" end="b88378c8-ffce-4819-9584-16f96ecceb27" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="bea7452d-1c0e-468f-b959-92dfd128d2db" start_index="0" end="f85789a3-7418-40a9-9dd7-7c6318f7ccbb" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b88378c8-ffce-4819-9584-16f96ecceb27" start_index="0" end="f85789a3-7418-40a9-9dd7-7c6318f7ccbb" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f85789a3-7418-40a9-9dd7-7c6318f7ccbb" start_index="0" end="447ec7f8-8f19-4c8f-899c-a8363a1f4482" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0e14dc84-39a5-4405-9f3a-07155a5d33b0" start_index="0" end="447ec7f8-8f19-4c8f-899c-a8363a1f4482" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9fa38eff-7571-40c0-9a8c-8321554bbc0d" start_index="0" end="543c4ce4-65bf-4252-8730-33419c99591c" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9fa38eff-7571-40c0-9a8c-8321554bbc0d" start_index="0" end="bf49876e-910f-4c37-8227-79912153a776" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5b39453d-d73b-488d-8e4d-307b6d12a33a" start_index="0" end="543c4ce4-65bf-4252-8730-33419c99591c" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5b39453d-d73b-488d-8e4d-307b6d12a33a" start_index="0" end="22b352ae-65b8-4b6d-89b4-dddf69d812ba" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ee55b356-a8c3-405d-9742-b6f962988995" start_index="0" end="f5c23599-1536-441f-91b3-98d5d81ccb18" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="bf49876e-910f-4c37-8227-79912153a776" start_index="0" end="379fb9b0-b5c0-4d20-8d1d-6a19ec4302c9" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="22b352ae-65b8-4b6d-89b4-dddf69d812ba" start_index="0" end="ee55b356-a8c3-405d-9742-b6f962988995" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="22b352ae-65b8-4b6d-89b4-dddf69d812ba" start_index="0" end="379fb9b0-b5c0-4d20-8d1d-6a19ec4302c9" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="22b352ae-65b8-4b6d-89b4-dddf69d812ba" start_index="0" end="ffb5a005-577c-4de4-8222-c4ec12e469cb" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="22b352ae-65b8-4b6d-89b4-dddf69d812ba" start_index="0" end="0d7138be-2051-4580-ba6f-22e29c75f867" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>