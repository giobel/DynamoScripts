{
  "Uuid": "dfed4d22-7be5-4798-afe1-978727b88ef8",
  "IsCustomNode": false,
  "Description": null,
  "Name": "tendons",
  "ElementResolver": {
    "ResolutionMap": {
      "Autodesk.Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      },
      "Autodesk.DesignScript.Geometry.Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "SpeckleDynamo.Receiver, SpeckleDynamo",
      "DocumentName": "tendons",
      "DocumentGuid": "dfed4d22-7be5-4798-afe1-978727b88ef8",
      "OldStreamId": "BJktkOEEX",
      "myReceiver": "dY/Pb9owFICTDQJVe5522AHtjEKskoxO4hBCRh0WU0ogpJfKCaZ1YpIoP1jhr+r/10Nnlx566bP8bPl9+vyeJEuS9MpDnCIuvvA0WuQkShixsoJ0OytSlDRLh0DVxOp2rJpVdUGGKamrArNu56YOGY2m5OBlCUmHac1YUwh/fPCo73czpxajJK2aHGiNcEmWBWsvqoLgHdw0bjNG2px5M7VPJNzIckOWv320nSqCFg2LrXzl6edjVeW/e73yhKq4qHN1Qx9ohVkP57S3B0qDc2cjJ6mSmW2vmy98+k/UYobWHrOa3N9LbfGJeFEUnp5lx/c65OA8hpOIzqgDl0cIEIUlTG/1yIIGTPL1ynKuVA5tsT/nEARBPL9EngnQ2O7PJnexOzb/uZM/ses7MfJs+tdy8mDN2dgG7tHWeP2AjkEJd6u+kLreUkfj5RPyuCfV1Mw/ZNQqdwtrHgBXT5MBwsZ0swseDH9izggzr/399HqAjLnS4m1/10Pd2Gq/NDAYbCONB45AGIX98/8=",
      "RestApi": "http://speckle.arup.digital/api/v1",
      "Email": "giovanni.brogiolo@arup.com",
      "Server": "undefined",
      "StreamId": "BJktkOEEX",
      "Transmitting": false,
      "Paused": false,
      "StreamTextBoxEnabled": false,
      "NodeType": "ExtensionNode",
      "Id": "d40a868b103d47bfac7dc87bc0643d2e",
      "Inputs": [
        {
          "Id": "eef94cf09f5848fdb4bd27a1b4484609",
          "Name": "ID",
          "Description": "Stream ID",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2f82bfc393674f94aece61186c8f76d8",
          "Name": "A",
          "Description": "deac59f7-026d-40b7-8e61-a1435ee81b0a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Receives data from Speckle."
    },
    {
      "ConcreteType": "SpeckleDynamo.Streams, SpeckleDynamo",
      "RestApi": "http://speckle.arup.digital/api/v1",
      "Email": "giovanni.brogiolo@arup.com",
      "Server": "undefined",
      "StreamId": "BJktkOEEX",
      "Transmitting": false,
      "NodeType": "ExtensionNode",
      "Id": "c16b74e0575840a489a1f340efab6d38",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ea576157739a4e2d961f5fd996fb172e",
          "Name": "ID",
          "Description": "Stream ID",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Lists your existing Speckle streams for a specified account."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Replace@string,string,string",
      "Id": "f9071cc306d846e6a336c8233e076030",
      "Inputs": [
        {
          "Id": "43b808a197b8475381d362cc509ff17d",
          "Name": "str",
          "Description": "String to replace substrings in.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89267be0fb0848639eba7295b415cf41",
          "Name": "searchFor",
          "Description": "Text to be replaced.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 1,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f09550c736f146de9a7874ddb0b1321e",
          "Name": "replaceWith",
          "Description": "Text to replace with.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "736d6dcbff204ce88ab62958b48897c3",
          "Name": "str",
          "Description": "String with replacements made.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Replaces all occurrances of text in a string with other text.\n\nString.Replace (str: string, searchFor: string, replaceWith: string): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"{\";",
      "Id": "4f94d4bbdb264ee5b795e240145b5e3e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ecaf6d2cd59244f39b5e75667a7ca448",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"\";",
      "Id": "31e2e26ad7bb4025bf79a4abfa95b55e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "022b4067fec24e1598d543ce89428683",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Replace@string,string,string",
      "Id": "9c47855e6d2a4e0a965a31b8d2ee25d6",
      "Inputs": [
        {
          "Id": "9d7fa1aff8454e1d99a1de179c6ce0b8",
          "Name": "str",
          "Description": "String to replace substrings in.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d60f5af6d96449afa1ad20063186cdaa",
          "Name": "searchFor",
          "Description": "Text to be replaced.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b31922f6debf4f06b05f3d71c3c6c828",
          "Name": "replaceWith",
          "Description": "Text to replace with.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1b9f33ce4b646438db74eb640b23b2a",
          "Name": "str",
          "Description": "String with replacements made.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Replaces all occurrances of text in a string with other text.\n\nString.Replace (str: string, searchFor: string, replaceWith: string): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"}\";",
      "Id": "d430d121950b4a83aee83405bb92c893",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "64bffb5b56624501b8813ea056e669bb",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.String.Split@string,string[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "b87fcb0b4f0947c99d0b34391176f071",
      "Inputs": [
        {
          "Id": "796a711f419642a0927ec699c0af39cd",
          "Name": "str",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e07c46ef99b54021aa7e9bd3e326706c",
          "Name": "separater0",
          "Description": "Strings that, if present, determine the end and start of a split.\n\nstring[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e8340b3b2d1b48aea56f4158b5738371",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separater strings.\n\nString.Split (str: string, separaters: string[]): string[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\", \";",
      "Id": "06d4378f1ae147b899eca3db600ab8c5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "185d610ba48241eeb1a8afc4bd5b311b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import Point as Pt\r\n\r\n\r\n#Preparing input from dynamo to revit\r\nelement = UnwrapElement(IN[0])\r\npts = []\r\n\r\nfor e in element:\r\n\tsubList = []\r\n\tpts.append(subList)\r\n\tfor item in e:\r\n\t\tsubList.append(Pt.ByCoordinates\r\n\t\t(\r\n\t\tint(item[0]),\r\n\t\tint(item[1]),\r\n\t\tint(item[2])\r\n\t\t)\r\n\t\t\t)\r\n\r\nOUT = pts\r\n",
      "VariableInputPorts": true,
      "Id": "633b3ae72e044411bca225f7b4bbbc94",
      "Inputs": [
        {
          "Id": "747b0a7b3231473d8efedec6ecc5f897",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1fd8af69d9394aedac22d18a0e9b7eb5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "point1 = Autodesk.Point.ByCoordinates(0, 0, 0);",
      "Id": "e75d377d0e6d4787b77b5b51e97c755d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4cd6e8e02ccc47e2af5d52f31f5b50b2",
          "Name": "",
          "Description": "point1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "b79d69acc8a74232889b6dd7b6ef0498",
      "Inputs": [
        {
          "Id": "a34ea43b05784918a825bb995fff2e8c",
          "Name": "str",
          "Description": "String to be converted.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3ea1c6308213468da5827bf6b327c959",
          "Name": "number",
          "Description": "Integer or double-type number.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (str: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByControlPoints@Autodesk.DesignScript.Geometry.Point[],int",
      "Id": "22aa4a8bf1954a9287d562f792b87537",
      "Inputs": [
        {
          "Id": "c60f4aacf2d146928c29e215cf911e14",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f77e8f6436cf4e1f8793d86706f21dc0",
          "Name": "degree",
          "Description": "int\nDefault value : 3",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00f3cad5ea684d67bc06cfe6b327fd65",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Longest",
      "Description": "Create a BSplineCurve by using explicit control points. NOTE 1: BSplineCurves with deg=1 have G1 discontinuities, which cause problems for extrusion, sweep, and other operations. They should be avoided. Use a PolyCurve instead. NOTE 2: If the curve is periodic (closed), then the first and last points MUST be the same.\n\nNurbsCurve.ByControlPoints (points: Point[], degree: int = 3): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "3;",
      "Id": "18e64b54603649afa51c120ed195efe2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b2e929f14935487d8f17f15f78d8c25b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Lists.Manage.RemoveNulls@var[]",
      "Id": "51574b67965c4456b36e3c7418a0e236",
      "Inputs": [
        {
          "Id": "0f18f658ef844993953c103c8c0517ce",
          "Name": "Data",
          "Description": "Data with nulls\n\nvar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4936d971525f440d950ad5d2963eed9a",
          "Name": "Cleaned",
          "Description": "Cleaned data.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5674ea07012d4b0ca25e843f39a8603e",
          "Name": "Indices",
          "Description": "Index map of cleaned data.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes null items from a list\n\nManage.RemoveNulls (Data: var[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.ByPoint@Revit.Elements.FamilyType,Autodesk.DesignScript.Geometry.Point",
      "Id": "618dd4fe8cc347b894947929d8e923fa",
      "Inputs": [
        {
          "Id": "0da2c5e0642e47388e91c09c3eefc021",
          "Name": "familyType",
          "Description": "Family Type. Also called Family Symbol.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b90d4d91fed4e8b9589e817dabb3157",
          "Name": "point",
          "Description": "Point in meters.\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bdd6412decf6417eb13559b5d3279025",
          "Name": "FamilyInstance",
          "Description": "FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Place a Revit FamilyInstance given the FamilyType (also known as the FamilySymbol in the Revit API) and its coordinates in world space\n\nFamilyInstance.ByPoint (familyType: FamilyType, point: Point): FamilyInstance"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 1,
      "NodeType": "ExtensionNode",
      "Id": "0214f8d85e00458b9dde5ae221fa5de5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d0dfff304a814d4f91e873748a6f5146",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.StructuralFraming.BeamByCurve@Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType",
      "Id": "7aae579624b044779ff7c193e0bef688",
      "Inputs": [
        {
          "Id": "e0d6cfdafe934ef79abda966c3ce80b9",
          "Name": "curve",
          "Description": "The curve which defines the center line of the beam.\n\nCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f98046d07718448d8e570966868e13d7",
          "Name": "level",
          "Description": "The level with which you'd like the beam to be associated.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ff82b18411a440e7af8eb0796366a41a",
          "Name": "structuralFramingType",
          "Description": "The structural framing type representing the beam.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "13c0238b32284c928ce98972e6d7cd78",
          "Name": "StructuralFraming",
          "Description": "StructuralFraming",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a beam.\n\nStructuralFraming.BeamByCurve (curve: Curve, level: Level, structuralFramingType: FamilyType): StructuralFraming"
    },
    {
      "ConcreteType": "DSRevitNodesUI.StructuralFramingTypes, DSRevitNodesUI",
      "SelectedIndex": 0,
      "NodeType": "ExtensionNode",
      "Id": "31862cc87470403d99ad8bda8a66cf4d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "735c04d701b34c35ab3f70821f5a5888",
          "Name": "Framing Types",
          "Description": "The selected Framing Types",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a structural framing type in the active document"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 0,
      "NodeType": "ExtensionNode",
      "Id": "344a399be67544c8b2598434c3e8c51a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8e38af12e74e40c9a70a7a43a6afd047",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a[0..10];",
      "Id": "9bad36fc18f947a8820929cc38a650d4",
      "Inputs": [
        {
          "Id": "e4c0bf62f26648ff8303d910cae388f4",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e2e566240cb246bf844645b51b4743d3",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.ModelCurve.ByCurve@Autodesk.DesignScript.Geometry.Curve",
      "Id": "dc77b7d9dbed480f8382cae94323ff0d",
      "Inputs": [
        {
          "Id": "22e64f3eaac143dc8f36b3f4adecaa61",
          "Name": "curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1285638057c44ad980d587f40d5f2bd",
          "Name": "ModelCurve",
          "Description": "ModelCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct a Revit ModelCurve element from a Curve\n\nModelCurve.ByCurve (curve: Curve): ModelCurve"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e62",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e64",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e66",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e68",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e6a",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e6c",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e6e",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e70",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e72",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e74",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e76",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002e78",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ec2",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ec4",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ec6",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ec8",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ecc",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ece",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ed0",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ed2",
        "d35f09ef-0fc5-4c25-a317-f89a1fd751a4-00002ed4"
      ],
      "Id": "95f8673a8c114fd28255f1cdd8cbb7b8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5b86deae8b584b599b7ac5dd890682e5",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Curves",
      "Id": "9600f09c73fc47d5b48d9ffc0e8711aa",
      "Inputs": [
        {
          "Id": "631fb216766d4f7fabe6b0bb6b6462ad",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8596a6bdb95f4ad48a2f8572afce89d4",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The Curves in this Element\n\nElement.Curves: Curve[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.AdaptiveComponent.ByPoints@Autodesk.DesignScript.Geometry.Point[][],Revit.Elements.FamilyType",
      "Id": "11a38e17a5b041c9a85a29047fbe0284",
      "Inputs": [
        {
          "Id": "a7e73c60776e4bf492f8287484e6a46f",
          "Name": "points",
          "Description": "a two-dimensional array of points\n\nPoint[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ab0dc133ea141a0bf9f6fa099139e89",
          "Name": "familyType",
          "Description": "a family type to use to create the adaptive components\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0150d63d141c4aa59ce157d9c513c986",
          "Name": "AdaptiveComponent[]..[]",
          "Description": "AdaptiveComponent[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a list of adaptive components from two-dimensional array of points\n\nAdaptiveComponent.ByPoints (points: Point[][], familyType: FamilyType): AdaptiveComponent[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],int",
      "Id": "a94aade5240b48a0b247ec77f8952d6d",
      "Inputs": [
        {
          "Id": "a6df2106afc4421c8cefb9eb9428654f",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8ff506a9d9c042c09677150cadf1fa0f",
          "Name": "degree",
          "Description": "int\nDefault value : 3",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "da4f698ca75e45e78ed9f139cc744be7",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a BSplineCurve by interpolating between points.\n\nNurbsCurve.ByPoints (points: Point[], degree: int = 3): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "3388170ecd0e410b91308e965db07989",
      "Inputs": [
        {
          "Id": "134558dad124498dbc0b9e4a7656db39",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "090f05e6672541a69b402ffef4b11b02",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1da3db01bbd14ec39dfd6062ffeaade9",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[a[0]];",
      "Id": "93428e3b8ad34661a4acaa5aae7de479",
      "Inputs": [
        {
          "Id": "53cd4e510d2d47d9b678b97258526418",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "655299d743634532b625c0fddcabc7c6",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "df72ae0d42d54bbcb347303c0da3ab6c",
      "Inputs": [
        {
          "Id": "e32a17e3e517416b86af3770f13875eb",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b25d2752ffa24627b3fb6e5bc0c2b5ee",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Longest",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "a==6;",
      "Id": "e6bcef84131d4f15838410700a8c4446",
      "Inputs": [
        {
          "Id": "86e457298f9a4da3ba5b9adbea74d928",
          "Name": "a",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c5975c46e751462fb239eecbc70c0252",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "5ae20e7c42df4040ac7a6590d4f13eca",
      "Inputs": [
        {
          "Id": "2338cd8e05634acab7149f22bd6d4476",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6e1cf14c52c94351bdb1a1782dbe3459",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "19d365f4e4434b33957347a714b1a61b",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "34e526ea754541d1b7051c8bb0cb5ab9",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    }
  ],
  "Connectors": [
    {
      "Start": "2f82bfc393674f94aece61186c8f76d8",
      "End": "43b808a197b8475381d362cc509ff17d",
      "Id": "bc8bf4c4daad41de925c67b7c2aecc15"
    },
    {
      "Start": "ea576157739a4e2d961f5fd996fb172e",
      "End": "eef94cf09f5848fdb4bd27a1b4484609",
      "Id": "dd1918a5293c41cabfa08d0a282ed7a4"
    },
    {
      "Start": "736d6dcbff204ce88ab62958b48897c3",
      "End": "9d7fa1aff8454e1d99a1de179c6ce0b8",
      "Id": "448d3192dc234de385665eea70994167"
    },
    {
      "Start": "ecaf6d2cd59244f39b5e75667a7ca448",
      "End": "89267be0fb0848639eba7295b415cf41",
      "Id": "ace72622d391468a95d4d7d5a7d0fc6e"
    },
    {
      "Start": "022b4067fec24e1598d543ce89428683",
      "End": "f09550c736f146de9a7874ddb0b1321e",
      "Id": "3ad5a5c3c5c7491e9fe058c03a04ee44"
    },
    {
      "Start": "022b4067fec24e1598d543ce89428683",
      "End": "b31922f6debf4f06b05f3d71c3c6c828",
      "Id": "88c26d81714c439ba96c92fb6988ee2d"
    },
    {
      "Start": "a1b9f33ce4b646438db74eb640b23b2a",
      "End": "796a711f419642a0927ec699c0af39cd",
      "Id": "41480f518d4948dea56f45f4f64eeb08"
    },
    {
      "Start": "64bffb5b56624501b8813ea056e669bb",
      "End": "d60f5af6d96449afa1ad20063186cdaa",
      "Id": "458c1b2a436742428c307eb1821b25c6"
    },
    {
      "Start": "e8340b3b2d1b48aea56f4158b5738371",
      "End": "a34ea43b05784918a825bb995fff2e8c",
      "Id": "a433d2cbb1b647dc9fc064c199081d79"
    },
    {
      "Start": "185d610ba48241eeb1a8afc4bd5b311b",
      "End": "e07c46ef99b54021aa7e9bd3e326706c",
      "Id": "0769ecf277f04bd5a80519e50775ec81"
    },
    {
      "Start": "1fd8af69d9394aedac22d18a0e9b7eb5",
      "End": "c60f4aacf2d146928c29e215cf911e14",
      "Id": "d22dc1544814458fb1f33c99867590d3"
    },
    {
      "Start": "1fd8af69d9394aedac22d18a0e9b7eb5",
      "End": "a6df2106afc4421c8cefb9eb9428654f",
      "Id": "a968396df6cf473ea1da3b3c61107ef6"
    },
    {
      "Start": "1fd8af69d9394aedac22d18a0e9b7eb5",
      "End": "53cd4e510d2d47d9b678b97258526418",
      "Id": "75449e92aeb7448788a3acab5fe455bd"
    },
    {
      "Start": "1fd8af69d9394aedac22d18a0e9b7eb5",
      "End": "e32a17e3e517416b86af3770f13875eb",
      "Id": "85f6efac3afa46d89a6848e58ead7b6c"
    },
    {
      "Start": "1fd8af69d9394aedac22d18a0e9b7eb5",
      "End": "2338cd8e05634acab7149f22bd6d4476",
      "Id": "ac957bfbb97b48109a603c8d2a2ef719"
    },
    {
      "Start": "3ea1c6308213468da5827bf6b327c959",
      "End": "747b0a7b3231473d8efedec6ecc5f897",
      "Id": "fbe993a9c0644e4da300e691c4961ae1"
    },
    {
      "Start": "b2e929f14935487d8f17f15f78d8c25b",
      "End": "f77e8f6436cf4e1f8793d86706f21dc0",
      "Id": "a82ba85434df49d99fd226fb8ba9a97b"
    },
    {
      "Start": "b2e929f14935487d8f17f15f78d8c25b",
      "End": "8ff506a9d9c042c09677150cadf1fa0f",
      "Id": "23865567fb0548099ed6fee94c13d613"
    },
    {
      "Start": "d0dfff304a814d4f91e873748a6f5146",
      "End": "1ab0dc133ea141a0bf9f6fa099139e89",
      "Id": "d5c5c06137084b1ea062faf961b10eac"
    },
    {
      "Start": "735c04d701b34c35ab3f70821f5a5888",
      "End": "ff82b18411a440e7af8eb0796366a41a",
      "Id": "988748ac511a47d8b1f079e1ffa97dac"
    },
    {
      "Start": "8e38af12e74e40c9a70a7a43a6afd047",
      "End": "f98046d07718448d8e570966868e13d7",
      "Id": "d60a120504da42f787ec091b1162a804"
    },
    {
      "Start": "c1285638057c44ad980d587f40d5f2bd",
      "End": "631fb216766d4f7fabe6b0bb6b6462ad",
      "Id": "1d01365e467a4dbc9b73b96535bc629e"
    },
    {
      "Start": "8596a6bdb95f4ad48a2f8572afce89d4",
      "End": "134558dad124498dbc0b9e4a7656db39",
      "Id": "bab9913f2270424aa902b57c44190ea4"
    },
    {
      "Start": "da4f698ca75e45e78ed9f139cc744be7",
      "End": "22e64f3eaac143dc8f36b3f4adecaa61",
      "Id": "b8595c81408040d8b7b84293f5942e84"
    },
    {
      "Start": "1da3db01bbd14ec39dfd6062ffeaade9",
      "End": "e0d6cfdafe934ef79abda966c3ce80b9",
      "Id": "2c3707885b3747bf9402e4f02059676e"
    },
    {
      "Start": "b25d2752ffa24627b3fb6e5bc0c2b5ee",
      "End": "86e457298f9a4da3ba5b9adbea74d928",
      "Id": "e0ccd59eb7ec48da8b4b585cd1038097"
    },
    {
      "Start": "c5975c46e751462fb239eecbc70c0252",
      "End": "6e1cf14c52c94351bdb1a1782dbe3459",
      "Id": "ee2a82d1f3a44fd8a038d5a32ec4015e"
    },
    {
      "Start": "19d365f4e4434b33957347a714b1a61b",
      "End": "a7e73c60776e4bf492f8287484e6a46f",
      "Id": "f706d1b1b9c44ead9fb5169056caab6e"
    }
  ],
  "Dependencies": [],
  "Bindings": [
    {
      "NodeId": "7aae5796-24b0-4477-9ff7-c193e0bef688",
      "Binding": {
        "BeamByCurve_InClassDecl-1_InFunctionScope-1_Instance0_7aae5796-24b0-4477-9ff7-c193e0bef688": ""
      }
    },
    {
      "NodeId": "dc77b7d9-dbed-480f-8382-cae94323ff0d",
      "Binding": {
        "ByCurve_InClassDecl-1_InFunctionScope-1_Instance0_dc77b7d9-dbed-480f-8382-cae94323ff0d": ""
      }
    },
    {
      "NodeId": "11a38e17-a5b0-41c9-a85a-29047fbe0284",
      "Binding": {
        "ByPoints_InClassDecl-1_InFunctionScope-1_Instance0_11a38e17-a5b0-41c9-a85a-29047fbe0284": "PFNPQVAtRU5WOkVudmVsb3BlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOlNPQVAtRU5DPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyIgeG1sbnM6U09BUC1FTlY9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIiB4bWxuczpjbHI9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vc29hcC9lbmNvZGluZy9jbHIvMS4wIiBTT0FQLUVOVjplbmNvZGluZ1N0eWxlPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyI+DQo8U09BUC1FTlY6Qm9keT4NCjxhMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXIgaWQ9InJlZi0xIiB4bWxuczphMT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9jbHIvbnNhc3NlbS9Qcm90b0NvcmUvUHJvdG9Db3JlJTJDJTIwVmVyc2lvbiUzRDIuMC4xLjQ5NTUlMkMlMjBDdWx0dXJlJTNEbmV1dHJhbCUyQyUyMFB1YmxpY0tleVRva2VuJTNEbnVsbCI+DQo8TnVtYmVyT2ZFbGVtZW50cz4xPC9OdW1iZXJPZkVsZW1lbnRzPg0KPEJhc2UtMF9IYXNEYXRhPnRydWU8L0Jhc2UtMF9IYXNEYXRhPg0KPEJhc2UtMF9EYXRhIGlkPSJyZWYtMyI+UEZOUFFWQXRSVTVXT2tWdWRtVnNiM0JsSUhodGJHNXpPbmh6YVQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0V0YVc1emRHRnVZMlVpSUhodGJHNXpPbmh6WkQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0VpSUhodGJHNXpPbE5QUVZBdFJVNURQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SWdlRzFzYm5NNlUwOUJVQzFGVGxZOUltaDBkSEE2THk5elkyaGxiV0Z6TG5odGJITnZZWEF1YjNKbkwzTnZZWEF2Wlc1MlpXeHZjR1V2SWlCNGJXeHVjenBqYkhJOUltaDBkSEE2THk5elkyaGxiV0Z6TG0xcFkzSnZjMjltZEM1amIyMHZjMjloY0M5bGJtTnZaR2x1Wnk5amJISXZNUzR3SWlCVFQwRlFMVVZPVmpwbGJtTnZaR2x1WjFOMGVXeGxQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SStEUW84VTA5QlVDMUZUbFk2UW05a2VUNE5DanhoTVRwTmRXeDBhWEJzWlZObGNtbGhiR2w2WVdKc1pVbGtJR2xrUFNKeVpXWXRNU0lnZUcxc2JuTTZZVEU5SW1oMGRIQTZMeTl6WTJobGJXRnpMbTFwWTNKdmMyOW1kQzVqYjIwdlkyeHlMMjV6WVhOelpXMHZVbVYyYVhSVFpYSjJhV05sY3k1UVpYSnphWE4wWlc1alpTOVNaWFpwZEZObGNuWnBZMlZ6SlRKREpUSXdWbVZ5YzJsdmJpVXpSREl1TUM0eExqUTVOVFlsTWtNbE1qQkRkV3gwZFhKbEpUTkVibVYxZEhKaGJDVXlReVV5TUZCMVlteHBZMHRsZVZSdmEyVnVKVE5FYm5Wc2JDSStEUW84Ym5WdFltVnlUMlpGYkdWdFpXNTBjejQ1UEM5dWRXMWlaWEpQWmtWc1pXMWxiblJ6UGcwS1BITjBjbWx1WjBsRUxUQWdhV1E5SW5KbFppMHpJajVrTXpWbU1EbGxaaTB3Wm1NMUxUUmpNalV0WVRNeE55MW1PRGxoTVdaa056VXhZVFF0TURBd01ETmpZV0k4TDNOMGNtbHVaMGxFTFRBK0RRbzhhVzUwU1VRdE1ENHhOVFV6TVR3dmFXNTBTVVF0TUQ0TkNqeHpkSEpwYm1kSlJDMHhJR2xrUFNKeVpXWXROQ0krWkRNMVpqQTVaV1l0TUdaak5TMDBZekkxTFdFek1UY3Raamc1WVRGbVpEYzFNV0UwTFRBd01EQXpZMkl6UEM5emRISnBibWRKUkMweFBnMEtQR2x1ZEVsRUxURStNVFUxTXprOEwybHVkRWxFTFRFK0RRbzhjM1J5YVc1blNVUXRNaUJwWkQwaWNtVm1MVFVpUG1Rek5XWXdPV1ZtTFRCbVl6VXROR015TlMxaE16RTNMV1k0T1dFeFptUTNOVEZoTkMwd01EQXdNMk5pWXp3dmMzUnlhVzVuU1VRdE1qNE5DanhwYm5SSlJDMHlQakUxTlRRNFBDOXBiblJKUkMweVBnMEtQSE4wY21sdVowbEVMVE1nYVdROUluSmxaaTAySWo1a016Vm1NRGxsWmkwd1ptTTFMVFJqTWpVdFlUTXhOeTFtT0RsaE1XWmtOelV4WVRRdE1EQXdNRE5qWXpVOEwzTjBjbWx1WjBsRUxUTStEUW84YVc1MFNVUXRNejR4TlRVMU56d3ZhVzUwU1VRdE16NE5Danh6ZEhKcGJtZEpSQzAwSUdsa1BTSnlaV1l0TnlJK1pETTFaakE1WldZdE1HWmpOUzAwWXpJMUxXRXpNVGN0WmpnNVlURm1aRGMxTVdFMExUQXdNREF6WTJObFBDOXpkSEpwYm1kSlJDMDBQZzBLUEdsdWRFbEVMVFErTVRVMU5qWThMMmx1ZEVsRUxUUStEUW84YzNSeWFXNW5TVVF0TlNCcFpEMGljbVZtTFRnaVBtUXpOV1l3T1dWbUxUQm1ZelV0TkdNeU5TMWhNekUzTFdZNE9XRXhabVEzTlRGaE5DMHdNREF3TTJOa056d3ZjM1J5YVc1blNVUXROVDROQ2p4cGJuUkpSQzAxUGpFMU5UYzFQQzlwYm5SSlJDMDFQZzBLUEhOMGNtbHVaMGxFTFRZZ2FXUTlJbkpsWmkwNUlqNWtNelZtTURsbFppMHdabU0xTFRSak1qVXRZVE14TnkxbU9EbGhNV1prTnpVeFlUUXRNREF3TUROalpUQThMM04wY21sdVowbEVMVFkrRFFvOGFXNTBTVVF0Tmo0eE5UVTRORHd2YVc1MFNVUXROajROQ2p4emRISnBibWRKUkMwM0lHbGtQU0p5WldZdE1UQWlQbVF6TldZd09XVm1MVEJtWXpVdE5HTXlOUzFoTXpFM0xXWTRPV0V4Wm1RM05URmhOQzB3TURBd00yTmxPVHd2YzNSeWFXNW5TVVF0Tno0TkNqeHBiblJKUkMwM1BqRTFOVGt6UEM5cGJuUkpSQzAzUGcwS1BITjBjbWx1WjBsRUxUZ2dhV1E5SW5KbFppMHhNU0krWkRNMVpqQTVaV1l0TUdaak5TMDBZekkxTFdFek1UY3Raamc1WVRGbVpEYzFNV0UwTFRBd01EQXpZMll5UEM5emRISnBibWRKUkMwNFBnMEtQR2x1ZEVsRUxUZytNVFUyTURJOEwybHVkRWxFTFRnK0RRbzhMMkV4T2sxMWJIUnBjR3hsVTJWeWFXRnNhWHBoWW14bFNXUStEUW84TDFOUFFWQXRSVTVXT2tKdlpIaytEUW84TDFOUFFWQXRSVTVXT2tWdWRtVnNiM0JsUGcwSzwvQmFzZS0wX0RhdGE+DQo8QmFzZS0wX0hhc05lc3RlZERhdGE+ZmFsc2U8L0Jhc2UtMF9IYXNOZXN0ZWREYXRhPg0KPC9hMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXI+DQo8L1NPQVAtRU5WOkJvZHk+DQo8L1NPQVAtRU5WOkVudmVsb3BlPg0K"
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.1.4955",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Anonymous Stream",
        "Id": "d40a868b103d47bfac7dc87bc0643d2e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 624.94510385756666,
        "Y": 427.73887240356089
      },
      {
        "ShowGeometry": true,
        "Name": "Speckle Streams",
        "Id": "c16b74e0575840a489a1f340efab6d38",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 309.5,
        "Y": 431.0
      },
      {
        "ShowGeometry": true,
        "Name": "String.Replace",
        "Id": "f9071cc306d846e6a336c8233e076030",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1412.4604085654396,
        "Y": 422.025192585426
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4f94d4bbdb264ee5b795e240145b5e3e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 993.0,
        "Y": 509.0
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "31e2e26ad7bb4025bf79a4abfa95b55e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1143.0,
        "Y": 535.0
      },
      {
        "ShowGeometry": true,
        "Name": "String.Replace",
        "Id": "9c47855e6d2a4e0a965a31b8d2ee25d6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1885.1214523880526,
        "Y": 416.41574014059762
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d430d121950b4a83aee83405bb92c893",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1668.0,
        "Y": 475.0
      },
      {
        "ShowGeometry": true,
        "Name": "String.Split",
        "Id": "b87fcb0b4f0947c99d0b34391176f071",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2288.4874138748983,
        "Y": 532.165017185828
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "06d4378f1ae147b899eca3db600ab8c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2131.0,
        "Y": 585.0
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "633b3ae72e044411bca225f7b4bbbc94",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2638.6777966016771,
        "Y": 588.05544714155326
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e75d377d0e6d4787b77b5b51e97c755d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2495.26002991092,
        "Y": 338.67137649156911
      },
      {
        "ShowGeometry": true,
        "Name": "String.ToNumber",
        "Id": "b79d69acc8a74232889b6dd7b6ef0498",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2594.8523449741415,
        "Y": 653.57279173908842
      },
      {
        "ShowGeometry": true,
        "Name": "NurbsCurve.ByControlPoints",
        "Id": "22aa4a8bf1954a9287d562f792b87537",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3469.1255849968629,
        "Y": 720.23174502227789
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "18e64b54603649afa51c120ed195efe2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3181.0,
        "Y": 600.0
      },
      {
        "ShowGeometry": true,
        "Name": "Manage.RemoveNulls",
        "Id": "51574b67965c4456b36e3c7418a0e236",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3678.5168440988709,
        "Y": 535.32168281348686
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.ByPoint",
        "Id": "618dd4fe8cc347b894947929d8e923fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3784.409485365552,
        "Y": 302.33459128033348
      },
      {
        "ShowGeometry": true,
        "Name": "Family Types",
        "Id": "0214f8d85e00458b9dde5ae221fa5de5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3064.6633799170831,
        "Y": 440.15463127616749
      },
      {
        "ShowGeometry": true,
        "Name": "StructuralFraming.BeamByCurve",
        "Id": "7aae579624b044779ff7c193e0bef688",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4657.3765920582891,
        "Y": 124.65063912936279
      },
      {
        "ShowGeometry": true,
        "Name": "Structural Framing Types",
        "Id": "31862cc87470403d99ad8bda8a66cf4d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4492.0183038282221,
        "Y": 246.63298144435828
      },
      {
        "ShowGeometry": true,
        "Name": "Levels",
        "Id": "344a399be67544c8b2598434c3e8c51a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4257.8127868464726,
        "Y": 141.299381316608
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9bad36fc18f947a8820929cc38a650d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4031.6488417980804,
        "Y": 221.86680043981352
      },
      {
        "ShowGeometry": true,
        "Name": "ModelCurve.ByCurve",
        "Id": "dc77b7d9dbed480f8382cae94323ff0d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4175.7931129785,
        "Y": 614.31778541222548
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Elements",
        "Id": "95f8673a8c114fd28255f1cdd8cbb7b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3622.3286502899318,
        "Y": -114.37055358004216
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Curves",
        "Id": "9600f09c73fc47d5b48d9ffc0e8711aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3956.8116803138614,
        "Y": -229.53840651619544
      },
      {
        "ShowGeometry": true,
        "Name": "AdaptiveComponent.ByPoints",
        "Id": "11a38e17a5b041c9a85a29047fbe0284",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3453.9217845888497,
        "Y": 366.27681293207621
      },
      {
        "ShowGeometry": true,
        "Name": "NurbsCurve.ByPoints",
        "Id": "a94aade5240b48a0b247ec77f8952d6d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3080.1443551052421,
        "Y": 30.48990545255873
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "3388170ecd0e410b91308e965db07989",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4307.46236031647,
        "Y": 72.8948363636924
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "93428e3b8ad34661a4acaa5aae7de479",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3164.0,
        "Y": 265.0
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "df72ae0d42d54bbcb347303c0da3ab6c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2827.2594402435243,
        "Y": 650.70715928959225
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e6bcef84131d4f15838410700a8c4446",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2994.1083955145127,
        "Y": 762.44802409450585
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "5ae20e7c42df4040ac7a6590d4f13eca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3145.069311435645,
        "Y": 724.04789879546684
      }
    ],
    "Annotations": [],
    "X": -2143.9872781049153,
    "Y": 380.49238584729721,
    "Zoom": 0.67515289977012272
  }
}