{
  "Uuid": "db0e271f-f39b-4370-a461-e126e1f4579b",
  "IsCustomNode": false,
  "Description": null,
  "Name": "viewTypes",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\n#clr.AddReference('System')\r\n#from System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n#Preparing input from dynamo to revit\r\nsourceDoc = UnwrapElement(IN[0])\r\n\r\n#Do some action in a Transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n#   target document is the active document\r\ntargetDoc = doc\r\n    \r\n#    // element ids for all instances of the ViewFamilyType class\r\nviewFamilyTypeIds = FilteredElementCollector(sourceDoc).OfClass(ViewFamilyType).ToElementIds();\r\n\r\n\r\n#    // element ids of the view templates used in View Types\r\ntemplateIds = []\r\n\r\n#    // list of pairs of strings - first item in each pair will be the name of the View Type - second item will be the name of the View Template used by that View Type \r\nssList = []\r\n\r\n\r\n\r\nfor vft in FilteredElementCollector(sourceDoc).OfClass(ViewFamilyType):\r\n\t# element id of the view template used in this View Type\r\n\tdefaultTemplateId = vft.get_Parameter(BuiltInParameter.DEFAULT_VIEW_TEMPLATE).AsElementId();\r\n    #go to the next View Type if there is no View Template assigned to this view type\r\n\tif (defaultTemplateId == ElementId.InvalidElementId):\r\n\t\tcontinue\r\n        templateIds.append(defaultTemplateId);\r\n        ssList.append(vft.ToDSType(True).Name)\r\n        #, sourceDoc.GetElement(defaultTemplateId).Name]);\r\n    \r\n\"\"\"\r\n    CopyPasteOptions options = new CopyPasteOptions();\r\n\r\n    using (Transaction t = new Transaction(targetDoc, \"Copy View Types\"))\r\n    {\r\n        t.Start();\r\n        // copy the view templates\r\n        ElementTransformUtils.CopyElements(sourceDoc, templateIds, targetDoc, Transform.Identity, options);\r\n        // copy the view types\r\n        ElementTransformUtils.CopyElements(sourceDoc, viewFamilyTypeIds, targetDoc, Transform.Identity, options);\r\n\r\n        foreach (Tuple<string, string> tup in ssList)\r\n        {\r\n            Element vft = new FilteredElementCollector(targetDoc).OfClass(typeof(ViewFamilyType)).Where(q => q.Name == tup.Item1).FirstOrDefault();\r\n\r\n            View template = new FilteredElementCollector(targetDoc).OfClass(typeof(View)).Cast<View>().Where(q => q.IsTemplate && q.Name == tup.Item2).FirstOrDefault();\r\n\r\n            // assign the view template to the view type\r\n            vft.get_Parameter(BuiltInParameter.DEFAULT_VIEW_TEMPLATE).Set(template.Id);\r\n        }\r\n\r\n        t.Commit();\r\n    }\r\n    \"\"\"\r\n\r\nOUT = ssList\r\n",
      "VariableInputPorts": true,
      "Id": "d2d320c590474e66bddb291ed8c65843",
      "Inputs": [
        {
          "Id": "199187b8228b4d00b1f885eb49b1c90f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ebf8b6d50c94ad1b0bb36e2b323e727",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Rhythm.Revit.Application.Application.OpenDocumentFile@string,bool,bool",
      "Id": "f0071b316e8041d6ae44ba93e483a886",
      "Inputs": [
        {
          "Id": "923c2d1a16ca40aebab399047d9aeb70",
          "Name": "filePath",
          "Description": "The file to obtain document from.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c4098542b1634f499abbda2f29e8f811",
          "Name": "audit",
          "Description": "Choose whether or not to audit the file upon opening. (Will run slower with this)\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "02a29964e8de4d2288ad132c23f82306",
          "Name": "detachFromCentral",
          "Description": "Choose whether or not to detach from central upon opening. Only for RVT files.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "014b2ecec5ea4eb3bd7b570fe584c526",
          "Name": "Document",
          "Description": "The document.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "This node will open the given file in the background.\n\nApplication.OpenDocumentFile (filePath: string, audit: bool = false, detachFromCentral: bool = false): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Filename, CoreNodeModels",
      "HintPath": "C:\\Users\\giovanni.brogiolo\\Desktop\\Arup UKMEA Struc Template - 2017 Metric.rte",
      "InputValue": "C:\\Users\\giovanni.brogiolo\\Desktop\\Arup UKMEA Struc Template - 2017 Metric.rte",
      "NodeType": "ExtensionNode",
      "Id": "d9c98aa469d94810929ff87edbcfb8fe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "088e101a5a7a40a0805698c24d1f3432",
          "Name": "",
          "Description": "Filename",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a file on the system to get its filename"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 587,
      "NodeType": "ExtensionNode",
      "Id": "9514ca3feac74dbcae59518f0c51f153",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "09d2600e76ab4b7ab152fbfe4b8e813d",
          "Name": "Category",
          "Description": "The selected Category.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All built-in categories."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "63884b7d4d034e1391c5bc0958bcc269",
      "Inputs": [
        {
          "Id": "9653d29546f0445a833c0b7929a591d4",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "66d9cb857f3a4500b6ef0571e99c93d2",
          "Name": "Elements",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "56c5ec31d0a54d3aa8d14d405e32b689",
      "Inputs": [
        {
          "Id": "28a6b8c74fa5459cbd2f70ee327bfcb6",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "97dbe58d8fed4b6c8173d90c94f256f9",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Name of the Element\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "36c775c508e542939d6fd5c209971084",
      "Inputs": [
        {
          "Id": "81759a430eb84275bac63a6fef3a4637",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3d1a48a45d3542fbaad2e8f27a86623e",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Name of the Element\n\nElement.Name: string"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n#Preparing input from dynamo to revit\r\nsourceDoc = UnwrapElement(IN[0])\r\n\r\n#Do some action in a Transaction\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n#   target document is the active document\r\ntargetDoc = doc\r\n    \r\n#    // element ids for all instances of the ViewFamilyType class\r\nviewFamilyTypeIds = FilteredElementCollector(sourceDoc).OfClass(ViewFamilyType).ToElementIds();\r\n\r\n\r\n#    // element ids of the view templates used in View Types\r\ntemplateIds = []\r\n\r\n#    // list of pairs of strings - first item in each pair will be the name of the View Type - second item will be the name of the View Template used by that View Type \r\nssList = []\r\n\r\n\r\n\r\nfor vft in FilteredElementCollector(sourceDoc).OfClass(ViewFamilyType):\r\n\t# element id of the view template used in this View Type\r\n\tdefaultTemplateId = vft.get_Parameter(BuiltInParameter.DEFAULT_VIEW_TEMPLATE).AsElementId();\r\n    #go to the next View Type if there is no View Template assigned to this view type\r\n\tif (defaultTemplateId == ElementId.InvalidElementId):\r\n\t\tcontinue\r\n        templateIds.append(defaultTemplateId);\r\n        ssList.append([vft])\r\n        #, sourceDoc.GetElement(defaultTemplateId).Name]);\r\n    \r\n\"\"\"\r\n    CopyPasteOptions options = new CopyPasteOptions();\r\n\r\n    using (Transaction t = new Transaction(targetDoc, \"Copy View Types\"))\r\n    {\r\n        t.Start();\r\n        // copy the view templates\r\n        ElementTransformUtils.CopyElements(sourceDoc, templateIds, targetDoc, Transform.Identity, options);\r\n        // copy the view types\r\n        ElementTransformUtils.CopyElements(sourceDoc, viewFamilyTypeIds, targetDoc, Transform.Identity, options);\r\n\r\n        foreach (Tuple<string, string> tup in ssList)\r\n        {\r\n            Element vft = new FilteredElementCollector(targetDoc).OfClass(typeof(ViewFamilyType)).Where(q => q.Name == tup.Item1).FirstOrDefault();\r\n\r\n            View template = new FilteredElementCollector(targetDoc).OfClass(typeof(View)).Cast<View>().Where(q => q.IsTemplate && q.Name == tup.Item2).FirstOrDefault();\r\n\r\n            // assign the view template to the view type\r\n            vft.get_Parameter(BuiltInParameter.DEFAULT_VIEW_TEMPLATE).Set(template.Id);\r\n        }\r\n\r\n        t.Commit();\r\n    }\r\n    \"\"\"\r\n\r\nOUT = ssList[0][0]\r\n",
      "VariableInputPorts": true,
      "Id": "1a133782be6c43d189f3fdcb4690074b",
      "Inputs": [
        {
          "Id": "4c0b9ac1c423460eb89e1734d8ed2e7d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "66fcb4f898ca4d0d9240f6e3d8a3a77c",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "879451ea-d61b-4ff2-bed0-b3020778e187",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "f09b3f8755fb4bd69d6c6b60adfa909f",
      "Inputs": [
        {
          "Id": "c17d45dbf76f410d8a8e68c5a6d4de2d",
          "Name": "Elements",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "51435b0023fb4e93bb4eebef1df6f276",
          "Name": "Name(s)",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Modified for 0.8.1"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nfaminsts = IN[0]\r\nelementlist = list()\r\n\r\n\r\nfor item in faminsts:\r\n\ttry:\r\n\t\tn = UnwrapElement(item).Name\r\n\texcept:\r\n\t\tn = None\r\n\t# Use a built-in property of (wrapped) Dynamo elements for family symbols instead\r\n\tif n == None:\r\n\t\ttry:\r\n\t\t\tn = item.Name\r\n\t\texcept:\r\n\t\t\tn = []\r\n\telementlist.append(n)\r\n\r\nOUT = elementlist",
      "VariableInputPorts": true,
      "Id": "930cc45e461b4e0dad27b4fbef33dc9b",
      "Inputs": [
        {
          "Id": "f942c6082c7b427f85264608733f7f6c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "460c9cb204304ac29f39397ed7f1cb82",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "6ebf8b6d50c94ad1b0bb36e2b323e727",
      "End": "f942c6082c7b427f85264608733f7f6c",
      "Id": "60abb36fc4d847898e6a35566b8841d9"
    },
    {
      "Start": "014b2ecec5ea4eb3bd7b570fe584c526",
      "End": "199187b8228b4d00b1f885eb49b1c90f",
      "Id": "2cd3e32b4e6b4e7a9786610843d26a86"
    },
    {
      "Start": "014b2ecec5ea4eb3bd7b570fe584c526",
      "End": "4c0b9ac1c423460eb89e1734d8ed2e7d",
      "Id": "6b03aad7aecc419bb5027fb636f41418"
    },
    {
      "Start": "088e101a5a7a40a0805698c24d1f3432",
      "End": "923c2d1a16ca40aebab399047d9aeb70",
      "Id": "9ffe32e4db474da2904ea407e6718925"
    },
    {
      "Start": "09d2600e76ab4b7ab152fbfe4b8e813d",
      "End": "9653d29546f0445a833c0b7929a591d4",
      "Id": "2e08aa77e3014d3aab7f571ab7401482"
    },
    {
      "Start": "66d9cb857f3a4500b6ef0571e99c93d2",
      "End": "28a6b8c74fa5459cbd2f70ee327bfcb6",
      "Id": "0c9a4c8d2d824bc9a48824c652d66912"
    },
    {
      "Start": "66fcb4f898ca4d0d9240f6e3d8a3a77c",
      "End": "c17d45dbf76f410d8a8e68c5a6d4de2d",
      "Id": "2f176978ded54d8287bbef8de9c4a2cd"
    }
  ],
  "Dependencies": [
    "879451ea-d61b-4ff2-bed0-b3020778e187"
  ],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.1.4955",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "d2d320c590474e66bddb291ed8c65843",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 888.0,
        "Y": 256.0
      },
      {
        "ShowGeometry": true,
        "Name": "Application.OpenDocumentFile",
        "Id": "f0071b316e8041d6ae44ba93e483a886",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 395.0,
        "Y": 150.0
      },
      {
        "ShowGeometry": true,
        "Name": "File Path",
        "Id": "d9c98aa469d94810929ff87edbcfb8fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -177.0,
        "Y": 119.0
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "9514ca3feac74dbcae59518f0c51f153",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 234.0,
        "Y": 520.0
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "63884b7d4d034e1391c5bc0958bcc269",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 496.0,
        "Y": 527.0
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "56c5ec31d0a54d3aa8d14d405e32b689",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 962.0,
        "Y": 535.0
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "36c775c508e542939d6fd5c209971084",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1154.0,
        "Y": 216.0
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1a133782be6c43d189f3fdcb4690074b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 916.0,
        "Y": 36.0
      },
      {
        "ShowGeometry": true,
        "Name": "Element Name Universal",
        "Id": "f09b3f8755fb4bd69d6c6b60adfa909f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1161.5,
        "Y": 96.0
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "930cc45e461b4e0dad27b4fbef33dc9b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1167.6405028745151,
        "Y": 388.28450062754496
      }
    ],
    "Annotations": [],
    "X": 0.0,
    "Y": 0.0,
    "Zoom": 1.0
  }
}