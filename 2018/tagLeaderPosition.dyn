<Workspace Version="1.3.1.1736" X="-949.4254740881" Y="171.647156752556" zoom="0.663391956006525" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="57c2aa33-2803-4130-acf2-78fb52aacfd4" type="PythonNodeModels.PythonNode" nickname="Python Script" x="1967.60185323705" y="205.077058599059" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.


def toRvtPoint(point):
	return point.ToXyz()

def toRvtId(_id):
	if isinstance(_id, int) or isinstance(_id, str):
		id = ElementId(int(_id))
		return id
	elif isinstance(_id, ElementId):
		return _id

def GetUVPoint(pt):
	if type(pt) == Autodesk.DesignScript.Geometry.Point:
		return Autodesk.Revit.DB.UV(pt.X, pt.Y)
	elif type(pt) == Autodesk.DesignScript.Geometry.UV:
		return Autodesk.Revit.DB.UV(pt.U, pt.V)

def CreateSpaceTag(space, uv, view):
	doc = DocumentManager.Instance.CurrentDBDocument
	return doc.Create.NewSpaceTag(space, uv, view)


tag = UnwrapElement(IN[0])

#leaderElbow = tag.LeaderElbow
#leaderEnd = tag.LeaderEnd
#newLeaderElbow = tag.LeaderElbow

#leaderX = tag.LeaderElbow[0]

changed = []
unchanged = []

TransactionManager.Instance.EnsureInTransaction(doc)

for item in tag:
	if item.LeaderElbow[0] != item.LeaderEnd[0]:
		item.LeaderElbow = XYZ(item.LeaderEnd[0], item.LeaderElbow[1], item.LeaderElbow[2])
		changed.append(item)
	else:
		unchanged.append(item)
	
TransactionManager.Instance.TransactionTaskDone()

OUT = [changed,unchanged]
</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Nodes.DSModelElementSelection guid="bab5a2e9-68e9-43c2-8621-b497357d8b86" type="Dynamo.Nodes.DSModelElementSelection" nickname="Select Model Element" x="1697.97491398652" y="-45.5050879853765" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <instance id="d07c7405-be90-4fe4-8361-c300daf60719-0020035c" />
    </Dynamo.Nodes.DSModelElementSelection>
    <Dynamo.Nodes.DSModelElementsSelection guid="f00c3c9a-3293-4e2c-aa55-7bd6c73389bb" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="1686.46875590877" y="206.46981442357" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <instance id="d07c7405-be90-4fe4-8361-c300daf60719-0020035b" />
      <instance id="d07c7405-be90-4fe4-8361-c300daf60719-0020035c" />
    </Dynamo.Nodes.DSModelElementsSelection>
    <PythonNodeModels.PythonNode guid="702304ab-6022-4620-9ebd-c6b0770c4900" type="PythonNodeModels.PythonNode" nickname="Python Script" x="2068.71698311636" y="-45.2828513095475" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.


def toRvtPoint(point):
	return point.ToXyz()

def toRvtId(_id):
	if isinstance(_id, int) or isinstance(_id, str):
		id = ElementId(int(_id))
		return id
	elif isinstance(_id, ElementId):
		return _id

def GetUVPoint(pt):
	if type(pt) == Autodesk.DesignScript.Geometry.Point:
		return Autodesk.Revit.DB.UV(pt.X, pt.Y)
	elif type(pt) == Autodesk.DesignScript.Geometry.UV:
		return Autodesk.Revit.DB.UV(pt.U, pt.V)

def CreateSpaceTag(space, uv, view):
	doc = DocumentManager.Instance.CurrentDBDocument
	return doc.Create.NewSpaceTag(space, uv, view)


item = UnwrapElement(IN[0])

leaderElbow = item.LeaderElbow
leaderEnd = item.LeaderEnd
newLeaderElbow = item.LeaderElbow

leaderX = item.LeaderElbow[0]


TransactionManager.Instance.EnsureInTransaction(doc)

if item.LeaderElbow[0] != item.LeaderEnd[0]:
	item.LeaderElbow = XYZ(item.LeaderEnd[0], item.LeaderElbow[1], item.LeaderElbow[2])
	OUT = "changed"
else:
	OUT = "unchanged"
	
TransactionManager.Instance.TransactionTaskDone()


</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="7d220f45-0be6-4f82-828d-f9c0465b0c9b" type="PythonNodeModels.PythonNode" nickname="Python Script" x="2020.37998861543" y="514.719113339126" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.


def toRvtPoint(point):
	return point.ToXyz()

def toRvtId(_id):
	if isinstance(_id, int) or isinstance(_id, str):
		id = ElementId(int(_id))
		return id
	elif isinstance(_id, ElementId):
		return _id

def GetUVPoint(pt):
	if type(pt) == Autodesk.DesignScript.Geometry.Point:
		return Autodesk.Revit.DB.UV(pt.X, pt.Y)
	elif type(pt) == Autodesk.DesignScript.Geometry.UV:
		return Autodesk.Revit.DB.UV(pt.U, pt.V)

def CreateSpaceTag(space, uv, view):
	doc = DocumentManager.Instance.CurrentDBDocument
	return doc.Create.NewSpaceTag(space, uv, view)


tag = UnwrapElement(IN[0])

#leaderElbow = tag.LeaderElbow
#leaderEnd = tag.LeaderEnd
#newLeaderElbow = tag.LeaderElbow

#leaderX = tag.LeaderElbow[0]

changed = []
unchanged = []

TransactionManager.Instance.EnsureInTransaction(doc)

for item in tag:

#	IndependentTag.Create()
    item.LeaderEndCondition = LeaderEndCondition.Free
    elbowPnt = XYZ(item.LeaderEnd[0], item.LeaderEnd[1]-1, item.LeaderEnd[2])
    item.LeaderElbow = elbowPnt
    headerPnt = XYZ(item.LeaderEnd[0]+3, elbowPnt[1]+0.18, elbowPnt[2])
    item.TagHeadPosition = headerPnt
"""
	item.LeaderElbow = XYZ(item.LeaderEnd[0], item.LeaderElbow[1], item.LeaderElbow[2])
	"""
TransactionManager.Instance.TransactionTaskDone()

OUT = [changed,unchanged]
</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="031a6176-cda8-4f96-8b9f-335d04b6c1e4" type="PythonNodeModels.PythonNode" nickname="Python Script" x="2076.93146898209" y="682.978769676148" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.


def toRvtPoint(point):
	return point.ToXyz()

def toRvtId(_id):
	if isinstance(_id, int) or isinstance(_id, str):
		id = ElementId(int(_id))
		return id
	elif isinstance(_id, ElementId):
		return _id

def GetUVPoint(pt):
	if type(pt) == Autodesk.DesignScript.Geometry.Point:
		return Autodesk.Revit.DB.UV(pt.X, pt.Y)
	elif type(pt) == Autodesk.DesignScript.Geometry.UV:
		return Autodesk.Revit.DB.UV(pt.U, pt.V)

def CreateSpaceTag(space, uv, view):
	doc = DocumentManager.Instance.CurrentDBDocument
	return doc.Create.NewSpaceTag(space, uv, view)


tag = UnwrapElement(IN[0])

#leaderElbow = tag.LeaderElbow
#leaderEnd = tag.LeaderEnd
#newLeaderElbow = tag.LeaderElbow

#leaderX = tag.LeaderElbow[0]

changed = []
unchanged = []

TransactionManager.Instance.EnsureInTransaction(doc)

for item in tag:

	IndependentTag.Create()

"""
	item.LeaderElbow = XYZ(item.LeaderEnd[0], item.LeaderElbow[1], item.LeaderElbow[2])
	"""
TransactionManager.Instance.TransactionTaskDone()

OUT = [changed,unchanged]
</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Nodes.DSModelElementsSelection guid="fedc1d93-b8f0-4341-aaeb-0450abd27fa2" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="1702.84360548048" y="513.813678915952" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <instance id="d07c7405-be90-4fe4-8361-c300daf60719-0020035b" />
      <instance id="d07c7405-be90-4fe4-8361-c300daf60719-0020035c" />
    </Dynamo.Nodes.DSModelElementsSelection>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="fedc1d93-b8f0-4341-aaeb-0450abd27fa2" start_index="0" end="7d220f45-0be6-4f82-828d-f9c0465b0c9b" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="d6913b36-9b5b-4ca7-82f5-df2037784c21" annotationText="Align the Elbow vertically. There must be a Leader and the Leader Type must be set to Free End and " left="1687.97491398652" top="-163.505087985376" width="514.742069129843" height="237" fontSize="30" InitialTop="-45.5050879853765" InitialHeight="149" TextblockHeight="108" backgrouund="#FFC1D676">
      <Models ModelGuid="bab5a2e9-68e9-43c2-8621-b497357d8b86" />
      <Models ModelGuid="702304ab-6022-4620-9ebd-c6b0770c4900" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="a411bfcd-1289-47ab-b5e7-e50fadb2ae23" annotationText="Same as above but works with multiple elements" left="1676.46875590877" top="123.077058599059" width="425.133097328283" height="202.392755824511" fontSize="30" InitialTop="205.077058599059" InitialHeight="150.392755824511" TextblockHeight="72" backgrouund="#FFC1D676">
      <Models ModelGuid="57c2aa33-2803-4130-acf2-78fb52aacfd4" />
      <Models ModelGuid="f00c3c9a-3293-4e2c-aa55-7bd6c73389bb" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="8b3ae647-906f-4957-9e3f-08a1e376cf43" annotationText="Automatically add a Leader, set the Leader Type to Free End and align them" left="1692.84360548048" top="395.813678915952" width="461.536383134955" height="237" fontSize="30" InitialTop="513.813678915952" InitialHeight="123" TextblockHeight="108" backgrouund="#FFC1D676">
      <Models ModelGuid="7d220f45-0be6-4f82-828d-f9c0465b0c9b" />
      <Models ModelGuid="fedc1d93-b8f0-4341-aaeb-0450abd27fa2" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>