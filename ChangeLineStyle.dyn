<Workspace Version="1.3.1.1736" X="-1113.21473305822" Y="1100.20938977111" zoom="0.7529879298913" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Nodes.DSModelElementSelection guid="57e0a351-2a13-43cd-ab0d-fafd03e0cbea" type="Dynamo.Nodes.DSModelElementSelection" nickname="Select Model Element" x="-2619.15613087522" y="534.014010414152" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false" />
    <Dynamo.Nodes.DSModelElementSelection guid="17a45afa-8710-4724-9aa7-3bc347fce891" type="Dynamo.Nodes.DSModelElementSelection" nickname="Select Model Element" x="788.742043615044" y="182.883155395625" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <instance id="b89c10e1-265a-40c8-912f-e2b9af8e8a61-001f1a6b" />
    </Dynamo.Nodes.DSModelElementSelection>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="9b1876b0-d802-4779-8b67-0a3cb8efdc56" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Element.Parameters" x="1460.41413185927" y="-130.267089504255" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="RevitNodes.dll" function="Revit.Elements.Element.Parameters">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <PythonNodeModels.PythonNode guid="34c59f3c-ad7c-4346-af5a-83bb9689f21b" type="PythonNodeModels.PythonNode" nickname="Python Script" x="1165.06721298806" y="191.157552328084" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>#Copyright(c) 2016, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com

import clr
import math

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

def output1(l1):
	if len(l1) == 1: return l1[0]
	else: return l1

elements = UnwrapElement(tolist(IN[0]))
getModel = IN[1]

accepted_mc = "Autodesk.Revit.DB.ModelLine, Autodesk.Revit.DB.ModelArc, Autodesk.Revit.DB.ModelEllipse, Autodesk.Revit.DB.ModelHermiteSpline, Autodesk.Revit.DB.ModelNurbSpline"

def almost_eq(line, mc):
	line2 = mc.Location.Curve
	xyz1 = line.Evaluate(0.5, True)
	if not line2.IsBound:
		xyz2 = line2.Center
		try: xyz1 = line.Center
		except: pass
	else:
		xyz2 = line2.Evaluate(0.5, True)
	if xyz1.DistanceTo(xyz2) &lt;= 0.0001:
		return True
	else:
		return False

def clean1(l1):
	for i in xrange(len(l1) ):
		l1[i] = [x for x in l1[i] if x != None]
	return l1

def getSketch(el1):
	try:
		sk1 = doc.GetElement(ElementId(el1.Id.IntegerValue - 1) )
	except:
		sk1 = None
	if not getModel and sk1 is not None and sk1.GetType().ToString() == 'Autodesk.Revit.DB.Sketch':
		profile = sk1.Profile
	else:
		t1 = SubTransaction(doc)
		t1.Start()
		deleted = doc.Delete(el1.Id)
		t1.RollBack()
		
		profile, mc = CurveArrArray(), []
		for d in deleted:
			test_el = doc.GetElement(d)
			el_type = test_el.GetType().ToString()
			if el_type == "Autodesk.Revit.DB.Sketch":
				profile = test_el.Profile
				if not getModel:
					break
			elif getModel and el_type in accepted_mc :
				mc.append(test_el)

	ordered_mc = [ [None] * i.Size for i in profile] if getModel else []
	curves = [ [None] * i.Size for i in profile]
	for i in xrange(profile.Size):
		for j in xrange(profile[i].Size):
			curves[i][j] = profile[i][j].ToProtoType()
			if getModel:
				for k in xrange(len(mc)):
					if almost_eq(profile[i][j], mc[k]):
						ordered_mc[i][j] = mc[k].ToDSType(True)
						del mc[k]
						break
						
	return curves, clean1(ordered_mc)

TransactionManager.Instance.EnsureInTransaction(doc)
result = map(getSketch, elements)
TransactionManager.Instance.TransactionTaskDone()
OUT = output1([r[0] for r in result]), output1([r[1] for r in result])</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="c8c903ff-bfe6-48a8-a931-2d4ac79b5510" type="PythonNodeModels.PythonNode" nickname="Python Script" x="1110.64805753732" y="503.160689183128" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>#Copyright(c) 2016, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com

import clr
import math

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

def output1(l1):
	if len(l1) == 1: return l1[0]
	else: return l1

elements = UnwrapElement(tolist(IN[0]))
getModel = IN[1]

accepted_mc = "Autodesk.Revit.DB.ModelLine, Autodesk.Revit.DB.ModelArc, Autodesk.Revit.DB.ModelEllipse, Autodesk.Revit.DB.ModelHermiteSpline, Autodesk.Revit.DB.ModelNurbSpline"

def almost_eq(line, mc):
	line2 = mc.Location.Curve
	xyz1 = line.Evaluate(0.5, True)
	if not line2.IsBound:
		xyz2 = line2.Center
		try: xyz1 = line.Center
		except: pass
	else:
		xyz2 = line2.Evaluate(0.5, True)
	if xyz1.DistanceTo(xyz2) &lt;= 0.0001:
		return True
	else:
		return False

def clean1(l1):
	for i in xrange(len(l1) ):
		l1[i] = [x for x in l1[i] if x != None]
	return l1

def getSketch(el1):
	try:
		sk1 = doc.GetElement(ElementId(el1.Id.IntegerValue - 1) )
	except:
		sk1 = None
	if not getModel and sk1 is not None and sk1.GetType().ToString() == 'Autodesk.Revit.DB.Sketch':
		profile = sk1.Profile
	else:
		deleted = doc.Delete(el1.Id)

		
		profile, mc = CurveArrArray(), []
		for d in deleted:
			test_el = doc.GetElement(d)
			el_type = test_el.GetType().ToString()
			if el_type == "Autodesk.Revit.DB.Sketch":
				profile = test_el.Profile
				if not getModel:
					break
			elif getModel and el_type in accepted_mc :
				mc.append(test_el)

	ordered_mc = [ [None] * i.Size for i in profile] if getModel else []
	curves = [ [None] * i.Size for i in profile]
	for i in xrange(profile.Size):
		for j in xrange(profile[i].Size):
			curves[i][j] = profile[i][j].ToProtoType()
			if getModel:
				for k in xrange(len(mc)):
					if almost_eq(profile[i][j], mc[k]):
						ordered_mc[i][j] = mc[k].ToDSType(True)
						del mc[k]
						break
						
	return curves, clean1(ordered_mc), profile, sk1, sk1.GetType()

TransactionManager.Instance.EnsureInTransaction(doc)
result = map(getSketch, elements)
TransactionManager.Instance.TransactionTaskDone()
#OUT = output1([r[0] for r in result]), output1([r[1] for r in result])
OUT = result</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="40099d4a-b070-4ef1-a583-22c50e9828e0" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Springs.Collector.ElementSketch" x="1853.94286492259" y="200.688024253105" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="True" />
      <PortInfo index="2" default="True" />
      <ID value="94050ce4-e59f-4377-933d-16326991c630" />
      <Name value="Springs.Collector.ElementSketch" />
      <Description value="Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets." />
      <Inputs>
        <Input value="element" />
        <Input value="fetchModelCurves" />
        <Input value="refresh" />
      </Inputs>
      <Outputs>
        <Output value="curves" />
        <Output value="model curves" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="c4b1475b-242e-4a3c-b2bf-abf3672a7e58" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Element.Parameters" x="2112.74934548252" y="396.510626800658" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="RevitNodes.dll" function="Revit.Elements.Element.Parameters">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="384f25f5-456b-4e00-9601-3d4f6fa727fb" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1425.76656598578" y="514.049376545103" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" CodeText="a[0][3];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="94ba4f31-266d-4494-9ccf-44ae3c90ee29" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Element.SetParameterByName" x="1855.088026341" y="824.800997284781" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="RevitNodes.dll" function="Revit.Elements.Element.SetParameterByName@string,var">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="cc32c8c1-77e9-46ec-b411-b185445a6a87" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Element.GetParameterValueByName" x="1662.70090804867" y="677.075174310311" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="RevitNodes.dll" function="Revit.Elements.Element.GetParameterValueByName@string">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="a7a10ae1-54f4-40d5-8f4e-94923c8d89ba" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1401" y="776" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="&quot;Name&quot;;" ShouldFocus="false" />
    <PythonNodeModels.PythonNode guid="72339f43-8e09-436e-bad1-57ade2ed7c9b" type="PythonNodeModels.PythonNode" nickname="Python Script" x="1646.5926722393" y="308.788883516459" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>#Copyright(c) 2016, Dimitar Venkov
# @5devene, dimitar.ven@gmail.com

import clr
import math

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

def output1(l1):
	if len(l1) == 1: return l1[0]
	else: return l1

elements = UnwrapElement(tolist(IN[0]))
getModel = IN[1]

accepted_mc = "Autodesk.Revit.DB.ModelLine, Autodesk.Revit.DB.ModelArc, Autodesk.Revit.DB.ModelEllipse, Autodesk.Revit.DB.ModelHermiteSpline, Autodesk.Revit.DB.ModelNurbSpline"

def almost_eq(line, mc):
	line2 = mc.Location.Curve
	xyz1 = line.Evaluate(0.5, True)
	if not line2.IsBound:
		xyz2 = line2.Center
		try: xyz1 = line.Center
		except: pass
	else:
		xyz2 = line2.Evaluate(0.5, True)
	if xyz1.DistanceTo(xyz2) &lt;= 0.0001:
		return True
	else:
		return False

def clean1(l1):
	for i in xrange(len(l1) ):
		l1[i] = [x for x in l1[i] if x != None]
	return l1

def getSketch(el1):
	try:
		sk1 = doc.GetElement(ElementId(el1.Id.IntegerValue - 1) )
	except:
		sk1 = None
	if not getModel and sk1 is not None and sk1.GetType().ToString() == 'Autodesk.Revit.DB.Sketch':
		profile = sk1.Profile
	else:
		t1 = SubTransaction(doc)
		t1.Start()
		deleted = doc.Delete(el1.Id)
		t1.RollBack()
		
		profile, mc = CurveArrArray(), []
		for d in deleted:
			test_el = doc.GetElement(d)
			el_type = test_el.GetType().ToString()
			if el_type == "Autodesk.Revit.DB.Sketch":
				profile = test_el.Profile
				if not getModel:
					break
			elif getModel and el_type in accepted_mc :
				mc.append(test_el)

	ordered_mc = [ [None] * i.Size for i in profile] if getModel else []
	curves = [ [None] * i.Size for i in profile]
	for i in xrange(profile.Size):
		for j in xrange(profile[i].Size):
			curves[i][j] = profile[i][j].ToProtoType()
			if getModel:
				for k in xrange(len(mc)):
					if almost_eq(profile[i][j], mc[k]):
						ordered_mc[i][j] = mc[k].ToDSType(True)
						del mc[k]
						break
						
	return curves, clean1(ordered_mc)

TransactionManager.Instance.EnsureInTransaction(doc)
result = map(getSketch, elements)
TransactionManager.Instance.TransactionTaskDone()
OUT = output1([r[0] for r in result]), output1([r[1] for r in result])</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="c3ae1d41-1de0-4041-965d-76791d2ec812" type="PythonNodeModels.PythonNode" nickname="Python Script" x="2884.33490007557" y="-922.802014268186" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application


region = UnwrapElement(IN[0])

ids = UnwrapElement(IN[1])

TransactionManager.Instance.EnsureInTransaction(doc)

for r in region:
	FilledRegion.SetLineStyleId(r, ids.Id)

TransactionManager.Instance.TransactionTaskDone()

#Assign your outputs to the OUT variable
OUT = region
</Script>
    </PythonNodeModels.PythonNode>
    <DSRevitNodesUI.Categories guid="526d0f29-273f-4b1c-a788-188705d2f130" type="DSRevitNodesUI.Categories" nickname="Categories" x="1612.40715615493" y="1057.6508285513" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="true" index="241:Lines" />
    <DSRevitNodesUI.ElementsOfCategory guid="5c384ede-22fa-49ff-b8b8-59dd5244a993" type="DSRevitNodesUI.ElementsOfCategory" nickname="All Elements of Category" x="1876.96605529821" y="1057.07872723088" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true">
      <PortInfo index="0" default="False" />
    </DSRevitNodesUI.ElementsOfCategory>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="d39d9cdb-4f32-464a-96ff-6328202f12ba" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Element.Parameters" x="2339.00645602332" y="997.929994035556" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="RevitNodes.dll" function="Revit.Elements.Element.Parameters">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <DSRevitNodesUI.FamilyTypes guid="60739380-5272-47ba-979e-35902997a938" type="DSRevitNodesUI.FamilyTypes" nickname="Family Types" x="2573.51297920871" y="1366.79322337603" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false" index="0:Angled Step:Angled Step" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="0cae0cd8-31e2-46bc-813e-b36fd6e76927" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.FirstIndexOf" x="2214.63697548715" y="-821.243419179313" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="DSCoreNodes.dll" function="DSCore.List.FirstIndexOf@var[]..[],var">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="e9d25089-82c7-4db4-93dd-a0c67f550154" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="2430.96817773126" y="-899.616642108973" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="41970a37-7e63-4bb8-9d5f-0ad1d212f9ab" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Element.Name" x="2090.45180790018" y="-566.023979771392" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="RevitNodes.dll" function="Revit.Elements.Element.Name">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="5dac4406-56d4-4f59-987f-6af5255db264" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1938.88080951489" y="-790.527793290008" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="&quot;&lt;Invisible lines&gt;&quot;;" ShouldFocus="false" />
    <Dynamo.Nodes.DSModelElementsSelection guid="c3e6fb09-1099-490d-a44e-7231e1958847" type="Dynamo.Nodes.DSModelElementsSelection" nickname="Select Model Elements" x="2394.11949975653" y="-1148.27369683525" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <instance id="b89c10e1-265a-40c8-912f-e2b9af8e8a61-001f1b41" />
      <instance id="b89c10e1-265a-40c8-912f-e2b9af8e8a61-001f1b5e" />
      <instance id="b89c10e1-265a-40c8-912f-e2b9af8e8a61-001f1b6f" />
      <instance id="b89c10e1-265a-40c8-912f-e2b9af8e8a61-001f1b80" />
      <instance id="b89c10e1-265a-40c8-912f-e2b9af8e8a61-001f1b91" />
    </Dynamo.Nodes.DSModelElementsSelection>
    <PythonNodeModels.PythonNode guid="d40dce17-efc7-4458-b688-612dce4bea4c" type="PythonNodeModels.PythonNode" nickname="Get All Line Styles" x="1697.14220074373" y="-899.471230253513" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="0">
      <Script>import clr
# import Document Manager
clr.AddReference("RevitServices")
import RevitServices 
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument
uidoc = DocumentManager.Instance.CurrentUIDocument
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)
clr.AddReference("RevitAPI")
from Autodesk.Revit.DB import *


coll = FilteredElementCollector(doc).OfClass(GraphicsStyle).ToElementIds()

elements = []

for c in coll:
	elements.append(doc.GetElement(c))

OUT = elements</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="17a45afa-8710-4724-9aa7-3bc347fce891" start_index="0" end="9b1876b0-d802-4779-8b67-0a3cb8efdc56" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="17a45afa-8710-4724-9aa7-3bc347fce891" start_index="0" end="34c59f3c-ad7c-4346-af5a-83bb9689f21b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="17a45afa-8710-4724-9aa7-3bc347fce891" start_index="0" end="c8c903ff-bfe6-48a8-a931-2d4ac79b5510" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="17a45afa-8710-4724-9aa7-3bc347fce891" start_index="0" end="72339f43-8e09-436e-bad1-57ade2ed7c9b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c8c903ff-bfe6-48a8-a931-2d4ac79b5510" start_index="0" end="384f25f5-456b-4e00-9601-3d4f6fa727fb" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="384f25f5-456b-4e00-9601-3d4f6fa727fb" start_index="0" end="c4b1475b-242e-4a3c-b2bf-abf3672a7e58" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="384f25f5-456b-4e00-9601-3d4f6fa727fb" start_index="0" end="cc32c8c1-77e9-46ec-b411-b185445a6a87" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="a7a10ae1-54f4-40d5-8f4e-94923c8d89ba" start_index="0" end="cc32c8c1-77e9-46ec-b411-b185445a6a87" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="526d0f29-273f-4b1c-a788-188705d2f130" start_index="0" end="5c384ede-22fa-49ff-b8b8-59dd5244a993" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5c384ede-22fa-49ff-b8b8-59dd5244a993" start_index="0" end="d39d9cdb-4f32-464a-96ff-6328202f12ba" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0cae0cd8-31e2-46bc-813e-b36fd6e76927" start_index="0" end="e9d25089-82c7-4db4-93dd-a0c67f550154" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e9d25089-82c7-4db4-93dd-a0c67f550154" start_index="0" end="c3ae1d41-1de0-4041-965d-76791d2ec812" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="41970a37-7e63-4bb8-9d5f-0ad1d212f9ab" start_index="0" end="0cae0cd8-31e2-46bc-813e-b36fd6e76927" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5dac4406-56d4-4f59-987f-6af5255db264" start_index="0" end="0cae0cd8-31e2-46bc-813e-b36fd6e76927" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c3e6fb09-1099-490d-a44e-7231e1958847" start_index="0" end="c3ae1d41-1de0-4041-965d-76791d2ec812" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d40dce17-efc7-4458-b688-612dce4bea4c" start_index="0" end="41970a37-7e63-4bb8-9d5f-0ad1d212f9ab" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d40dce17-efc7-4458-b688-612dce4bea4c" start_index="0" end="e9d25089-82c7-4db4-93dd-a0c67f550154" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="f4c11778-cfc2-4faa-bf5c-13f248027d10" annotationText="Select Filled Regions" left="2384.11949975653" top="-1230.27369683525" width="258" height="218" fontSize="30" InitialTop="-1148.27369683525" InitialHeight="166" TextblockHeight="72" backgrouund="#FFC1D676">
      <Models ModelGuid="c3e6fb09-1099-490d-a44e-7231e1958847" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="f8ae4c4f-004d-4ab3-bd59-586bbdd8d7cf" annotationText="Select Line Style" left="1928.88080951489" top="-836.527793290008" width="215" height="139" fontSize="30" InitialTop="-790.527793290008" InitialHeight="123" TextblockHeight="36" backgrouund="#FFC1D676">
      <Models ModelGuid="5dac4406-56d4-4f59-987f-6af5255db264" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>