{
  "Uuid": "541468e2-7c13-480d-a8e7-cf4aff6492b9",
  "IsCustomNode": false,
  "Description": null,
  "Name": "modelessForm3",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "880e003a463947218d9d0786719a309b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "652f1be3557b49a6a1f19576ee31537e",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import *\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nbutton1 = Button();\r\nbutton2 = Button();\r\nlabel1 = Label();\r\n\r\nform = Form()\r\n\r\nresult= 0\r\n\r\ndef update():\r\n\tglobal result \r\n\tresult += 1\r\n\r\nOUT = []\r\n\r\ndef output():\r\n\treturn OUT.append(\"ciao\")\r\n\r\ndef Close():\r\n\tform.Close()\r\n\r\ndef Button1Click(sender, e):\r\n\toutput()\r\n\treturn update()\t\r\n\t\r\ndef Button2Click(sender, e):\r\n\tglobal result\r\n\tresult -= 1\r\n\r\n\r\nbutton1.DialogResult = DialogResult.OK;\r\nbutton1.Location = Point(10, 75);\r\nbutton1.Name = \"button1\";\r\nbutton1.Size = Size(88, 32);\r\nbutton1.TabIndex = 0;\r\nbutton1.Text = \"OK\";\r\nbutton1.UseCompatibleTextRendering = True;\r\nbutton1.UseVisualStyleBackColor = True;\r\nbutton1.Click += EventHandler(Button1Click);\r\n\r\nbutton2.DialogResult = DialogResult.Cancel;\r\nbutton2.Location = Point(134, 75);\r\nbutton2.Name = \"button2\";\r\nbutton2.Size = Size(88, 32);\r\nbutton2.TabIndex = 1;\r\nbutton2.Text = \"Cancel\";\r\nbutton2.UseCompatibleTextRendering = True;\r\nbutton2.UseVisualStyleBackColor = True;\r\nbutton2.Click += EventHandler(Button2Click);\r\n# \r\n# label1\r\n# \r\nlabel1.Location = Point(12, 9);\r\nlabel1.Name = \"label1\";\r\nlabel1.Size = Size(219, 63);\r\nlabel1.TabIndex = 2;\r\nlabel1.Text = \"You are updating the beam tags. Click OK to accept the changes or Cancel to discard them\";\r\nlabel1.UseCompatibleTextRendering = True;\r\n# \r\n# Form1\r\n# \r\nClientSize = Size(251, 126);\r\nform.Controls.Add(label1);\r\nform.Controls.Add(button2);\r\nform.Controls.Add(button1);\r\nName = \"Form1\";\r\nText = \"User input required\";\r\nform.StartPosition = FormStartPosition.CenterScreen\r\n\r\n\t\r\n\t\r\nform.Show()\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "41dca0d59c2f4a67baa472689eb68996",
      "Inputs": [
        {
          "Id": "456251e6123f42af8462e8bd7c2bca5c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "285a7bedb75b403482b0b51487287e2d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, MessageBox, MessageBoxButtons, MessageBoxIcon\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import *\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nif (MessageBox.Show(\"Are you sure you want to change the model?\", \"Add\", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes):                \r\n\tOUT = True\r\nelse:\r\n\tOUT = False",
      "VariableInputPorts": true,
      "Id": "efb48cace443429da81881cc4f3f1b32",
      "Inputs": [
        {
          "Id": "f56f72a8ad6d4b31a68986f0cd25fc59",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "504b9e2c16974cef8d9e25d971da3765",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "2d2741823e614b3da194c3187fd47354",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e8dff8e72de247709c930ad1c6e875cc",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import *\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\n\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n\r\n\r\n\r\n\r\n\r\ndef delete_elements():\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\tfor elid in uidoc.Selection.GetElementIds():\r\n\t\tele = doc.GetElement(elid)\r\n\t\tp = ele.LookupParameter(\"Mark\")\r\n\t\tp.Set(\"A\")\r\n\tt.Commit()\r\n\treturn t\r\n\r\n\r\n\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = delete_elements()",
      "VariableInputPorts": true,
      "Id": "a60ec88c3a8d4c48aefd13a044692988",
      "Inputs": [
        {
          "Id": "f3fbfddbc7f04191aef857795aa2ff8b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "882f52fc90754aad80b39f681bdcd632",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\n\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nimport math\r\nfrom System.Collections.Generic import Dictionary,List\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n\r\nclass CustomISelectionFilter(ISelectionFilter):\r\n\tdef __init__(self, nom_categorie):\r\n\t\tself.nom_categorie = nom_categorie\r\n\tdef AllowElement(self, e):\r\n\t\tif e.Category.Name == self.nom_categorie:\r\n\t\t\treturn True\r\n\t\telse:\r\n\t\t\treturn False\r\n\tdef AllowReference(self, ref, point):\r\n\t\treturn true\r\n\r\n\r\nmainDialog = TaskDialog(\"Hello, Revit!\");\r\nmainDialog.MainInstruction = \"Hello, Revit!\";\r\nmainDialog.MainContent = \"This sample shows how to use a Revit task dialog to communicate with the user.\"\r\n\r\nmainDialog.CommonButtons = TaskDialogCommonButtons.Close | TaskDialogCommonButtons.Ok;\r\nmainDialog.DefaultButton = TaskDialogResult.Close;\r\n\r\nmainDialog.Show()\r\n\r\n\r\n\r\n\r\nOUT = TaskDialogResult == TaskDialogResult.Close\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "8b3c7757703840fdadfb187bdda6a353",
      "Inputs": [
        {
          "Id": "f673729ea6d6468aacf43e96c51cf6f8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6fa0d7da50ff45a6b89a56583632d745",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import *\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\n\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nelementsDynamo = UnwrapElement(IN[4])\r\nview = doc.ActiveView\r\nnewTags = IN[2]\r\n\"\"\"\r\n# Simple function we want to run\r\ndef delete_elements():\r\n    t = Transaction(doc, \"Failing script\")\r\n    t.Start()\r\n    for elid in uidoc.Selection.GetElementIds():\r\n        doc.Delete(elid)\r\n    t.Commit()\r\n\"\"\"\r\n\r\ndef delete_elements():\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\telements = uidoc.Selection.GetElementIds()\r\n\tfor e,ta in zip(elements,newTags):\r\n\t\tp = doc.GetElement(e).LookupParameter(\"Comments\")\r\n\t\tp.Set(p.AsString() + \"(\" + ta + \")\")\r\n\tt.Commit()\r\n\treturn \"done\"\r\n\r\n\r\ndef OverrideColor(elements, v):\r\n\tbooleans = []\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\tfor item in elements:\r\n\t\toverride.SetProjectionFillColor(Color(255,0,0))\r\n\t\ttry:\r\n\t\t\tv.SetElementOverrides(item.Id, override)\r\n\t\t\tbooleans.append(True)\r\n\t\texcept: booleans.append(False)\r\n\tt.Commit()\r\n\treturn booleans\r\n\r\n\r\ndef close(form):\r\n\tform.Close()\r\n\r\n\r\ndef Button2Click(sender, e):\r\n\tform.Close()\r\n\tOUT = 1\r\n\t\r\n# Create a subclass of IExternalEventHandler\r\nclass SimpleEventHandler(IExternalEventHandler):\r\n\t\"\"\"\r\n\tSimple IExternalEventHandler sample\r\n\t\"\"\"\r\n\t# __init__ is used to make function from outside of the class to be executed by the handler. \\\r\n\t# Instructions could be simply written under Execute method only\r\n\tdef __init__(self, do_this):\r\n\t    self.do_this = do_this\r\n\t# Execute method run in Revit API environment.\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\tself.do_this()\r\n\t\texcept InvalidOperationException:\r\n\t\t\t# If you don't catch this exeption Revit may crash.\r\n\t\t\tTaskDialog.Show(\"InvalidOperationException catched\")\r\n\tdef GetName(self):\r\n\t\treturn \"simple function executed by an IExternalEventHandler in a Form\"\r\n# Now we need to make an instance of this handler. Moreover, it shows that the same class could be used to for\r\n# different functions using different handler class instances\r\n\r\n#simple_event_handler = SimpleEventHandler(delete_elements)\r\nsimple_event_handler = SimpleEventHandler(delete_elements)\r\n\r\n#simple_event_handler.elements = elements\r\n#simple_event_handler.view = doc.ActiveView\r\n\r\n# We now need to create the ExternalEvent\r\next_event = ExternalEvent.Create(simple_event_handler)\r\n\r\n\r\nlabel1 = Label();\r\nbutton1 = Button();\r\nbutton2 = Button();\r\n\r\n# A simple WPF form used to call the ExternalEvent\r\nclass ModelessForm(Form):\r\n\t\"\"\"\r\n\tSimple modeless form sample\r\n\t\"\"\"\r\n\tdef __init__(self):\r\n\t\tself.Text = 'Place Beam Tags'\r\n\t\tself.elements = []\r\n\t\tself.view = None\r\n\t\tself.Show()\r\n\t\r\n\tdef delete_click(self, sender, e):\r\n\t\t# This Raise() method launch a signal to Revit to tell him you want to do something in the API context\r\n\t\text_event.Raise()\r\n\r\n# Let's launch our beautiful and useful form !\r\nform = ModelessForm()\r\nform.TopMost = True\r\nform.view = doc.ActiveView\r\n#form.elements = elementsDynamo\r\n\r\n\r\n\r\nlabel1.Location = Point(12, 9);\r\nlabel1.Name = \"label1\";\r\nlabel1.Size = Size(219, 63);\r\nlabel1.TabIndex = 2;\r\nlabel1.Text = \"You are updating the beam tags. Click OK to accept the changes or Cancel to discard them\";\r\nlabel1.UseCompatibleTextRendering = True;\r\n\r\n\r\nbutton1.Location = Point(10, 75);\r\nbutton1.Name = \"button1\";\r\nbutton1.Size = Size(88, 32);\r\nbutton1.TabIndex = 0;\r\nbutton1.Text = \"OK\";\r\nbutton1.UseCompatibleTextRendering = True;\r\nbutton1.UseVisualStyleBackColor = True;\r\nbutton1.Click += EventHandler(form.delete_click);\r\n\r\nbutton2.DialogResult = DialogResult.Cancel;\r\nbutton2.Location = Point(134, 75);\r\nbutton2.Name = \"button2\";\r\nbutton2.Size = Size(88, 32);\r\nbutton2.TabIndex = 1;\r\nbutton2.Text = \"Cancel\";\r\nbutton2.UseCompatibleTextRendering = True;\r\nbutton2.UseVisualStyleBackColor = True;\r\nbutton2.Click += EventHandler(Button2Click);\r\n\r\n\r\n\r\nClientSize = Size(125, 100);\r\nform.Controls.Add(button1);\r\nform.Controls.Add(button2);\r\nform.Controls.Add(label1);\r\n\r\n#result = form.values\r\n\r\n\r\n\r\nOUT = 0",
      "VariableInputPorts": true,
      "Id": "ff7cde87dc1b4f4dac3599ff2d39cad3",
      "Inputs": [
        {
          "Id": "87a0507c743341d29d8b762e50fdd71c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "38ea84bfe6b24d0ba40ec77775adfcdb",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3ee3136d6a344d293b836a9ebf5fbc0",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5229d210845e494a9486b18dc7f92854",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8be644f914d44a839cbb60b82449ab44",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "112fb7d10a534c39a32c9bbe935941d9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) Data Shapes,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@data-shapes.io @data_shapes\r\n\r\nimport clr\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\nimport os\r\nimport webbrowser\r\nimport unicodedata\r\n\r\ntry:\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\nclr.AddReference('System.Windows.Forms.DataVisualization')\r\n\r\nfrom System.Drawing import Point , Size , Graphics, Bitmap, Image, Font, FontStyle, Icon, Color, Region , Rectangle , ContentAlignment\r\nfrom System.Windows.Forms import Application, DockStyle, Button, Form, Label, TrackBar , ToolTip, ColumnHeader, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, ListView, ListViewItem , SortOrder, Panel, ImageLayout, GroupBox, RadioButton, BorderStyle, PictureBox, PictureBoxSizeMode, LinkLabel, CheckState, ColumnHeaderStyle , ImageList, VScrollBar, DataGridView, DataGridViewSelectionMode, DataGridViewAutoSizeColumnsMode , DataGridViewClipboardCopyMode , TreeView , TreeNode , TreeNodeCollection\r\nfrom System.Windows.Forms.DataVisualization.Charting import Chart , SeriesChartType\r\nfrom System.Collections.Generic import *\r\nfrom System.Collections.Generic import List as iList\r\nfrom System.Windows.Forms import View as vi\r\nclr.AddReference('System')\r\nfrom System import IntPtr , Char\r\nfrom System import Type as SType\r\nfrom System.ComponentModel import Container\r\nclr.AddReference('System.Data')\r\nfrom System.Data import DataTable , DataView\r\n\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom  Autodesk.Revit.UI import Selection , TaskDialog \r\nfrom  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n\r\nimportcolorselection = 0\r\n\r\ntry:\r\n\tfrom  Autodesk.Revit.UI import ColorSelectionDialog\r\nexcept:\r\n\timportcolorselection = 1\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import FilteredElementCollector , View , ViewType , ElementId , FamilyInstance , Document , UnitType , UnitUtils\r\ndbviews = [v for v in FilteredElementCollector(doc).OfClass(View).ToElements() if (v.ViewType == ViewType.FloorPlan or v.ViewType == ViewType.CeilingPlan or v.ViewType == ViewType.Section or v.ViewType == ViewType.Elevation or v.ViewType == ViewType.ThreeD)]\r\nviewindex = 0\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import Point as dsPoint\r\n\r\nfrom System.Reflection import Assembly\r\nimport xml.etree.ElementTree as et\r\n\r\nUIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\r\nimport re\t\r\ndef regexEndNum(input):\r\n\ttry:\r\n\t\treturn \tre.search('(\\d+)$', input).group(0)\r\n\texcept:\r\n\t\treturn \"\"\r\n\r\nclass MultiTextBoxForm(Form):\r\n\t\r\n    def __init__(self):\r\n        self.Text = 'Data-Shapes | Multi Input UI ++'\r\n        self.output = []\r\n        self.values = []\r\n        self.cancelled = False\r\n\r\n    def setclose(self, sender, event):\r\n    \tcbindexread = 0\r\n    \tif sender.Name != \"Cancel\":\r\n    \t\tfor f in self.output:\r\n    \t\t\tif f.GetType() == myTextBox:\r\n    \t\t\t\tif f._isNum :\r\n    \t\t\t\t\tval = float(f.Text)\r\n    \t\t\t\telse:\r\n    \t\t\t\t\tval = f.Text\r\n    \t\t\t\tself.values.append(val)\r\n    \t\t\tif f.GetType() == CheckBox:\r\n    \t\t\t\tself.values.append(f.Checked)\r\n    \t\t\tif f.GetType() == Button:\r\n    \t\t\t\tif isinstance(f.Tag ,list):\r\n    \t\t\t\t\tself.values.append([e for e in f.Tag if e.__class__.__name__ != \"Category\"])\r\n    \t\t\t\telse:\t    \t\t\t\t\t\r\n    \t\t\t\t\tif f.Tag.__class__.__name__ != \"Category\":\r\n    \t\t\t\t\t\tself.values.append(f.Tag)\r\n    \t\t\t\t\telse:\r\n\t\t\t\t\t\t\tself.values.append([])\r\n\r\n    \t\t\tif f.GetType() == ComboBox:\r\n    \t\t\t\ttry:\r\n    \t\t\t\t\tkey = f.Text\r\n    \t\t\t\t\tself.values.append(f.Tag[key])\r\n    \t\t\t\texcept:\r\n    \t\t\t\t\tself.values.append(None)\r\n    \t\t\tif f.GetType() == mylistview:\r\n    \t\t\t\tself.values.append([f.Values[i.Text] for i in f.CheckedItems])\r\n    \t\t\tif f.GetType() == mytrackbar:\r\n    \t\t\t\tself.values.append(f.startval+f.Value*f.step)\r\n    \t\t\tif f.GetType() == mygroupbox:\r\n    \t\t\t\ttry:\r\n    \t\t\t\t\tkey = [j.Text for j in f.Controls if j.Checked == True][0]\r\n    \t\t\t\t\tself.values.append(f.Tag[key])\r\n    \t\t\t\texcept:\r\n    \t\t\t\t\tself.values.append(None)\r\n    \t\t\tif f.GetType() == myDataGridView:\r\n    \t\t\t\tf.EndEdit()\r\n    \t\t\t\tdsrc = f.DataSource\r\n    \t\t\t\tout = []\r\n    \t\t\t\tcolcount = f.ColumnCount\r\n    \t\t\t\trowcount = f.RowCount - 1\r\n    \t\t\t\tif f.Tag:\r\n\t    \t\t\t\tl = []\r\n    \t\t\t\t\tfor i in range(colcount):\t    \t\t\t\t\t\t\r\n    \t\t\t\t\t\tl.append(dsrc.Columns[i].ColumnName)\r\n    \t\t\t\t\tout.append(l)\t    \t\t\t\t\t\t\r\n\t    \t\t\t\tfor r in range(rowcount):\r\n\t    \t\t\t\t\tl = []\r\n\t    \t\t\t\t\tfor i in range(colcount):\r\n\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t    \t\t\t\t\tout.append(l)\r\n    \t\t\t\telse: \r\n\t    \t\t\t\tfor r in range(rowcount):\r\n\t    \t\t\t\t\tl = []\r\n\t    \t\t\t\t\tfor i in range(colcount):\r\n\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t    \t\t\t\t\tout.append(l)\r\n    \t\t\t\tself.values.append(out)\r\n    \t\t\tif f.GetType() == TreeView:\r\n    \t\t\t\tls = []\r\n    \t\t\t\tnds = f.Nodes[0]\r\n    \t\t\t\titerateThroughNodes(nds,ls)\r\n    \t\t\t\tself.values.append(ls)\t \r\n    \telse:\r\n    \t\tself.values = None\r\n    \t\tself.cancelled = True\r\n    \tself.Close()\r\n\r\n    def reset(self, sender, event):\r\n\t\tpass\r\n\r\n    def openfile(self, sender, event):\r\n\t\tofd = OpenFileDialog()\r\n\t\tdr = ofd.ShowDialog()\r\n\t\tif dr == DialogResult.OK:\r\n\t\t\tsender.Text = ofd.FileName\r\n\t\t\tsender.Tag = ofd.FileName\r\n\r\n    def exportToExcel(self, sender, event):\r\n    \t#importing Excel IronPython libraries\r\n    \tclr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\r\n    \tfrom Microsoft.Office.Interop import Excel\r\n    \tex = Excel.ApplicationClass()\r\n    \tex.Visible = sender.Tag[1]\r\n    \tex.DisplayAlerts = False\r\n    \tfbd = FolderBrowserDialog()\r\n    \tfbd.SelectedPath = sender.Text\r\n    \tparent = sender.Parent\r\n    \tfptextbox = parent.GetChildAtPoint(Point(parent.Location.X,sender.Location.Y+5))\r\n    \tdataGrid = parent.GetChildAtPoint(Point(parent.Location.X,parent.Location.Y+23))\r\n    \tdataTable = dataGrid.DataSource\r\n    \tfptext = fptextbox.Text\r\n    \ttitletext = parent.GetChildAtPoint(Point(0,0)).Text\r\n    \tdr = fbd.ShowDialog()\r\n    \tfrstRwTtle = sender.Tag[0]\r\n    \tif frstRwTtle:\r\n    \t\t_header = Excel.XlYesNoGuess.xlYes\r\n    \telse:\r\n    \t\t_header = Excel.XlYesNoGuess.xlNo\r\n    \tif dr == DialogResult.OK:\r\n    \t\tworkbk = ex.Workbooks.Add()\r\n    \t\tworksheet = workbk.Worksheets.Add()\r\n    \t\t#Writing title and doc info\r\n    \t\tif sender.Tag[2]:\r\n\t    \t\ttitleCell = worksheet.Cells[1,1]\r\n\t    \t\tworksheet.Cells[2,1].Value2 = sender.Tag[3]\r\n\t    \t\ttitleCell.Value2 = titletext\r\n\t    \t\ttitleCell.Font.Size = 18\r\n\t    \t\ttitleCell.Font.Bold = True\r\n\t    \t\tstartR = 3\r\n\t    \t\tendR = 3\r\n\t    \telse:\r\n\t    \t\tstartR = 1\r\n\t    \t\tendR = 0\t\r\n\t    \tif frstRwTtle:\r\n\t    \t\tfor j in range(0,dataTable.Columns.Count):\r\n\t    \t\t\tworksheet.Cells[startR,j+1] = dataTable.Columns[j].ColumnName\t\t    \t\r\n\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t    \t\t\tworksheet.Cells[i+startR+1,j+1] = dataTable.DefaultView[i].Row[j].ToString()\r\n\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR+1,dataTable.Columns.Count])\t\t\t    \t\t\t\r\n\t    \telse :\r\n\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t    \t\t\tworksheet.Cells[i+startR,j+1] = dataTable.DefaultView[i].Row[j].ToString()\t\t    \t\r\n\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR,dataTable.Columns.Count])\r\n\t    \txlrange.Columns.AutoFit()\r\n\t    \tworksheet.ListObjects.Add(Excel.XlListObjectSourceType.xlSrcRange, xlrange, SType.Missing, _header, SType.Missing).Name = \"DataShapesTable\"\r\n\t    \tworksheet.ListObjects[\"DataShapesTable\"].TableStyle =  \"TableStyleMedium16\"\r\n    \t\tworkbk.SaveAs(fbd.SelectedPath + \"\\\\\" + fptext)\r\n    \t\tif not sender.Tag[1]:\r\n    \t\t\tworkbk.Close()\r\n    \t\t\tex.Quit()\r\n\r\n    def startCell(self, sender, event ):\r\n\t\tsender.startcell[\"X\"] = event.ColumnIndex\r\n\t\tsender.startcell[\"Y\"] = event.RowIndex\t\r\n\r\n    def endCell(self, sender, event ):\r\n    \ttry:\r\n\t\t\tsender.endcell[\"X\"] = event.ColumnIndex\r\n\t\t\tsender.endcell[\"Y\"] = event.RowIndex \r\n\t\t\tstartval = sender.Rows[sender.startcell[\"Y\"]].Cells[sender.startcell[\"X\"]].Value\r\n\t\t\tendNum = regexEndNum(startval)\r\n\t\t\tif endNum != \"\":\r\n\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1)):\r\n\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1)):\r\n\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\telse:\t\t\t\t\r\n\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\tfor i in range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1):\r\n\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval\r\n\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\tfor i in range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1):\r\n\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval\r\n    \texcept:\r\n    \t\tpass\r\n    \t\t    \t\r\n    def startRowDrag(self, sender, event ):\r\n    \tshmak\r\n\t\t\r\n    def opendirectory(self, sender, event):\r\n\t\tfbd = FolderBrowserDialog()\r\n\t\tfbd.SelectedPath = sender.Text\r\n\t\tdr = fbd.ShowDialog()\r\n\t\tif dr == DialogResult.OK:\r\n\t\t\tsender.Text = fbd.SelectedPath\r\n\t\t\tsender.Tag = fbd.SelectedPath\r\n\r\n    def pickobjects(self, sender, event):\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\ttry:\r\n\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,'')\r\n\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\tsender.Tag = (selelem)\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n    def pickobjectsordered(self, sender, event):\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\toutput = []\r\n\t\ttest = True\r\n\t\tTaskDialog.Show(\"Data|Shapes\", 'Pick elements in order, then hit ESC to exit.')\r\n\t\twhile test:\r\n\t\t\ttry:\r\n\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element, 'Pick elements in order').ElementId)\r\n\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\texcept : \r\n\t\t\t\ttest = False\r\n\t\t\tsender.Tag = output\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n    \r\n    def pickobjectsofcatordered(self, sender, event):\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\toutput = []\r\n\t\ttest = True\r\n\t\tif isinstance(sender.Tag,list):\t\t\t\r\n\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\telse:\r\n\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\tTaskDialog.Show(\"Data|Shapes\", 'Select %s in order, then press ESC to exit.' %(', '.join([c.Name for c in category])))\r\n\t\twhile test:\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt, 'Select %s' %(', '.join([c.Name for c in category]))).ElementId)\t\t\t\t\r\n\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\texcept : \r\n\t\t\t\ttest = False\r\n\t\t\tsender.Tag = (output)\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\t\t\r\n    def picklinkedobjects(self, sender, event):\r\n\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\ttry:\r\n\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked elements and press Finish.')\r\n\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.LinkedElement,'Select the linked elements and press Finish.')\r\n\t\t\tselelem = [link.GetElement(s.LinkedElementId) for s in sel]\r\n\t\t\tsender.Tag = (selelem)\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\t\t\r\n\r\n    def pickobject(self, sender, event):\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\ttry:\r\n\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,'')\r\n\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\tsender.Tag = (selelem)\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\t\t\r\n    def picklinkedobject(self, sender, event):\r\n\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\ttry:\r\n\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked element.')\r\n\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.LinkedElement,'Select the linked element.')\r\n\t\t\tselelem = link.GetElement(sel.LinkedElementId)\r\n\t\t\tsender.Tag = (selelem)\r\n\t\texcept:\r\n\t\t\tpass\t\t\t\t\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\t\t\r\n    def pickobjectsofcat(self, sender, event):\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\telse:\r\n\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\ttry:\r\n\t\t\tselfilt = selectionfilter(category)\r\n\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\tsender.Tag = (selelem)\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\r\n    def pickobjectofcat(self, sender, event):\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\telse:\r\n\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\ttry:\r\n\t\t\tselfilt = selectionfilter(category)\r\n\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\tsender.Tag = (selelem)\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\t\t\r\n    def pickfaces(self, sender, event):\r\n\t\tfaces = []\t    \t\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\ttry:\r\n\t\t\tselface = uidoc.Selection.PickObjects(Selection.ObjectType.Face,'')\r\n\t\t\tfor s in selface:\r\n\t\t\t\tf = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).ToProtoType(True)\r\n\t\t\t\t[i.Tags.AddTag(\"RevitFaceReference\", s) for i in f]\r\n\t\t\t\tfaces.append(f)\r\n\t\t\tsender.Tag = [i for j in faces for i in j]\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\t\t\t\r\n    def pickpointsonface(self, sender, event):\r\n\t\tfaces = []\t    \t\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\r\n\t\tselpoints = uidoc.Selection.PickObjects(Selection.ObjectType.PointOnElement,'')\r\n\t\tpoints = []\r\n\t\tfor s in selpoints:\r\n\t\t\tpt = s.GlobalPoint\r\n\t\t\tpoints.append(dsPoint.ByCoordinates(UnitUtils.ConvertFromInternalUnits(pt.X,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Y,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Z,UIunit)))\r\n\t\tsender.Tag = points\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\t\t\t\r\n    def pickedges(self, sender, event):\r\n\t\tedges = []\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = False\t\r\n\t\ttry:\t\t\t\t\r\n\t\t\tseledge = uidoc.Selection.PickObjects(Selection.ObjectType.Edge,'')\r\n\t\t\tfor s in seledge:\r\n\t\t\t\te = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).AsCurve().ToProtoType(True)\r\n\t\t\t\te.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\tedges.append(e)\r\n\t\t\tsender.Tag = edges\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tfor c in self.Controls:\r\n\t\t\tc.Enabled = True\r\n\r\n    def colorpicker(self, sender, event):\r\n\t\tdialog = ColorSelectionDialog()\r\n\t\tselection = ColorSelectionDialog.Show(dialog)\r\n\t\tselected = dialog.SelectedColor\r\n\t\tsender.Tag = selected\r\n\t\tsender.BackColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\tsender.ForeColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\r\n    def topmost(self):\r\n\t\tself.TopMost = True\r\n\r\n    def lvadd(self, sender, event):\r\n\t\tsender.Tag = [i for i in sender.CheckedItems]\r\n\t\t\r\n    def scroll(self, sender, event):\r\n\t\tparent = sender.Parent\r\n\t\tchild = parent.GetChildAtPoint(Point(0,5))\r\n\t\tchild.Text = str(sender.startval+sender.Value*sender.step)\r\n\r\n    def openurl(self, sender, event):\r\n\t\twebbrowser.open(sender.Tag)\r\n\r\n    def selectall(self, sender, event):\r\n\t\tif sender.Checked:\r\n\t\t\tparent = sender.Parent\r\n\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\tfor i in listview.Items:\r\n\t\t\t\ti.Checked = True\r\n\t\telse:\r\n\t\t\tpass\r\n\t\t\t\r\n    def selectnone(self, sender, event):\r\n\t\tif sender.Checked:\r\n\t\t\tparent = sender.Parent\r\n\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\tfor i in listview.Items:\r\n\t\t\t\ti.Checked = False\r\n\t\telse:\r\n\t\t\tpass\t\t\r\n\r\n    def updateallnone(self, sender, event):\r\n    \ttry:\r\n    \t\tparent = sender.Parent\r\n    \t\trball = parent.GetChildAtPoint(Point(0,sender.Height + 5))\r\n    \t\trbnone = parent.GetChildAtPoint(Point(80,sender.Height + 5))\r\n    \t\tif sender.CheckedItems.Count == 0 and event.NewValue == CheckState.Unchecked:\r\n    \t\t\trbnone.Checked = False\r\n    \t\t\trball.Checked = False\r\n    \t\telif sender.CheckedItems.Count == sender.Items.Count and event.NewValue == CheckState.Unchecked:\r\n    \t\t\trball.Checked = False\r\n    \t\t\trbnone.Checked = False\r\n    \t\telif sender.CheckedItems.Count == sender.Items.Count-1 and event.NewValue == CheckState.Checked:\r\n    \t\t\trball.Checked = True\r\n    \t\t\trbnone.Checked = False\r\n    \t\telif sender.CheckedItems.Count == 1 and event.NewValue == CheckState.Unchecked:\r\n    \t\t\trball.Checked = False\r\n    \t\t\trbnone.Checked = True\t    \t\r\n    \t\telse :\r\n    \t\t\trball.Checked = False\r\n    \t\t\trbnone.Checked = False\r\n    \texcept:\r\n    \t\tpass\r\n\r\n    def zoomcenter(self, sender, event ):\r\n\t\tif event.X > 15:\t    \r\n\t\t\ttry:\r\n\t\t\t\tuiviews = uidoc.GetOpenUIViews()\r\n\t\t\t\telement = doc.GetElement(uidoc.Selection.GetElementIds()[0])\r\n\t\t\t\tactiveview = doc.ActiveView\r\n\t\t\t\tbbox = element.get_BoundingBox(activeview)\t\r\n\t\t\t\tactiveuiview = [v for v in uiviews if v.ViewId == activeview.Id][0]\r\n\t\t\t\tactiveuiview.ZoomAndCenterRectangle(bbox.Min, bbox.Max)\r\n\t\t\t\tuidoc.RefreshActiveView()\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\telse:\r\n\t\t\tpass\r\n\t\t\t\r\n\t\t\r\n    def setviewforelement(self, sender, event ):    \r\n\t\tif event.X > 15:\t    \t\t\r\n\t\t\ttry:\r\n\t\t\t\titem = sender.GetItemAt(event.X,event.Y).Text\r\n\t\t\t\telement = UnwrapElement(sender.Values[item])\r\n\t\t\t\ttry:\r\n\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(element.__class__).ToElements()])]\r\n\t\t\t\texcept:\r\n\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(FamilyInstance).ToElements()])]\r\n\t\t\t\tglobal viewindex\r\n\t\t\t\tdbView = viewsforelement[viewindex]\r\n\t\t\t\tid = [element.Id]\r\n\t\t\t\ticollection = iList[ElementId](id)\r\n\t\t\t\tuidoc.Selection.SetElementIds(icollection)\r\n\t\t\t\tif (viewindex >= len(viewsforelement) -1) or not (element.Id in uidoc.Selection.GetElementIds()):\r\n\t\t\t\t\tviewindex = 0\r\n\t\t\t\telse:\r\n\t\t\t\t\tviewindex += 1\r\n\t\t\t\tuidoc.RequestViewChange(dbView)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\telse:\t    \r\n\t\t\tpass\r\n\r\n    def CheckChildren(self, sender, event ):\r\n\t\tevNode = event.Node\t    \r\n\t\tcheckState = evNode.Checked\t\r\n\t\tfor n in event.Node.Nodes:\t   \t\r\n\t\t\tn.Checked = checkState\t\t\t\r\n\t\t\t\r\n    def ActivateOption(self, sender, event ):\r\n    \tparent = sender.Parent\r\n    \tassociatedControls = [p for p in parent.Controls if p.Name == sender.Text and p.GetType() == Panel][0]\r\n    \trestofcontrols = [p for p in parent.Controls if p.Name != sender.Text and p.GetType() == Panel]\r\n    \tif sender.Checked:\r\n    \t\tassociatedControls.Enabled = True\r\n    \t\tfor c in restofcontrols:\r\n    \t\t\tc.Enabled = False\r\n    \t\t\t\r\n    def showtooltip(self, sender, event ):\r\n    \tttp = ToolTip()\r\n    \tttp.AutoPopDelay = 10000\r\n    \tttp.SetToolTip(sender , sender.Tag)\t\r\n\r\n    def numsOnly(self, sender, event ):\r\n    \tif Char.IsDigit(event.KeyChar)==False and event.KeyChar != \".\" and Char.IsControl(event.KeyChar)==False:\r\n    \t\tevent.Handled = True\t\t\t\t\r\n\t\t\r\n\r\nclass mylistview(ListView):\r\n\r\n\tdef __init__(self):\r\n\t\tself.Values = []\r\n\r\nclass mytrackbar(TrackBar):\r\n\r\n\tdef __init__(self,startval,step):\r\n\t\tself.startval = startval\r\n\t\tself.step = step\r\n\r\nclass myDataGridView(DataGridView):\r\n\r\n\tdef __init__(self):\r\n\t\tself.startcell = {}\r\n\t\tself.endcell = {}\r\n\t\t\r\nclass mygroupbox(GroupBox):\r\n\r\n\tdef __init__(self):\r\n\t\tself.Values = []\r\n\t\t\r\nclass myTextBox(TextBox):\r\n\r\n\tdef __init__(self):\r\n\t\tself._isNum = False\t\r\n\t\t\r\n#Form initialization\r\n\r\nform = MultiTextBoxForm()\r\nform.topmost()\t\r\nform.ControlBox = False\r\nxlabel = 25\r\nxinput = 150\r\nformy = 10\r\nif IN[8] > 350:\tformwidth = IN[8]\r\nelse: formwidth = 350\r\nfields = []\r\nerror = 0\r\n\r\n#Description \r\n\r\nif IN[3] != \"\":\r\n\tdes = Label()\r\n\tdes.Font = Font(\"Arial\", 15,FontStyle.Bold)\r\n\tdes.Location = Point(xlabel,formy)\r\n\tdes.AutoSize = True\r\n\tdes.MaximumSize = Size(formwidth - 2 * xlabel,0)\r\n\tdes.Text = IN[3]\r\n\tform.Controls.Add(des)\r\n\tformy = des.Bottom + 15\r\nformheaderheight = formy\r\n\r\n#Input form\r\n\r\n# Create a container panel for all inputs\r\nbody = Panel()\r\nbody.Location = Point(0,formy)\r\nbody.Width = formwidth - 15\r\n\r\n\r\n# Process form inputs\r\nif isinstance(IN[0],list):\r\n\tinputtypes = IN[0]\r\nelse:\r\n\tinputtypes = [IN[0]]\r\n# This definition is to handle the sorting of special characters\r\ndef remove_accents(input_str):\r\n    nfkd_form = unicodedata.normalize('NFKD', input_str)\r\n    only_ascii = nfkd_form.encode('ASCII', 'ignore')\r\n    return only_ascii\t\r\n\r\n#Adding Logo \r\n#default logo in case no input\t\r\ndef getImageByName(ImName):\r\n\tdynamo = Assembly.Load('DynamoCore')\r\n\tversion = str(dynamo.GetName().Version)[:3]\t\t\r\n\tdynPath = os.getenv('APPDATA')+\"\\\\Dynamo\\Dynamo Revit\\\\\" + version \r\n\troot = et.parse(dynPath + \"\\DynamoSettings.xml\").getroot()\r\n\tlogopaths = []\r\n\tfor child in root:\r\n\t\tif child.tag == \"CustomPackageFolders\":\r\n\t\t\tfor path in child:\r\n\t\t\t\tlogopaths.append(path.text + \"\\packages\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\t\t\tlogopaths.append(path.text + \"\\Data-Shapes\\extra\\\\\" + ImName)\r\n\tdeflogopath = \"\"\r\n\tfor path in logopaths:\r\n\t\tif deflogopath == \"\":\r\n\t\t\tif os.path.isfile(path):\r\n\t\t\t\tdeflogopath = path\r\n\t\t\t\ttry:\r\n\t\t\t\t\tima = Image.FromFile(deflogopath)\r\n\t\t\t\t\tbmp = Bitmap.FromFile(deflogopath)\r\n\t\t\t\t\treturn ima,bmp\r\n\t\t\t\texcept: \r\n\t\t\t\t\tpass\r\n\t\t\t\t\t\r\ntry:\r\n\tif IN[4] != '':\r\n\t\ttry:\r\n\t\t\tima = Image.FromFile(IN[4])\r\n\t\t\tbmp = Bitmap.FromFile(IN[4])\r\n\t\texcept:\r\n\t\t\tima = IN[4]\r\n\t\t\tbmp = IN[4]\r\n\r\n\telse :\r\n\t\t_ims = getImageByName(\"a.png\")\r\n\t\tima = _ims[0]\r\n\t\tbmp = _ims[1]\r\n\t\t\r\n\tlogo = Panel()\r\n\tif IN[6] == None:\r\n\t\txlogo = 20\r\n\t\tylogo = formy+10\r\n\telse:\r\n\t\txlogo = 30\r\n\t\tylogo = formy\r\n\tsize = 110\r\n\tlogo = PictureBox()\r\n\tratio = (ima.Height)/(ima.Width)\r\n\th = float(ima.Height)\r\n\tw = float(ima.Width)\r\n\tratio = h/w\r\n\tlogo.Size = Size(size,size*ratio)\r\n\tscaledimage = Bitmap(size,size*ratio)\r\n\tgr = Graphics.FromImage(scaledimage)\r\n\tgr.DrawImage(ima,0,0,size,size*ratio)\r\n\tlogo.Image = ima\r\n\tlogo.SizeMode = PictureBoxSizeMode.Zoom\r\n\tform.Controls.Add(logo)\r\n\tlogo.Location = Point(xlogo,ylogo)\r\n\t#Setting icon \r\n\tthumb = bmp.GetThumbnailImage(64, 64, bmp.GetThumbnailImageAbort,IntPtr.Zero)\r\n\tthumb.MakeTransparent();\r\n\ticon = Icon.FromHandle(thumb.GetHicon())\r\n\tform.Icon = icon\r\n\r\nexcept :\r\n\tpass\r\n\r\ndef addinput(formbody,inputs,starty,xinput,rightmargin,labelsize,importcolorselection):\r\n\ty = starty\r\n\tfor j in inputs:\r\n\t\tlabel = Label()\r\n\t\tlabel.Location = Point(xlabel,y+4)\r\n\t\tlabel.AutoSize = True\r\n\t\tlabel.MaximumSize = Size(labelsize,0)\r\n\t\tif j.__class__.__name__ == 'listview' and j.element_count > 0:\r\n\t\t\tlabel.Text = j.inputname + '\\n(' + str(j.element_count) + ' element' + (\"s\" if j.element_count > 1 else \"\") + ')'\r\n\t\telse:\r\n\t\t\ttry:\r\n\t\t\t\tlabel.Text = j.inputname\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\tformbody.Controls.Add(label)\r\n\r\n\t\tif j.__class__.__name__ == 'dropdown':\r\n\t\t\tcb = ComboBox()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tcb.Width = formwidth - rightmargin - xinput\r\n\t\t\t\tcb.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tcb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tcb.Location = Point(xlabel,y)\r\n\t\t\tcb.Sorted = j._sorted\r\n\t\t\t[cb.Items.Add(i) for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )]\r\n\t\t\tcb.Tag = j\r\n\t\t\tif j.defaultvalue != None:\r\n\t\t\t\tdefindex = [i for i in cb.Items].index([i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )][j.defaultvalue])\r\n\t\t\t\tcb.SelectedIndex = defindex\r\n\t\t\tformbody.Controls.Add(cb)\r\n\t\t\tform.output.append(cb)\r\n\t\t\ty = label.Bottom + 25\r\n\t\t#CHARTS is a work in progress\r\n\t\t'''\r\n\t\tif j.__class__.__name__ == 'uichart':\r\n\t\t\tch = Chart()\r\n\t\t\tch.Width = formwidth - rightmargin - xlabel\r\n\t\t\tch.Location = Point(xlabel,y)\r\n\t\t\tch.Height = 600\r\n\t\t\tch.Series.Add(\"test\")\r\n\t\t\tch.Series[\"test\"].XValueMember = \"Date\"\r\n\t\t\tch.Series[\"test\"].YValueMembers = \"Percent\"\r\n\t\t\tch.Series[0].ChartType = SeriesChartType.ChartType.Bar\r\n\t\t\tdt = DataTable()\r\n\t\t\tdl = j.datalist\r\n\t\t\tfor rindex in range(rngstart,len(dl)):\r\n\t\t\t\trow = dt.NewRow()\r\n\t\t\t\tfor i in range(len(dl[rindex])):\r\n\t\t\t\t\trow[i] = dl[rindex][i]\r\n\t\t\t\tdt.Rows.Add(row)\r\n\t\t\tch.DataSource = table\r\n\t\t\tch.DataBind()\r\n\t\t\tformbody.Controls.Add(ch)\r\n\t\t\ty = ch.Bottom + 25\r\n\t\t'''\r\n\t\tif j.__class__.__name__ == 'uitreeview':\r\n\t\t\ttv = TreeView()\r\n\t\t\ttv.CheckBoxes = True\r\n\t\t\ttitles = j._hastitles\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\ttv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\ttv.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\ttv.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\ttv.Location = Point(xlabel,y)\r\n\t\t\ttv.Height = j._height\r\n\t\t\tdef treeIterationTitle(control, input):\r\n\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tcurrentNode = TreeNode(remove_accents(input[0].ToString()))\r\n\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\tinput.pop(0)\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\ttreeIterationTitle(currentNode, i)\r\n\t\t\t\telse:\r\n\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\tcontrol.Nodes.Add(item)\t\r\n\t\t\tdef treeIteration(control, input):\r\n\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\tcurrentNode.Tag = input\r\n\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\ttreeIteration(currentNode, i)\r\n\t\t\t\telse:\r\n\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\tcontrol.Nodes.Add(item)\r\n\t\t\tcurrentNode = TreeNode(\"List1\")\r\n\t\t\tcurrentNode.Expand()\t\t\t\t\r\n\t\t\tif titles:\r\n\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\ttreeIterationTitle(currentNode,dl)\t\r\n\t\t\telse:\r\n\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\ttreeIteration(currentNode,dl)\r\n\t\t\ttv.AfterCheck += form.CheckChildren\t\t\t\t\t\t\r\n\t\t\tformbody.Controls.Add(tv)\r\n\t\t\tform.output.append(tv)\r\n\t\t\ty = tv.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'listview':\r\n\t\t\tlvp = Panel()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tlvp.Location = Point(xinput,y)\r\n\t\t\t\tlvp.Width = formwidth - rightmargin - xinput\t\t\t\t\r\n\t\t\telif j.inputname == \"\" and j.element_count != 0:\r\n\t\t\t\tlvp.Location = Point(xlabel,y+35)\r\n\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\telse : \r\n\t\t\t\tlvp.Location = Point(xlabel,y)\r\n\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\t\t\t\t\r\n\t\t\tlvp.Height = j.height + 25\r\n\t\t\t#Creating the listview box\r\n\t\t\tlv = mylistview()\r\n\t\t\tlv.Scrollable = True\r\n\t\t\tdummyheader = ColumnHeader()\r\n\t\t\tdummyheader.Text = \"\"\r\n\t\t\tdummyheader.Name = \"\"\r\n\t\t\tdummyheader.Width = -2\r\n\t\t\tlv.HeaderStyle = ColumnHeaderStyle.None\r\n\t\t\tlv.Columns.Add(dummyheader)\r\n\t\t\tlv.Values = j\r\n\t\t\tif not j.display_mode:\r\n\t\t\t\tlv.CheckBoxes = True\r\n\t\t\tlv.View = vi.Details\r\n\t\t\tlvItems =  [i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'highlight' or i == 'display_mode' or i == 'element_count' or i == 'default_values' or i == 'sorted' or i == 'showId')]\r\n\t\t\tif j.sorted :\r\n\t\t\t\tlvItems = sorted(lvItems,key = remove_accents)\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t[lv.Items.Add(i) for i in lvItems]\r\n\t\t\tlv.Location = Point(0,0)\r\n\t\t\tif j.inputname != \"\" and j.element_count != 0:\r\n\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\telif j.inputname != \"\" and j.element_count == 0:\r\n\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\telse:\r\n\t\t\t\tlv.Width = formwidth - rightmargin - xlabel\r\n\t\t\tlv.Height = j.height\r\n\t\t\tlv.Scrollable = True\r\n\t\t\tlv.ItemCheck += form.updateallnone\r\n\t\t\tfor i in j.default_values:\r\n\t\t\t\tdefInd = lvItems.index([x for x in j.keys() if not (x == 'inputname' or x == 'height' or x == 'highlight' or x == 'display_mode' or x == 'element_count' or x == 'default_values' or x == 'sorted' or x == 'showId')][i])\r\n\t\t\t\tlv.Items[defInd].Checked = True\r\n\t\t\t#Click listview items to hilight and center in appropriate view\r\n\t\t\tif j.highlight :\r\n\t\t\t\tlv.MouseDown += form.setviewforelement\r\n\t\t\t\tlv.MouseUp += form.zoomcenter\r\n\t\t\t\titems = list(lv.Items)\r\n\t\t\t\tlv.FullRowSelect = True\r\n\t\t\t\tdel items[::2]\r\n\t\t\t\tfor item in items:\r\n\t\t\t\t\titem.BackColor = Color.FromArgb(230,243,255)\r\n\t\t\t#Creating select all and select none radiobuttons\r\n\t\t\tif not j.display_mode:\r\n\t\t\t\trball = RadioButton()\r\n\t\t\t\trball.Location = Point(0,(j.height)+5)\r\n\t\t\t\trball.Width = 70\r\n\t\t\t\trball.Text = \"Select all\"\r\n\t\t\t\trball.Click += form.selectall\r\n\t\t\t\trbnone = RadioButton()\r\n\t\t\t\trbnone.Location = Point(80,(j.height)+5)\r\n\t\t\t\trbnone.Width = 90\r\n\t\t\t\trbnone.Text = \"Select none\"\t\t\t\r\n\t\t\t\trbnone.Click += form.selectnone\t\t\t\r\n\t\t\t#Adding controls to panel\r\n\t\t\tlvp.Controls.Add(lv)\r\n\t\t\tif not j.display_mode:\r\n\t\t\t\tlvp.Controls.Add(rball)\r\n\t\t\t\tlvp.Controls.Add(rbnone)\r\n\t\t\tformbody.Controls.Add(lvp)\r\n\t\t\tif not j.display_mode:\r\n\t\t\t\tform.output.append(lv)\r\n\t\t\ty = lvp.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uitext':\r\n\t\t\ttb = myTextBox()\r\n\t\t\ttb.Text = j.defaultvalue\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\ttb.Width = formwidth  - rightmargin - xinput\r\n\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\ttb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\tif j._isnum:\r\n\t\t\t\ttb._isNum = True\r\n\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\tformbody.Controls.Add(tb)\r\n\t\t\tformbody.Controls.Add(label)\r\n\t\t\tform.output.append(tb)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'tableview':\r\n\t\t\t#Creating grouping panel\r\n\t\t\ttvp = Panel()\r\n\t\t\ttvp.Location = Point(xlabel,y)\r\n\t\t\ttvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\tif 50 + len(j.dataList) * 15 > 800:\r\n\t\t\t\tautoheight = 800\r\n\t\t\telse:\r\n\t\t\t\tautoheight = 50 + len(j.dataList) * 15\t\t\t\t\r\n\t\t\ttvp.Height = autoheight + 73\r\n\t\t\t#Creating title\r\n\t\t\ttitlep = Label()\r\n\t\t\ttitlep.Text = j._tabletitle\r\n\t\t\ttitlep.Width = formwidth - rightmargin - xlabel\r\n\t\t\ttitlep.BackColor = Color.FromArgb(153,180,209)\r\n\t\t\ttitlep.Font = Font(\"Arial\", 11, FontStyle.Bold)\r\n\t\t\ttitlep.TextAlign = ContentAlignment.MiddleLeft\r\n\t\t\ttitlep.BorderStyle = BorderStyle.FixedSingle\r\n\t\t\ttitlep.Location = Point(0,0)\r\n\t\t\ttvp.Controls.Add(titlep)\r\n\t\t\t#Creating data structure\r\n\t\t\tdg = myDataGridView()\r\n\t\t\t#dg.SelectionMode = DataGridViewSelectionMode.CellSelect\r\n\t\t\tdg.EnableHeadersVisualStyles = False\t\t\t\t\r\n\t\t\tdt = DataTable()\r\n\t\t\tdl = j.dataList\r\n\t\t\tfor i in range(len(dl[0])):\r\n\t\t\t\tif j._hasTitle:\r\n\t\t\t\t\tdt.Columns.Add(remove_accents(dl[0][i].ToString()))\r\n\t\t\t\t\trngstart = 1\r\n\t\t\t\telse:\r\n\t\t\t\t\tdt.Columns.Add(\"Column \" + str(i))\r\n\t\t\t\t\trngstart = 0\t\t\t\t\t\t\r\n\t\t\tfor rindex in range(rngstart,len(dl)):\r\n\t\t\t\trow = dt.NewRow()\r\n\t\t\t\tfor i in range(len(dl[rindex])):\r\n\t\t\t\t\trow[i] = dl[rindex][i]\r\n\t\t\t\tdt.Rows.Add(row)\t\t\t\t\t\t\r\n\t\t\tdg.Tag = j._hasTitle\t\t\t\t\r\n\t\t\tdg.DataSource = dt\r\n\t\t\tdg.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText\r\n\t\t\tdg.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells\r\n\t\t\tdg.Width = formwidth - rightmargin - xlabel\r\n\t\t\tdg.Location = Point(0,23)\r\n\t\t\tdg.Height = autoheight\r\n\t\t\t#Creatin Excel like drag copy functionalities\r\n\t\t\tdg.CellMouseDown += form.startCell\r\n\t\t\tdg.CellMouseUp += form.endCell\r\n\t\t\t#dg.MouseDown += form.startRowDrag\r\n\t\t\t#dg.MouseUp = \t\t\t\r\n\t\t\ttvp.Controls.Add(dg)\t\t\t\r\n\t\t\ty = tvp.Bottom + 15\r\n\t\t\t#Adding export to excel button\r\n\t\t\tex = Button()\r\n\t\t\tex.Tag = [j._hasTitle , j._openExcel , j._showinfo , j._fileInfo]\r\n\t\t\ttry:\r\n\t\t\t\texpImage = getImageByName(\"exp.png\")[0]\r\n\t\t\t\tex.BackgroundImage = expImage\r\n\t\t\texcept:\r\n\t\t\t\tex.Text = \"Export\"\t\t\t\t\t\r\n\t\t\tex.Width = 60\t\r\n\t\t\tex.Height = 30\r\n\t\t\tex.Location = Point(formwidth - 125 ,dg.Bottom + 15)\t\t\t\t\t\r\n\t\t\ttvp.Controls.Add(ex)\r\n\t\t\tex.Click += form.exportToExcel\r\n\t\t\t#Adding filepath export textbox\r\n\t\t\tfilepathtb = TextBox()\r\n\t\t\tfilepathtb.Text = \"ExportFileName\"\r\n\t\t\tfilepathtb.Location = Point(0 ,dg.Bottom + 20)\r\n\t\t\tfilepathtb.Width = formwidth - xlabel - 125\r\n\t\t\ttvp.Controls.Add(filepathtb)\r\n\t\t\t#Adding copy to clipboard button\r\n\t\t\tcb = Button()\r\n\t\t\t#Adding panel to form\r\n\t\t\tformbody.Controls.Add(tvp)\r\n\t\t\tform.output.append(dg)\r\n\t\t\ty = tvp.Bottom + 25\r\n\t\t\tform.topmost()\r\n\t\telif j.__class__.__name__ == 'uitextnote':\r\n\t\t\tgb = GroupBox()\r\n\t\t\tgb.Text = j.title\r\n\t\t\tgb.Parent = form\r\n\t\t\tgb.SendToBack()\r\n\t\t\tgb.BackColor = Color.Transparent\r\n\t\t\tgb.Location = Point(xlabel, y)\r\n\t\t\ttn = Label()\r\n\t\t\ttn.Location = Point(xlabel,18)\r\n\t\t\ttn.AutoSize = True\r\n\t\t\ttn.MaximumSize = Size(formwidth - rightmargin - 45 ,0)\r\n\t\t\ttn.Text = j.textnote\r\n\t\t\ttn.BringToFront()\r\n\t\t\tgb.Controls.Add(tn)\r\n\t\t\tgb.Size = Size(formwidth  - rightmargin - 25, tn.Bottom-tn.Top+25)  \r\n\t\t\ty = gb.Bottom + 25\r\n\t\t\tformbody.Controls.Add(gb)\r\n\t\telif j.__class__.__name__ == 'uibool':\r\n\t\t\tyn = CheckBox()\r\n\t\t\tyn.Width = formwidth - xinput - rightmargin + 10\r\n\t\t\tyn.Location = Point(xinput,y)\r\n\t\t\tyn.Text = j.booltext\r\n\t\t\tg = yn.CreateGraphics()\r\n\t\t\tsizetext = g.MeasureString(yn.Text,yn.Font, formwidth - xinput - rightmargin -20)\r\n\t\t\theighttext = sizetext.Height\r\n\t\t\tyn.Height = heighttext + 15\r\n\t\t\tyn.Checked = j.defaultvalue\r\n\t\t\tformbody.Controls.Add(yn)\r\n\t\t\tform.output.append(yn)\r\n\t\t\ty = yn.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiradio':\r\n\t\t\tyrb = 20\r\n\t\t\trbs = []\r\n\t\t\trbgroup = mygroupbox()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\trbgroup.Width = formwidth - xinput - rightmargin\r\n\t\t\t\trbgroup.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\trbgroup.Width = formwidth - xlabel - rightmargin\r\n\t\t\t\trbgroup.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\trbgroup.Tag = j\r\n\t\t\trbcounter = 0\r\n\t\t\tfor key in j.keys():\r\n\t\t\t\tif key != 'inputname' and key != 'defaultvalue':\r\n\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\trb.Text = key \r\n\t\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\t\trb.Width = formwidth - xinput - rightmargin - 35\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\trb.Width = formwidth - xlabel - rightmargin - 35\r\n\t\t\t\t\trb.Location = Point(20,yrb)\r\n\t\t\t\t\tif rbcounter == j.defaultvalue:\r\n\t\t\t\t\t\trb.Checked = True\r\n\t\t\t\t\trbgroup.Controls.Add(rb)\r\n\t\t\t\t\tg = rb.CreateGraphics()\r\n\t\t\t\t\tsizetext = g.MeasureString(key,rb.Font, formwidth - xinput - 90)\r\n\t\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\t\trb.Height = heighttext + 15\r\n\t\t\t\t\tybot = rb.Bottom\r\n\t\t\t\t\tyrb += heighttext + 12\r\n\t\t\t\t\trbcounter += 1\r\n\t\t\t\telse:\r\n\t\t\t\t\tpass\r\n\t\t\trbgroup.Height = ybot +20\r\n\t\t\t[rbgroup.Controls.Add(rb) for rb in rbs]\r\n\t\t\tformbody.Controls.Add(rbgroup)\r\n\t\t\tform.output.append(rbgroup)\r\n\t\t\ty = rbgroup.Bottom + 25\r\n\t\telif j.__class__.__name__  == 'uifilepath':\r\n\t\t\tfp = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tfp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tfp.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tfp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tfp.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\tif not j.defaultvalue == \"FilePath\":\r\n\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\tfp.MouseHover += form.showtooltip\t\r\n\t\t\tfp.Text = j.buttontext\t\t\t\t\t\r\n\t\t\tformbody.Controls.Add(fp)\r\n\t\t\tfp.Click += form.openfile\r\n\t\t\tform.output.append(fp)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uidirectorypath':\r\n\t\t\tdp = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tdp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tdp.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tdp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tdp.Location = Point(xlabel,y)\t\t\t\t\r\n\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\tdp.Text = j.buttontext\r\n\t\t\tif not j.defaultvalue == \"DirectoryPath\":\r\n\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\tdp.MouseHover += form.showtooltip\r\n\t\t\tdp.Text = j.buttontext\t\t\t\t\t\r\n\t\t\tformbody.Controls.Add(dp)\r\n\t\t\tdp.Click += form.opendirectory\r\n\t\t\tform.output.append(dp)\r\n\t\t\ty = label.Bottom + 30\r\n\t\telif j.__class__.__name__ == 'uiselectelements':\r\n\t\t\tse = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\tse.Text = j.buttontext\r\n\r\n\t\t\tformbody.Controls.Add(se)\r\n\t\t\tif j.multi == False:\r\n\t\t\t\tse.Click += form.pickobjects\r\n\t\t\telse:\r\n\t\t\t\tse.Click  += form.pickobject\r\n\t\t\tform.output.append(se)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectOrderedelements':\r\n\t\t\tse = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\tse.Text = j.buttontext\r\n\t\t\tformbody.Controls.Add(se)\r\n\t\t\tse.Click  += form.pickobjectsordered\r\n\t\t\tform.output.append(se)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectlinkedelements':\r\n\t\t\tse = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\tse.Text = j.buttontext\r\n\t\t\tformbody.Controls.Add(se)\r\n\t\t\tif j.multi == False:\r\n\t\t\t\tse.Click += form.picklinkedobjects\r\n\t\t\telse:\r\n\t\t\t\tse.Click  += form.picklinkedobject\r\n\t\t\tform.output.append(se)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectlinkedelementsofcat':\r\n\t\t\tsec = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\tsec.Text = j.buttontext\r\n\t\t\tsec.Tag = j.category\r\n\t\t\tformbody.Controls.Add(sec)\r\n\t\t\tif j.multi == False:\r\n\t\t\t\tsec.Click += form.picklinkedobjectsofcat\r\n\t\t\telse:\r\n\t\t\t\tsec.Click += form.picklinkedobjectofcat\r\n\t\t\tform.output.append(sec)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectelementsofcat':\r\n\t\t\tsec = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\tsec.Text = j.buttontext\r\n\t\t\tsec.Tag = j.category\r\n\t\t\tformbody.Controls.Add(sec)\r\n\t\t\tif j.multi == False:\r\n\t\t\t\tsec.Click += form.pickobjectsofcat\r\n\t\t\telse:\r\n\t\t\t\tsec.Click += form.pickobjectofcat\r\n\t\t\tform.output.append(sec)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectOrderedelementsofcat':\r\n\t\t\tsec = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\tsec.Text = j.buttontext\r\n\t\t\tsec.Tag = j.category\r\n\t\t\tformbody.Controls.Add(sec)\r\n\t\t\tsec.Click += form.pickobjectsofcatordered\r\n\t\t\tform.output.append(sec)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectfaces':\r\n\t\t\tsf = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tsf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tsf.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tsf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tsf.Location = Point(xlabel,y)\r\n\t\t\tsf.Text = j.buttontext\r\n\t\t\tformbody.Controls.Add(sf)\r\n\t\t\tsf.Click += form.pickfaces\r\n\t\t\tform.output.append(sf)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectpointsonface':\r\n\t\t\tspf = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tspf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tspf.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tspf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tspf.Location = Point(xlabel,y)\r\n\t\t\tspf.Text = j.buttontext\r\n\t\t\tformbody.Controls.Add(spf)\r\n\t\t\tspf.Click += form.pickpointsonface\r\n\t\t\tform.output.append(spf)\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiselectedges':\r\n\t\t\tsed = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tsed.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tsed.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tsed.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tsed.Location = Point(xlabel,y)\r\n\t\t\tsed.Text = j.buttontext\r\n\t\t\tformbody.Controls.Add(sed)\r\n\t\t\tsed.Click += form.pickedges\r\n\t\t\tform.output.append(sed)\r\n\t\t\ty = label.Bottom + 25\r\n\t\t\t\r\n\t\telif j.__class__.__name__ == 'uislider':\r\n\t\t\tgb = Panel()\r\n\t\t\tif j.defaultvalue == '':\r\n\t\t\t\tdefval = j.minimum\r\n\t\t\telse:\r\n\t\t\t\tdefval = j.defaultvalue\r\n\t\t\tsl = mytrackbar(j.minimum,j.step)\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tgb.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tgb.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tgb.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tgb.Location = Point(xlabel,y)\r\n\t\t\tgb.Height = 40\r\n\t\t\tsl.Minimum = 0\r\n\t\t\tsl.Maximum = (j.maximum-j.minimum)/j.step\r\n\t\t\tsl.Value = (defval - j.minimum) / j.step\r\n\t\t\tsl.TickFrequency = (j.maximum-j.minimum)/j.step/10\r\n\t\t\tsl.Location = Point(40,0)\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tsl.Width = formwidth - xinput - rightmargin - 35\r\n\t\t\telse:\r\n\t\t\t\tsl.Width = formwidth - xlabel -rightmargin - 35\r\n\t\t\tgb.Controls.Add(sl)\r\n\t\t\tform.output.append(sl)\r\n\t\t\tdisplabel = Label()\r\n\t\t\tdisplabel.Width = 50\r\n\t\t\tdisplabel.Location = Point(0,5)\r\n\t\t\tdisplabel.Text = str(defval)\r\n\t\t\tdisplabel.BringToFront()\r\n\t\t\tgb.Controls.Add(displabel)\t\r\n\t\t\tformbody.Controls.Add(gb)\t\t\t\r\n\t\t\tsl.Scroll += form.scroll\r\n\t\t\ty = label.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiimage':\r\n\t\t\tpic = Image.FromFile(j.image)\r\n\t\t\tim = PictureBox()\r\n\t\t\tif j.showborder:\r\n\t\t\t\tim.BorderStyle = BorderStyle.Fixed3D\r\n\t\t\telse:\r\n\t\t\t\tim.BorderStyle = BorderStyle.None\r\n\t\t\tratio = (pic.Height)/(pic.Width)\r\n\t\t\th = float(pic.Height)\r\n\t\t\tw = float(pic.Width)\r\n\t\t\tratio = h/w\r\n\t\t\timage_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\tim.Size = Size(image_maxsize,image_maxsize*ratio)\r\n\t\t\tscaledimage = Bitmap(image_maxsize,image_maxsize*ratio)\r\n\t\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\t\tgr.DrawImage(pic,0,0,image_maxsize,image_maxsize*ratio)\r\n\t\t\tim.Image = pic\r\n\t\t\tim.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\t\tformbody.Controls.Add(im)\r\n\t\t\tim.Location = Point(25,y+25)\r\n\t\t\ty = im.Bottom + 25\r\n\t\r\n\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 0:\r\n\t\t\tcp = Button()\r\n\t\t\tif j.inputname != \"\":\r\n\t\t\t\tcp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\tcp.Location = Point(xinput,y)\r\n\t\t\telse:\r\n\t\t\t\tcp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\tcp.Location = Point(xlabel,y)\r\n\t\t\tcp.Text = j.buttontext\r\n\t\t\tformbody.Controls.Add(cp)\r\n\t\t\tcp.Click += form.colorpicker\r\n\t\t\tform.output.append(cp)\r\n\t\t\ty = label.Bottom + 25\t\t\t\r\n\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 1:\r\n\t\t\timportcolorselection = 2\r\n\t\telif j.__class__.__name__ == 'uigroup':\r\n\t\t\tgrouppanel = GroupBox()\r\n\t\t\tgrouppanel.Text = j.groupname\r\n\t\t\tgrouppanel.Location = Point(xlabel,y)\r\n\t\t\tgrouppanel.Width = formwidth - 65\r\n\t\t\t#recursive implementation of the definition to process grouped inputs\r\n\t\t\taddinput(grouppanel,j.inputgroup,25,xinput-25,80,90,importcolorselection)\r\n\t\t\tformbody.Controls.Add(grouppanel)\r\n\t\t\ty = grouppanel.Bottom + 25\r\n\t\telif j.__class__.__name__ == 'uiconditional':\r\n\t\t\tgrouppanelcond = GroupBox()\r\n\t\t\tgrouppanelcond.Location = Point(xlabel,y)\r\n\t\t\tgrouppanelcond.Width = formwidth - 65\t\t\t\t\r\n\t\t\t#recursive implementation of the definition to process conditional groups of inputs\r\n\t\t\tpanlist = []\r\n\t\t\typ = 25\r\n\t\t\txrb = 25\r\n\t\t\tfor i,d in zip(j._Conditions,j._GroupedInputs):\t\r\n\t\t\t\trb = RadioButton()\r\n\t\t\t\trb.CheckedChanged += form.ActivateOption\r\n\t\t\t\trb.Text = i\r\n\t\t\t\trb.Location\t= Point(xrb,10)\r\n\t\t\t\trb.Width = 95\t\t\t\t\t\r\n\t\t\t\tgrouppanelcond.Controls.Add(rb)\t\t\t\t\r\n\t\t\t\tcondition_pannel = Panel()\r\n\t\t\t\tcondition_pannel.Name = i\r\n\t\t\t\tcondition_pannel.Top = yp\r\n\t\t\t\tcondition_pannel.Width = formwidth - 65\r\n\t\t\t\tcondition_pannel.BackColor = Color.Transparent\r\n\t\t\t\tcondition_pannel.BringToFront()\t\t\t\t\t\r\n\t\t\t\taddinput(condition_pannel,d,25,xinput-25,80,90,importcolorselection)\r\n\t\t\t\tpanlist.append(condition_pannel)\r\n\t\t\t\typ = condition_pannel.Bottom - 25\r\n\t\t\t\txrb += 100\r\n\t\t\tfor pan in panlist:\r\n\t\t\t\tgrouppanelcond.Controls.Add(pan)\r\n\t\t\tgrouppanelcond.Height = sum([p.Height for p in panlist]) - (len(panlist)-2)*25\r\n\t\t\tgrouppanelcond.BackColor = Color.Transparent\t\t\t\t\r\n\t\t\tformbody.Controls.Add(grouppanelcond)\r\n\t\t\ty = grouppanelcond.Bottom + 25\t\t\r\n\t\t\t\t\t\t\t\r\n\t\tformbody.Height = y\r\n\r\n\r\n\r\n# process input lists \r\naddinput(body,inputtypes,0,xinput,40,120,importcolorselection)\r\n\r\n#add the formbody panel to the form\r\nform.Controls.Add(body)\t\t\r\n\r\n\r\nif IN[6] != None:\r\n\tif IN[8] > 400:\r\n\t\tformy += 50\r\n\t\txinput = 270\r\n\telse:\r\n\t\tformy = logo.Bottom + 20\r\nelse:\r\n\tformy += 50\r\n\r\n\r\n\r\n#Adding validation button\r\n\r\nbutton = Button()\r\nbutton.Text = IN[1]\r\nbutton.Width = formwidth - xinput - 40\r\nbutton.Location = Point (xinput,formy)\r\nbutton.Click += form.setclose\r\nform.Controls.Add(button)\r\nform.MaximizeBox = False\r\nform.MinimizeBox = False\r\nform.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\r\n#Adding Cancel button\r\nif IN[6] != None:\r\n\tcancelbutton = Button()\r\n\tcancelbutton.Text = IN[6]\r\n\tcancelbutton.Width = 120\r\n\tcancelbutton.Name = \"Cancel\"\r\n\tcancelbutton.Location = Point (xinput -120 ,formy)\r\n\tcancelbutton.Click += form.setclose\r\n\tform.Controls.Add(cancelbutton)\r\n\tform.CancelButton = cancelbutton\r\n\r\n#Adding link to help\r\n\r\nif IN[5] != None :\r\n\thelplink = LinkLabel()\r\n\thelplink.Text = \"Help\"\r\n\thelplink.Tag = IN[5]\r\n\thelplink.Click += form.openurl\r\n\thelplink.Location = Point(formwidth - 65,formy+30)\r\n\tform.Controls.Add(helplink)\r\nelse:\r\n\tpass\t\r\n\t\t\r\nform.ShowIcon = True\r\nform.Width = formwidth\r\nform.Height = formy + 120\r\nformfooterheight = form.Height - formheaderheight\r\n\r\n# Make formbody scrollable\r\n\r\n# if the form is longer than its maximum height, do the following:\r\n# modify the form height\r\n# make the formbody panel scrollable\r\nif form.Height + body.Height > IN[7] and IN[7] > 0:\r\n\tformbody_calculatedheight = IN[7] - form.Height\r\n\t# make sure the formbody is at least 100 px high\r\n\tif formbody_calculatedheight < 100: formbody_calculatedheight = 100\r\n\tbody.Height = formbody_calculatedheight\r\n\tform.Height = form.Height + formbody_calculatedheight\r\n\t# this (and apparently only this) will implement a vertical AutoScroll *only*\r\n\t# http://stackoverflow.com/a/28583501\r\n\tbody.HorizontalScroll.Maximum = 0\r\n\tbody.AutoScroll = False\r\n\tbody.VerticalScroll.Visible = False\r\n\tbody.AutoScroll = True\r\n\tbody.BorderStyle = BorderStyle.Fixed3D\r\nelse:\r\n\tform.Height = form.Height + body.Height\r\n# Move footer elements\r\nlogo.Location = Point(logo.Location.X, logo.Location.Y + body.Height)\r\nbutton.Location = Point(button.Location.X, button.Location.Y + body.Height)\r\nif IN[6] != None: cancelbutton.Location = Point(cancelbutton.Location.X, cancelbutton.Location.Y + body.Height)\r\nif IN[5] != None: helplink.Location = Point(helplink.Location.X, helplink.Location.Y + body.Height)\r\n\r\n#Positionning the form at top left of current view\r\nuiviews = uidoc.GetOpenUIViews()\r\nif doc.ActiveView.IsValidType(doc.ActiveView.GetTypeId()):\r\n\tactiveviewid = doc.ActiveView.Id\r\n\tactiveUIView = [v for v in uiviews if v.ViewId == activeviewid][0]\r\nelse:\r\n\tactiveUIView = uiviews[0]\r\nrect = activeUIView.GetWindowRectangle()\r\nform.StartPosition = FormStartPosition.Manual\r\nform.Location = Point(rect.Left-7,rect.Top)\r\n\t\r\nif IN[2]:\r\n\tif importcolorselection != 2:\r\n\t\tApplication.Run(form)\r\n\t\tresult = form.values\r\n\t\tOUT = result,True, form.cancelled\r\n\telse:\r\n\t\tOUT = ['ColorSelection input is only available With Revit 2017'] , False, False\r\nelse :\r\n\tOUT = ['Set toggle to true!'] , False, False\r\nexcept:\r\nimport traceback\r\nOUT = traceback.format_exc() , \"error\", \"error\"\r\n",
      "VariableInputPorts": true,
      "Id": "517743d810574b789822373a8e2d9cad",
      "Inputs": [
        {
          "Id": "9f944ed1751e43ce9236218b101436e1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "977e3c0621304124b0022fb097e1f933",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 48,
      "NodeType": "ExtensionNode",
      "Id": "cb180849911849588e0c63f767922b70",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f13d81e207864d9880c0cee41158518d",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.Current",
      "Id": "00eb6fffcc39421bb54b5fdc8615e5ca",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2b855f27a8a64427ad6ff9f120544ba1",
          "Name": "Document",
          "Description": "Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the current document\n\nDocument.Current: Document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Application.Document.ActiveView",
      "Id": "ce05a07aa8134a68abfdb18f24568d39",
      "Inputs": [
        {
          "Id": "2ded76460f8746039cdde786030a7bb5",
          "Name": "document",
          "Description": "Revit.Application.Document",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5f4bea8e653046cdaee5ad0d1a84ae73",
          "Name": "View",
          "Description": "View",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the active view for the document\n\nDocument.ActiveView: View"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "97437ae91f084d4e971ebf3169359a57",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2ed11ce5d15949eba157f630777255e7",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "9405103226574283a96d22e1010c74e8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b0b9591d91de40989512fdfd4a76a57c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2015, Konrad K Sobon\n# @arch_laboratory, http://archi-lab.net\n\nimport clr\n\nclr.AddReference(\"System.Windows.Forms\")\nfrom System.Windows.Forms import Application, Button, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\nfrom System.Windows.Forms import Form as winForm\n\nclr.AddReference(\"System.Drawing\")\nfrom System.Drawing import Point as dPoint\nfrom System.Drawing import Size as dSize\n\nclr.AddReference(\"System\")\nfrom System import EventHandler\n\n\nclr.AddReference(\"RevitAPIUI\")\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent\n\n\n# Import RevitAPI\nclr.AddReference(\"RevitAPI\")\n#from Autodesk.Revit.DB import *\nfrom Autodesk.Revit.DB import ElementId, TagMode, TagOrientation, Color, OverrideGraphicSettings, BuiltInParameter, TextNote\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\n\n\n\n# Import Element wrapper extension methods\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.Elements)\n\n# Import geometry conversion extension methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\n# Import DocumentManager and TransactionManager\nclr.AddReference(\"RevitServices\")\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\n\ndoc = DocumentManager.Instance.CurrentDBDocument\n\n#The inputs to this node will be stored as a list in the IN variable.\ndataEnteringNode = IN\n\nlocationPts = UnwrapElement(IN[0])\ntagType = UnwrapElement(IN[1])\nelements = UnwrapElement(IN[2])\n\ncolors = IN[4]\n\t\nRunIt = IN[5]\n\nviews = UnwrapElement(IN[3])\n\nnewMarksList = IN[6]\n\noriginalMarksList = IN[7]\n\n\n\nlabel1 = Label();\nbutton1 = Button();\nbutton2 = Button();\nbutton3 = Button();\nbutton4 = Button();\n\n# A simple WPF form used to call the ExternalEvent\nclass ModelessForm(winForm):\n\t\"\"\"\n\tSimple modeless form sample\n\t\"\"\"\n\tdef __init__(self):\n\t\tself.Text = 'Place Beam Tags'\n\t\tself.output = []\n\t\tself.values = []\n\t\tself.cancelled = False\n\t\tself.tagType = None\n\t\tself.locationPts = []\n\t\tself.result = ''\n\t\tself.elements = []\n\t\tself.view = None\n\t\tself.colors = []\n\t\tself.newMarks = []\n\t\tself.originalMarks = []\n\n\tdef setclose(self, sender, event):\n\t\tcbindexread = 0\n\t\tResetOverrideColor(self.elements,self.view)\n\t\tDeleteNewTags(self.values)\n\t\tif sender.Name != \"Cancel\":\n\t\t\tself.values = \"Accepted\"\n\t\telse:\n\t\t\tself.values = \"Cancelled\"\n\t\t\tself.cancelled = True\n\t\tself.Close()\n\t\n\tdef reset(self, sender, event):\n\t\tpass\n\t\t\n\tdef PlaceTags(self, sender, event):\n\t\tsetMark(self.elements, self.newMarks)\n\t\ttagTypeId = self.tagType.Id\n\t\terrorReport = None\n\t\ttags = []\n\t\ttry:\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\tfor i, j in zip(elements, self.locationPts):\n\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\ttag = doc.Create.NewTag(self.view, i, False, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, location)\n\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\ttags.append(tag)\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tself.values = tags\n\t\t\t#self.Close()\n\t\texcept:\n\t\t\tself.result = \"RunIt is set to False.\"\n\t\t\t\t\n\t\t\t\t\t\n\tdef RefreshTags(self, sender, event):\n\t\t[Refresh(t) for t in self.values]\n\t\t\n\tdef ColorOverride(self, sender, event):\n\t\tself.result = OverrideColor(self.elements, self.colors, self.view)\n\t\t#self.view.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE ).Set( 1 )\n\t\t#self.view.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE ).Set( 4 )\n\tdef AddTextNotes(self, sender, event):\n\t\tnotes = []\n\t\tnotes.append(PlaceTextNotes(self.locationPts, self.newMarks, self.view))\n\t\tself.values = notes\n\t\t\n\t\t\n\tdef OriginalMark(self, sender, event):\n\t\tsetMark(self.elements, self.originalMarks)\n\t\tResetOverrideColor(self.elements,self.view)\n\t\tDeleteNewTags(self.values)\n\t\tself.values = \"Cancelled\"\n\t\tself.cancelled = True\n\t\tself.Close()\n\t\n\n# Let's launch our beautiful and useful form !\nform = ModelessForm()\nform.TopMost = True\nform.Height = 150\nform.Width = 380\nform.StartPosition = FormStartPosition.CenterScreen\n\nform.tagType = tagType\nform.locationPts = locationPts\nform.elements = elements\nform.view = views\nform.colors = colors\nform.newMarks = newMarksList\nform.originalMarks = originalMarksList\n\n\nlabel1.Location = dPoint(12, 75);\nlabel1.Name = \"label1\";\nlabel1.Size = dSize(300, 63);\nlabel1.TabIndex = 2;\nlabel1.Text = \"You are updating the beam tags.\" +\"\\n\" + \"Click OK to accept the changes.\";\nlabel1.UseCompatibleTextRendering = True;\n\n\nbutton1.Location = dPoint(10, 20);\nbutton1.Name = \"button1\";\nbutton1.Size = dSize(88, 32);\nbutton1.TabIndex = 0;\nbutton1.Text = \"Place Tags\";\nbutton1.UseCompatibleTextRendering = True;\nbutton1.UseVisualStyleBackColor = True;\nbutton1.Click += EventHandler(form.PlaceTags);\n\n\nbutton2.Location = dPoint(250, 70);\nbutton2.Name = \"Cancel\";\nbutton2.Size = dSize(88, 32);\nbutton2.TabIndex = 1;\nbutton2.Text = \"Undo Changes\";\nbutton2.UseCompatibleTextRendering = True;\nbutton2.UseVisualStyleBackColor = True;\nbutton2.Click += EventHandler(form.OriginalMark);\n\n\nbutton3.Location = dPoint(134, 20);\nbutton3.Name = \"Override\";\nbutton3.Size = dSize(88, 32);\nbutton3.TabIndex = 1;\nbutton3.Text = \"Override Color\";\nbutton3.UseCompatibleTextRendering = True;\nbutton3.UseVisualStyleBackColor = True;\nbutton3.Click += EventHandler(form.ColorOverride);\n\n\nbutton4.Location = dPoint(250, 20);\nbutton4.Name = \"OK\";\nbutton4.Size = dSize(88, 32);\nbutton4.TabIndex = 1;\nbutton4.Text = \"OK\";\nbutton4.UseCompatibleTextRendering = True;\nbutton4.UseVisualStyleBackColor = True;\nbutton4.Click += EventHandler(form.setclose);\n\n\n\nform.Controls.Add(button1);\nform.Controls.Add(button2);\nform.Controls.Add(button3);\nform.Controls.Add(button4);\nform.Controls.Add(label1);\n\n\n#Application.Run(form)\n#result = form.values\n\n\ndef toRvtPoint(point):\n\treturn point.ToXyz()\n\n\n\ndef Refresh(element):\n\telement.Pinned = True\n\telement.Pinned = False\n\n\n\n\ndef OverrideColor(elements, colors, v):\n\tbooleans = []\n\toverride = OverrideGraphicSettings()\n\toverride.SetProjectionFillPatternId(ElementId(19))\n\tTransactionManager.Instance.EnsureInTransaction(doc)\n\tfor item,c in zip(elements,colors):\n\t\t#override.SetProjectionFillColor(Color(color.Red,color.Green, color.Blue))\n\t\toverride.SetProjectionFillColor(c)\n\t\ttry:\n\t\t\tv.SetElementOverrides(item.Id, override)\n\t\t\tbooleans.append(True)\n\t\texcept: booleans.append(False)\n\t#v.get_Parameter(BuiltInParameter.MODEL_GRAPHICS_STYLE ).Set( 1 )\n\tTransactionManager.Instance.TransactionTaskDone()\n\treturn booleans\n\t\n\ndef ResetOverrideColor(elements, view):\n\tbooleans = []\n\toverride = OverrideGraphicSettings()\n\tTransactionManager.Instance.EnsureInTransaction(doc)\n\tfor item in elements:\n\t\ttry:\n\t\t\tview.SetElementOverrides(item.Id, override)\n\t\t\tbooleans.append(True)\n\t\texcept: booleans.append(False)\n\tTransactionManager.Instance.TransactionTaskDone()\n\treturn booleans\n\n\n\ndef PlaceTextNotes(points, text, view):\n\ttexts = []\n\tTransactionManager.Instance.EnsureInTransaction(doc)\n\tfor p,t in zip(points,text):\n\t\ttexts.append(TextNote.Create(doc, view.Id, p.ToXyz(), t, ElementId(1739)))\n\tTransactionManager.Instance.TransactionTaskDone()\n\treturn texts\n\ndef setMark(elements, values):\n\tTransactionManager.Instance.EnsureInTransaction(doc)\n\tfor ele,v in zip(elements,values):\n\t\tp = ele.LookupParameter(\"Mark\")\n\t\tp.Set(v)\n\tTransactionManager.Instance.TransactionTaskDone()\n\ndef close(form):\n\tform.Close()\n\ndef DeleteNewTags(values):\n\tif len(values) > 0:\n\t\tfor v in values:\n\t\t\ttry:\n\t\t\t\tdoc.Delete(v.Id)\n\t\t\texcept:\n\t\t\t\tself.result = \"oh-ho\"\n\t\nApplication.Run(form)\n\n#Assign your output to the OUT variable\n\nOUT = form.values, form.result\n\t\n#form = ModelessForm()\n",
      "VariableInputPorts": true,
      "Id": "28d68ee6037b42f8ac24bef4663d4ab2",
      "Inputs": [
        {
          "Id": "4e107b65d25f400c959a0fa280dd75fb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a37935cc33e1495cbd090c6a86b7a2e7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b472b92fec440ebae8efc1603267e9a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "38ec1797277b40e98686a3c22d7b67cd",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "01862abbf961461e83b957816479d462",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a28415e04e76460fb5240e41329f46ac",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "040ff76eba2c41fd9cc11b8e42d5a344",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eeed44ced690458cac30abbf140b4ceb",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d83ee68ce7ae43ab85f65a0cf00333f0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "newtags;",
      "Id": "1c75d81ddc144968b940fa82a1d44393",
      "Inputs": [
        {
          "Id": "10f3bc17a9d543429b179535f7c1fbf8",
          "Name": "newtags",
          "Description": "newtags",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "06eab1d1c2da4b72ba3263ac463a1d81",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "originalMarks;",
      "Id": "1d452f5b3dd14fc1a9bc11b3d3f3286a",
      "Inputs": [
        {
          "Id": "5bb9a7a87cc84d98850bb805651168f2",
          "Name": "originalMarks",
          "Description": "originalMarks",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "81ad33b715f74454a16857b521a6baaf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "c8bb2041-c588-4c54-9ca8-826bcdd27d11-00000acb",
        "c8bb2041-c588-4c54-9ca8-826bcdd27d11-00000acd",
        "c8bb2041-c588-4c54-9ca8-826bcdd27d11-00000acf"
      ],
      "Id": "6872fbeaa5ad461d974f9d6c4a8a44b0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1e9ddba64fb431ab82bfe92d5678029",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.StructuralFraming.Location",
      "Id": "74daacc9e6a6468896bfcd3f51188036",
      "Inputs": [
        {
          "Id": "702a31432dee43d89140a4ce48a9a514",
          "Name": "structuralFraming",
          "Description": "Revit.Elements.StructuralFraming",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9b7fe232f58f4b1083d9ef33dabd9e56",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets curve geometry from location of the specified structural element\n\nStructuralFraming.Location: Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.PointAtParameter@double",
      "Id": "bd936077c3f8404bbbe0f73ca4f4978f",
      "Inputs": [
        {
          "Id": "42ab67e60459426e8a035fcf321555c7",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e368a1044cf14e1787c3e422410c60f4",
          "Name": "param",
          "Description": "The parameter at which to evaluate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6d7e806c02bc4343a510bc2162b00227",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get a Point on the Curve at a specified parameter between StartParameter() and EndParameter()\n\nCurve.PointAtParameter (param: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0.5;",
      "Id": "1ca4560418984e5fa53ea55301857d14",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d72730be4ba44b95a50b813b9bcd5c80",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import *\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\n\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nelements = UnwrapElement(IN[0])\r\nview = doc.ActiveView\r\n\r\n\"\"\"\r\n# Simple function we want to run\r\ndef delete_elements():\r\n    t = Transaction(doc, \"Failing script\")\r\n    t.Start()\r\n    for elid in uidoc.Selection.GetElementIds():\r\n        doc.Delete(elid)\r\n    t.Commit()\r\n\"\"\"\r\n\r\nelements = UnwrapElement(IN[0])\r\n\r\ndef delete_elements():\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\tfor e in elements:\r\n\t\tp = e.LookupParameter(\"Comments\")\r\n\t\tp.Set(p.AsString() + \"(\" + \"ciao\" + \")\")\r\n\tt.Commit()\r\n\treturn \"done\"\r\n\r\n\r\n\r\n\r\ndef OverrideColor(elements, v):\r\n\tbooleans = []\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\tfor item in elements:\r\n\t\toverride.SetProjectionFillColor(Color(255,0,0))\r\n\t\ttry:\r\n\t\t\tv.SetElementOverrides(item.Id, override)\r\n\t\t\tbooleans.append(True)\r\n\t\texcept: booleans.append(False)\r\n\tt.Commit()\r\n\treturn booleans\r\n\t\r\n\r\nOUT = delete_elements()",
      "VariableInputPorts": true,
      "Id": "0fe35beb7d02433aa3e5cae9ab720440",
      "Inputs": [
        {
          "Id": "692b8726a10c4b7b8034e8cfa2e34e78",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "457197680a5b4acc8bcdbc8b38c52480",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"a1\",\"a2\",\"a3\"];",
      "Id": "6dd0d1287cbf4aa6b582f5d8916d4bc1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "94f661c0cbcd45aab612ff25d13fe9b0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "efac351f-19a7-45da-9eb2-dcb747d01b44-0000831e"
      ],
      "Id": "6dbd741d36ea4f90863f7d0b909857d8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "02e2a0de04db417896e21d6e833c1012",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import *\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\n\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nelementsDynamo = UnwrapElement(IN[4])\r\nview = doc.ActiveView\r\nnewTags = IN[2]\r\n\"\"\"\r\n# Simple function we want to run\r\ndef delete_elements():\r\n    t = Transaction(doc, \"Failing script\")\r\n    t.Start()\r\n    for elid in uidoc.Selection.GetElementIds():\r\n        doc.Delete(elid)\r\n    t.Commit()\r\n\"\"\"\r\n\r\ndef delete_elements():\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\telements = uidoc.Selection.GetElementIds()\r\n\tfor e,ta in zip(elements,newTags):\r\n\t\tp = doc.GetElement(e).LookupParameter(\"Comments\")\r\n\t\tp.Set(p.AsString() + \"(\" + ta + \")\")\r\n\tt.Commit()\r\n\treturn \"done\"\r\n\r\n\r\ndef OverrideColor(elements, v):\r\n\tbooleans = []\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\tfor item in elements:\r\n\t\toverride.SetProjectionFillColor(Color(255,0,0))\r\n\t\ttry:\r\n\t\t\tv.SetElementOverrides(item.Id, override)\r\n\t\t\tbooleans.append(True)\r\n\t\texcept: booleans.append(False)\r\n\tt.Commit()\r\n\treturn booleans\r\n\r\n\r\ndef close(form):\r\n\tform.Close()\r\n\r\n\r\ndef Button2Click(sender, e):\r\n\tform.Close()\r\n\tOUT = 1\r\n\t\r\n\r\n\r\nclass CustomizableEvent:\r\n\t def __init__(self):\r\n\t\t self.function_or_method = None\r\n\t\t self.args = ()\r\n\t\t self.kwargs = {}\r\n\t def raised_method(self):\r\n\t \tself.function_or_method(*self.args, **self.kwargs)\r\n\t def raise_event(self, function_or_method, *args, **kwargs):\r\n\t\t self.args = args\r\n\t\t self.kwargs = kwargs\r\n\t\t self.function_or_method = function_or_method\r\n\t\t custom_event.Raise()\r\n\r\ncustomizable_event = CustomizableEvent()\r\n\r\n# Create a subclass of IExternalEventHandler\r\nclass CustomHandler(IExternalEventHandler):\r\n    \"\"\"Input : function or method. Execute input in a IExternalEventHandler\"\"\"\r\n\r\n    # Execute method run in Revit API environment.\r\n    # noinspection PyPep8Naming, PyUnusedLocal\r\n    def Execute(self, application):\r\n        try:\r\n            customizable_event.raised_method()\r\n        except InvalidOperationException:\r\n            # If you don't catch this exeption Revit may crash.\r\n            print(\"InvalidOperationException catched\")\r\n\r\n    # noinspection PyMethodMayBeStatic, PyPep8Naming\r\n    def GetName(self):\r\n        return \"Execute an function or method in a IExternalHandler\"\r\n\r\n# Create an handler instance and his associated ExternalEvent\r\ncustom_handler = CustomHandler()\r\ncustom_event = ExternalEvent.Create(custom_handler)\r\n\r\n\r\n\r\nlabel1 = Label();\r\nbutton1 = Button();\r\nbutton2 = Button();\r\n\r\n# A simple WPF form used to call the ExternalEvent\r\nclass ModelessForm(Form):\r\n\t\"\"\"\r\n\tSimple modeless form sample\r\n\t\"\"\"\r\n\tdef __init__(self):\r\n\t\tself.Text = 'Place Beam Tags'\r\n\t\tself.elements = []\r\n\t\tself.view = None\r\n\t\tself.Show()\r\n\t\r\n\tdef delete_click(self, sender, e):\r\n\t\t# This Raise() method launch a signal to Revit to tell him you want to do something in the API context\r\n\t\tCustomizableEvent.raise_event(delete_elements)\r\n\r\n# Let's launch our beautiful and useful form !\r\nform = ModelessForm()\r\nform.TopMost = True\r\nform.view = doc.ActiveView\r\n#form.elements = elementsDynamo\r\n\r\n\r\n\r\nlabel1.Location = Point(12, 9);\r\nlabel1.Name = \"label1\";\r\nlabel1.Size = Size(219, 63);\r\nlabel1.TabIndex = 2;\r\nlabel1.Text = \"You are updating the beam tags. Click OK to accept the changes or Cancel to discard them\";\r\nlabel1.UseCompatibleTextRendering = True;\r\n\r\n\r\nbutton1.Location = Point(10, 75);\r\nbutton1.Name = \"button1\";\r\nbutton1.Size = Size(88, 32);\r\nbutton1.TabIndex = 0;\r\nbutton1.Text = \"OK\";\r\nbutton1.UseCompatibleTextRendering = True;\r\nbutton1.UseVisualStyleBackColor = True;\r\nbutton1.Click += EventHandler(form.delete_click);\r\n\r\nbutton2.DialogResult = DialogResult.Cancel;\r\nbutton2.Location = Point(134, 75);\r\nbutton2.Name = \"button2\";\r\nbutton2.Size = Size(88, 32);\r\nbutton2.TabIndex = 1;\r\nbutton2.Text = \"Cancel\";\r\nbutton2.UseCompatibleTextRendering = True;\r\nbutton2.UseVisualStyleBackColor = True;\r\nbutton2.Click += EventHandler(Button2Click);\r\n\r\n\r\n\r\nClientSize = Size(125, 100);\r\nform.Controls.Add(button1);\r\nform.Controls.Add(button2);\r\nform.Controls.Add(label1);\r\n\r\n#result = form.values\r\n\r\n\r\n\r\nOUT = 0",
      "VariableInputPorts": true,
      "Id": "5b8ff0cac24a48179bc8c4967dab2473",
      "Inputs": [
        {
          "Id": "d24f6600fb744f68b6c0164afe986be3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "487a2c4571eb44488c7584315ecf461f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "35b16c55a37046438d3e0b08189ffba3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e185751808ca418dabb2e63863dad356",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "09ed41b452e6409c8159766d5789212b",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3ff1e9135b414133b3824cbee4d49bf4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "d77ff1fb1abf4998b44e37ccf5327776",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "712cedd7ed1b4915b65df68cb17ce385",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference(\"System.Windows.Forms\")\r\nfrom System.Windows.Forms import Application, Button, Form, Label, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition\r\n\r\nclr.AddReference(\"System.Drawing\")\r\nfrom System.Drawing import *\r\n\r\nclr.AddReference(\"System\")\r\nfrom System import EventHandler\r\n\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import IExternalEventHandler, ExternalEvent, TaskDialog\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Transaction, OverrideGraphicSettings, ElementId, Color\r\n# noinspection PyUnresolvedReferences\r\nfrom Autodesk.Revit.Exceptions import InvalidOperationException\r\n\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n\r\nglobal result\r\n\r\n\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nelementsDynamo = UnwrapElement(IN[4])\r\nview = doc.ActiveView\r\nnewTags = IN[2]\r\n\"\"\"\r\n# Simple function we want to run\r\ndef delete_elements():\r\n    t = Transaction(doc, \"Failing script\")\r\n    t.Start()\r\n    for elid in uidoc.Selection.GetElementIds():\r\n        doc.Delete(elid)\r\n    t.Commit()\r\n\"\"\"\r\ndef test(nothing):\r\n\telements = uidoc.Selection.GetElementIds()\r\n\tTaskDialog.Show(\"result\", str(elements[0]))\r\n\r\n\r\ndef delete_elements():\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\telements = uidoc.Selection.GetElementIds()\r\n\tfor e,ta in zip(elements,newTags):\r\n\t\tp = doc.GetElement(e).LookupParameter(\"Comments\")\r\n\t\tp.Set(p.AsString() + \"(\" + ta + \")\")\r\n\tt.Commit()\r\n\treturn \"done\"\r\n\r\n\r\ndef OverrideColor(elements, v):\r\n\tbooleans = []\r\n\toverride = OverrideGraphicSettings()\r\n\toverride.SetProjectionFillPatternId(ElementId(19))\r\n\tt = Transaction(doc, \"Failing script\")\r\n\tt.Start()\r\n\tfor item in elements:\r\n\t\toverride.SetProjectionFillColor(Color(255,0,0))\r\n\t\ttry:\r\n\t\t\tv.SetElementOverrides(item.Id, override)\r\n\t\t\tbooleans.append(True)\r\n\t\texcept: booleans.append(False)\r\n\tt.Commit()\r\n\treturn booleans\r\n\r\n\r\ndef close(form):\r\n\tform.Close()\r\n\r\n\r\ndef Button2Click(sender, e):\r\n\tform.Close()\r\n\tOUT = 1\r\n\t\r\n\r\nclass CustomizableEvent:\r\n    def __init__(self):\r\n        self.function_or_method = None\r\n        self.args = ()\r\n        self.kwargs = {}\r\n\r\n    def raised_method(self):\r\n        self.function_or_method(*self.args, **self.kwargs)\r\n\r\n    def raise_event(self, function_or_method, *args, **kwargs):\r\n        self.args = args\r\n        self.kwargs = kwargs\r\n        self.function_or_method = function_or_method\r\n        custom_event.Raise()\r\n\r\ncustomizable_event = CustomizableEvent()\r\n\r\n# Create a subclass of IExternalEventHandler\r\nclass CustomHandler(IExternalEventHandler):\r\n    def Execute(self, application):\r\n        try:\r\n            customizable_event.raised_method()\r\n        except InvalidOperationException:\r\n            # If you don't catch this exeption Revit may crash.\r\n            print(\"InvalidOperationException catched\")\r\n\r\n    # noinspection PyMethodMayBeStatic, PyPep8Naming\r\n    def GetName(self):\r\n        return \"Execute an function or method in a IExternalHandler\"\r\n\r\n\r\n# Create an handler instance and his associated ExternalEvent\r\ncustom_handler = CustomHandler()\r\ncustom_event = ExternalEvent.Create(custom_handler)\r\n\r\n\r\nlabel1 = Label();\r\nbutton1 = Button();\r\nbutton2 = Button();\r\nbutton3 = Button();\r\n\r\n# A simple WPF form used to call the ExternalEvent\r\nclass ModelessForm(Form):\r\n\t\"\"\"\r\n\tSimple modeless form sample\r\n\t\"\"\"\r\n\tdef __init__(self):\r\n\t\tself.Text = 'Place Beam Tags'\r\n\t\tself.elements = []\r\n\t\tself.view = None\r\n\t\tself.Show()\r\n\t\r\n\tdef delete_click(self, sender, e):\r\n\t\t# This Raise() method launch a signal to Revit to tell him you want to do something in the API context\r\n\t\tCustomizableEvent.raise_event(customizable_event, delete_elements)\r\n\t\t\r\n\tdef myTest(self, sender, e):\r\n\t\tCustomizableEvent.raise_event(customizable_event, test,\"aa\")\r\n\r\n# Let's launch our beautiful and useful form !\r\nform = ModelessForm()\r\nform.TopMost = True\r\nform.view = doc.ActiveView\r\nform.StartPosition = FormStartPosition.CenterScreen\r\n\r\n\r\n\r\nlabel1.Location = Point(12, 9);\r\nlabel1.Name = \"label1\";\r\nlabel1.Size = Size(219, 63);\r\nlabel1.TabIndex = 2;\r\nlabel1.Text = \"You are updating the beam tags. Click OK to accept the changes or Cancel to discard them\";\r\nlabel1.UseCompatibleTextRendering = True;\r\n\r\n\r\nbutton1.Location = Point(10, 75);\r\nbutton1.Name = \"button1\";\r\nbutton1.Size = Size(88, 32);\r\nbutton1.TabIndex = 0;\r\nbutton1.Text = \"OK\";\r\nbutton1.UseCompatibleTextRendering = True;\r\nbutton1.UseVisualStyleBackColor = True;\r\nbutton1.Click += EventHandler(form.myTest);\r\n\r\nbutton2.DialogResult = DialogResult.Cancel;\r\nbutton2.Location = Point(134, 75);\r\nbutton2.Name = \"button2\";\r\nbutton2.Size = Size(88, 32);\r\nbutton2.TabIndex = 1;\r\nbutton2.Text = \"Cancel\";\r\nbutton2.UseCompatibleTextRendering = True;\r\nbutton2.UseVisualStyleBackColor = True;\r\nbutton2.Click += EventHandler(Button2Click);\r\n\r\n\r\nbutton3.Location = Point(250, 75);\r\nbutton3.Name = \"Delete\";\r\nbutton3.Size = Size(88, 32);\r\nbutton3.TabIndex = 1;\r\nbutton3.Text = \"Delete\";\r\nbutton3.UseCompatibleTextRendering = True;\r\nbutton3.UseVisualStyleBackColor = True;\r\nbutton3.Click += EventHandler(form.delete_click);\r\n\r\nClientSize = Size(125, 100);\r\nform.Controls.Add(button1);\r\nform.Controls.Add(button2);\r\nform.Controls.Add(button3);\r\nform.Controls.Add(label1);\r\n\r\n#result = form.values\r\n\r\n\r\n\r\nOUT = 0",
      "VariableInputPorts": true,
      "Id": "e567e608ed26411f9f7b1b6cb2bf77cb",
      "Inputs": [
        {
          "Id": "177f74abdfa8411499c656390e980ee3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3064df5d90243f3888080df9bde9577",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c67671d2b79c436eb65f20a75e0837e5",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6fa5195ff7a94e4698730e53b359c09a",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16fa807f4dd34b9593cc7441ca71f7c7",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d9016a68e2c74b928961f3cca8fb4306",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "652f1be3557b49a6a1f19576ee31537e",
      "End": "456251e6123f42af8462e8bd7c2bca5c",
      "Id": "5fbe27b701a14fe6a661586e3b554036"
    },
    {
      "Start": "652f1be3557b49a6a1f19576ee31537e",
      "End": "f56f72a8ad6d4b31a68986f0cd25fc59",
      "Id": "986dad861bd4407b86da62c0d98c7390"
    },
    {
      "Start": "652f1be3557b49a6a1f19576ee31537e",
      "End": "87a0507c743341d29d8b762e50fdd71c",
      "Id": "c7e2387b5d814a5fba175c7ada26554d"
    },
    {
      "Start": "652f1be3557b49a6a1f19576ee31537e",
      "End": "d24f6600fb744f68b6c0164afe986be3",
      "Id": "5bc554111879464e83e6a8a3f6595a0b"
    },
    {
      "Start": "652f1be3557b49a6a1f19576ee31537e",
      "End": "177f74abdfa8411499c656390e980ee3",
      "Id": "8366fdd06d9c46df90646af12d65f052"
    },
    {
      "Start": "e8dff8e72de247709c930ad1c6e875cc",
      "End": "38ea84bfe6b24d0ba40ec77775adfcdb",
      "Id": "d7e9f4499e7e4a2bb656dfd0a74e5937"
    },
    {
      "Start": "f13d81e207864d9880c0cee41158518d",
      "End": "a37935cc33e1495cbd090c6a86b7a2e7",
      "Id": "11be214a5dac48169076c3bcc11d5117"
    },
    {
      "Start": "2b855f27a8a64427ad6ff9f120544ba1",
      "End": "2ded76460f8746039cdde786030a7bb5",
      "Id": "44d6a7e650b04957878488d64c084103"
    },
    {
      "Start": "5f4bea8e653046cdaee5ad0d1a84ae73",
      "End": "38ec1797277b40e98686a3c22d7b67cd",
      "Id": "39716a8bee85472f90177c4fecbb290e"
    },
    {
      "Start": "b0b9591d91de40989512fdfd4a76a57c",
      "End": "a28415e04e76460fb5240e41329f46ac",
      "Id": "2911505de3494812a981b9ed21011ffb"
    },
    {
      "Start": "06eab1d1c2da4b72ba3263ac463a1d81",
      "End": "040ff76eba2c41fd9cc11b8e42d5a344",
      "Id": "c9030880254844c2b186e9b7361f74fc"
    },
    {
      "Start": "81ad33b715f74454a16857b521a6baaf",
      "End": "eeed44ced690458cac30abbf140b4ceb",
      "Id": "5810e91faa8b4c489a654d4c97fe4a64"
    },
    {
      "Start": "c1e9ddba64fb431ab82bfe92d5678029",
      "End": "702a31432dee43d89140a4ce48a9a514",
      "Id": "5dbbff27351f4b16a08332f32439c4e1"
    },
    {
      "Start": "9b7fe232f58f4b1083d9ef33dabd9e56",
      "End": "42ab67e60459426e8a035fcf321555c7",
      "Id": "0530361c78af455fa9f64c845f83c6f7"
    },
    {
      "Start": "6d7e806c02bc4343a510bc2162b00227",
      "End": "4e107b65d25f400c959a0fa280dd75fb",
      "Id": "3d8f8f0062774be795552280e68b96fa"
    },
    {
      "Start": "d72730be4ba44b95a50b813b9bcd5c80",
      "End": "e368a1044cf14e1787c3e422410c60f4",
      "Id": "c1c1723bd8b749e984df18b351045634"
    },
    {
      "Start": "94f661c0cbcd45aab612ff25d13fe9b0",
      "End": "e3ee3136d6a344d293b836a9ebf5fbc0",
      "Id": "657b71a2baa441af8040b354ca2b7998"
    },
    {
      "Start": "94f661c0cbcd45aab612ff25d13fe9b0",
      "End": "35b16c55a37046438d3e0b08189ffba3",
      "Id": "052f3a384a8a4ef8b0fdc499dda48b4f"
    },
    {
      "Start": "94f661c0cbcd45aab612ff25d13fe9b0",
      "End": "c67671d2b79c436eb65f20a75e0837e5",
      "Id": "f9054f79201c49679e70117f46380daa"
    },
    {
      "Start": "02e2a0de04db417896e21d6e833c1012",
      "End": "8be644f914d44a839cbb60b82449ab44",
      "Id": "b45509684ea846688832ffde8c3df930"
    },
    {
      "Start": "02e2a0de04db417896e21d6e833c1012",
      "End": "692b8726a10c4b7b8034e8cfa2e34e78",
      "Id": "62d8f9858658425d8983f002a2be4145"
    },
    {
      "Start": "02e2a0de04db417896e21d6e833c1012",
      "End": "09ed41b452e6409c8159766d5789212b",
      "Id": "628d20792c3a49aebde291fc2bb2144d"
    },
    {
      "Start": "02e2a0de04db417896e21d6e833c1012",
      "End": "16fa807f4dd34b9593cc7441ca71f7c7",
      "Id": "f7739497b2754cedb52de0ab685c0654"
    },
    {
      "Start": "712cedd7ed1b4915b65df68cb17ce385",
      "End": "487a2c4571eb44488c7584315ecf461f",
      "Id": "f5462fe30f274dc4ab2aef113806c0a0"
    },
    {
      "Start": "712cedd7ed1b4915b65df68cb17ce385",
      "End": "e3064df5d90243f3888080df9bde9577",
      "Id": "c98eca153f204ed98d4e96c1adddfc53"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.1.5055",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "Id": "880e003a463947218d9d0786719a309b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Boolean",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 446.0,
        "Y": 909.73230838227
      },
      {
        "Id": "41dca0d59c2f4a67baa472689eb68996",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 714.32004951819908,
        "Y": 765.58684691833992
      },
      {
        "Id": "efb48cace443429da81881cc4f3f1b32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 620.07323463949979,
        "Y": 1056.75971556024
      },
      {
        "Id": "2d2741823e614b3da194c3187fd47354",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Boolean",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 819.3345628436,
        "Y": 1001.44683810528
      },
      {
        "Id": "a60ec88c3a8d4c48aefd13a044692988",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 921.39778408070015,
        "Y": 783.65684784192968
      },
      {
        "Id": "8b3c7757703840fdadfb187bdda6a353",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 1016.4543657609993,
        "Y": 602.0
      },
      {
        "Id": "ff7cde87dc1b4f4dac3599ff2d39cad3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 1147.6104324284029,
        "Y": 907.0997199517027
      },
      {
        "Id": "517743d810574b789822373a8e2d9cad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1578.2635662502962,
        "Y": 958.872290727664
      },
      {
        "Id": "cb180849911849588e0c63f767922b70",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Family Types",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2364.3163690811361,
        "Y": 1127.4861815318918
      },
      {
        "Id": "00eb6fffcc39421bb54b5fdc8615e5ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Document.Current",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2375.3028611256682,
        "Y": 1281.5223961702425
      },
      {
        "Id": "ce05a07aa8134a68abfdb18f24568d39",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Document.ActiveView",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2576.9824405373365,
        "Y": 1285.6875956145918
      },
      {
        "Id": "97437ae91f084d4e971ebf3169359a57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3060.3203918994368,
        "Y": 1135.2224528918409
      },
      {
        "Id": "9405103226574283a96d22e1010c74e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3114.675362228736,
        "Y": 1529.5608755702519
      },
      {
        "Id": "28d68ee6037b42f8ac24bef4663d4ab2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 3520.36327123576,
        "Y": 1177.1390950086889
      },
      {
        "Id": "1c75d81ddc144968b940fa82a1d44393",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2919.3080549689857,
        "Y": 1348.1576864667379
      },
      {
        "Id": "1d452f5b3dd14fc1a9bc11b3d3f3286a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2690.6654765527537,
        "Y": 1466.3158988435116
      },
      {
        "Id": "6872fbeaa5ad461d974f9d6c4a8a44b0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Select Model Elements",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2403.3201175994086,
        "Y": 912.9664643951412
      },
      {
        "Id": "74daacc9e6a6468896bfcd3f51188036",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "StructuralFraming.Location",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2778.8715091708382,
        "Y": 941.75873774895035
      },
      {
        "Id": "bd936077c3f8404bbbe0f73ca4f4978f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Curve.PointAtParameter",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3156.9265766860763,
        "Y": 998.09144648466508
      },
      {
        "Id": "1ca4560418984e5fa53ea55301857d14",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2948.0,
        "Y": 1033.0
      },
      {
        "Id": "0fe35beb7d02433aa3e5cae9ab720440",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 1220.0484203449844,
        "Y": 1255.6474290998131
      },
      {
        "Id": "6dd0d1287cbf4aa6b582f5d8916d4bc1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 813.0,
        "Y": 1069.0
      },
      {
        "Id": "6dbd741d36ea4f90863f7d0b909857d8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Select Model Elements",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 599.48842274179,
        "Y": 1508.01781449854
      },
      {
        "Id": "5b8ff0cac24a48179bc8c4967dab2473",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": true,
        "X": 1207.2717633694026,
        "Y": 1401.8600929692229
      },
      {
        "Id": "d77ff1fb1abf4998b44e37ccf5327776",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Boolean",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1069.6185332741609,
        "Y": 1485.569842959668
      },
      {
        "Id": "e567e608ed26411f9f7b1b6cb2bf77cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1595.6347624460216,
        "Y": 1380.762782657715
      }
    ],
    "Annotations": [
      {
        "Id": "0024baaaeb2a446787f4d1b678e25c78",
        "Title": "Tag Element with new tag",
        "Nodes": [
          "cb180849911849588e0c63f767922b70",
          "28d68ee6037b42f8ac24bef4663d4ab2"
        ],
        "Left": 2354.3163690811361,
        "Top": 1074.4861815318918,
        "Width": 1300.0469021546237,
        "Height": 377.65291347679704,
        "FontSize": 36.0,
        "InitialTop": 1127.4861815318918,
        "InitialHeight": 194.65291347679704,
        "TextblockHeight": 43.0,
        "Background": "#FF48B9FF"
      }
    ],
    "X": -280.16530165979691,
    "Y": -587.49081056156115,
    "Zoom": 0.79509851013956434
  }
}