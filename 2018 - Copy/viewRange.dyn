<Workspace Version="1.3.2.2480" X="209.333940503265" Y="35.307586972958" zoom="0.766189997407437" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="d4da7db0-4615-4a7b-9589-eaa6f0648027" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="View.ViewRange absolute" x="315.525644926926" y="15.3908949479899" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true">
      <PortInfo index="0" default="False" />
      <ID value="095d7fc6-2731-40af-bb27-3f34d2fe5d7f" />
      <Name value="View.ViewRange absolute" />
      <Description value="Returns the 4 view range values relative in absolute Z values" />
      <Inputs>
        <Input value="view" />
      </Inputs>
      <Outputs>
        <Output value="Top" />
        <Output value="CutPlane" />
        <Output value="Bottom" />
        <Output value="ViewDepth" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="83bd83b9-ecbf-41df-b5ab-3ff6c4203144" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="View.ViewRange relative" x="351.689423463864" y="672.579246042299" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true">
      <PortInfo index="0" default="False" />
      <ID value="309148d5-657b-41b7-979a-53624c736afd" />
      <Name value="View.ViewRange relative" />
      <Description value="Returns the 4 view range values relative to the view's level" />
      <Inputs>
        <Input value="View" />
      </Inputs>
      <Outputs>
        <Output value="Top" />
        <Output value="CutPlane" />
        <Output value="Bottom" />
        <Output value="ViewDepth" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <PythonNodeModels.PythonNode guid="9af970b1-ecaa-4e2e-998f-246d0a1be5a7" type="PythonNodeModels.PythonNode" nickname="Python Script" x="650.953637176337" y="50.010750308676" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)
#The inputs to this node will be stored as a list in the IN variables.
if isinstance(IN[0], list):
	views  = UnwrapElement(IN[0])
else:
	views = [UnwrapElement(IN[0])]

def getViewRange(view):
	if view.GetType() == Autodesk.Revit.DB.ViewPlan:
		viewrange = view.GetViewRange()
		try:
			cutId = viewrange.GetLevelId(PlanViewPlane.CutPlane)
			cutlevel = doc.GetElement(cutId)
			cut = cutlevel.Elevation + viewrange.GetOffset(PlanViewPlane.CutPlane)
		except:
			cut = None
		
		try:
			topId = viewrange.GetLevelId(PlanViewPlane.TopClipPlane)
			toplevel = doc.GetElement(topId)
			topelev = toplevel.Elevation
			top = topelev + viewrange.GetOffset(PlanViewPlane.TopClipPlane)
		except:
			top = None
			
		try:
			bottomId = viewrange.GetLevelId(PlanViewPlane.BottomClipPlane)
			bottomlevel = doc.GetElement(bottomId)
			bottomelev = bottomlevel.Elevation
			bottom = bottomelev + viewrange.GetOffset(PlanViewPlane.BottomClipPlane)
		except:
			bottom = None
		
		try:
			depthId = viewrange.GetLevelId(PlanViewPlane.ViewDepthPlane)
			depthlevel = doc.GetElement(depthId)
			depthelev = depthlevel.Elevation
			depth = depthelev + viewrange.GetOffset(PlanViewPlane.ViewDepthPlane)
		except:
			depth = None

	return depth, bottom,cut,top, toplevel, cutlevel, bottomlevel, depthlevel

depth = []
bottom = []
cut = []
top = []
levels = []

getDocUnits = doc.GetUnits()
getDisplayUnits = getDocUnits.GetFormatOptions(UnitType.UT_Length).DisplayUnits


for view in views:
	try:
		depth.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[0],getDisplayUnits))
		bottom.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[1],getDisplayUnits))
		cut.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[2],getDisplayUnits))
		top.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[3],getDisplayUnits))
		levels.append([getViewRange(view)[4],getViewRange(view)[5],getViewRange(view)[6],getViewRange(view)[7]])
	except:
		depth.append(None)
		bottom.append(None)
		cut.append(None)
		top.append(None)
#Assign your output to the OUT variable.
if len(depth) == 1:
	OUT = top[0], cut[0], bottom[0], depth[0], levels[0]
else:
	OUT = top, cut, bottom, depth, levels</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="c553d9b5-565c-4916-b620-3e254a666f13" type="PythonNodeModels.PythonNode" nickname="Python Script" x="705.849837941697" y="676.816351895782" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)
#The inputs to this node will be stored as a list in the IN variables.
if isinstance(IN[0], list):
	views  = UnwrapElement(IN[0])
else:
	views = [UnwrapElement(IN[0])]

def getViewRange(view):
	if view.GetType() == Autodesk.Revit.DB.ViewPlan:
		viewrange = view.GetViewRange()
		try:
			cutId = viewrange.GetLevelId(PlanViewPlane.CutPlane)
			cutlevel = doc.GetElement(cutId)
			cut = viewrange.GetOffset(PlanViewPlane.CutPlane)
		except:
			cut = None
		
		try:
			topId = viewrange.GetLevelId(PlanViewPlane.TopClipPlane)
			toplevel = doc.GetElement(topId)
			topelev = toplevel.Elevation
			top = topelev + viewrange.GetOffset(PlanViewPlane.TopClipPlane)
			top -= cutlevel.Elevation
		except:
			top = None
			
		try:
			bottomId = viewrange.GetLevelId(PlanViewPlane.BottomClipPlane)
			bottomlevel = doc.GetElement(bottomId)
			bottomelev = bottomlevel.Elevation
			bottom = bottomelev + viewrange.GetOffset(PlanViewPlane.BottomClipPlane)
			bottom -= cutlevel.Elevation
		except:
			bottom = None
		
		try:
			depthId = viewrange.GetLevelId(PlanViewPlane.ViewDepthPlane)
			depthlevel = doc.GetElement(depthId)
			depthelev = depthlevel.Elevation
			depth = depthelev + viewrange.GetOffset(PlanViewPlane.ViewDepthPlane)
			depth -= cutlevel.Elevation
		except:
			depth = None

	return depth, bottom,cut,top, toplevel, cutlevel, bottomlevel, depthlevel

depth = []
bottom = []
cut = []
top = []
levels = []


getDocUnits = doc.GetUnits()
getDisplayUnits = getDocUnits.GetFormatOptions(UnitType.UT_Length).DisplayUnits


for view in views:
	try:
		depth.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[0],getDisplayUnits))
		bottom.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[1],getDisplayUnits))
		cut.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[2],getDisplayUnits))
		top.append(UnitUtils.ConvertFromInternalUnits(getViewRange(view)[3],getDisplayUnits))
		levels.append([getViewRange(view)[4],getViewRange(view)[5],getViewRange(view)[6],getViewRange(view)[7]])
	except:
		depth.append(None)
		bottom.append(None)
		cut.append(None)
		top.append(None)
#Assign your output to the OUT variable.
if len(depth) == 1:
	OUT = top[0], cut[0], bottom[0], depth[0], levels[0]
else:
	OUT = top, cut, bottom, depth, levels</Script>
    </PythonNodeModels.PythonNode>
    <DSRevitNodesUI.Views guid="3e504610-ee6c-4c18-8664-dc23e52e47a8" type="DSRevitNodesUI.Views" nickname="Views" x="-19" y="339" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false" index="202:Wo - LEVEL 1 G.A. Coordination Plan" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="91c21021-e938-462b-a08b-6be20325d567" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="Level.Elevation" x="1044.29444851788" y="83.8746349778343" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="RevitNodes.dll" function="Revit.Elements.Level.Elevation">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="0fde581b-e106-4526-ad10-354d9fea20a2" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="904.517825568701" y="90.5363952356017" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="a[4];" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="f9123775-1857-49e0-9f7f-0723767a5ddc" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="-" x="1319.10678903806" y="42.0169901989521" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="true" assembly="Operators" function="-@var[]..[],var[]..[]">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="9af970b1-ecaa-4e2e-998f-246d0a1be5a7" start_index="0" end="0fde581b-e106-4526-ad10-354d9fea20a2" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9af970b1-ecaa-4e2e-998f-246d0a1be5a7" start_index="0" end="f9123775-1857-49e0-9f7f-0723767a5ddc" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3e504610-ee6c-4c18-8664-dc23e52e47a8" start_index="0" end="d4da7db0-4615-4a7b-9589-eaa6f0648027" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3e504610-ee6c-4c18-8664-dc23e52e47a8" start_index="0" end="c553d9b5-565c-4916-b620-3e254a666f13" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3e504610-ee6c-4c18-8664-dc23e52e47a8" start_index="0" end="9af970b1-ecaa-4e2e-998f-246d0a1be5a7" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3e504610-ee6c-4c18-8664-dc23e52e47a8" start_index="0" end="83bd83b9-ecbf-41df-b5ab-3ff6c4203144" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="91c21021-e938-462b-a08b-6be20325d567" start_index="0" end="f9123775-1857-49e0-9f7f-0723767a5ddc" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0fde581b-e106-4526-ad10-354d9fea20a2" start_index="0" end="91c21021-e938-462b-a08b-6be20325d567" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="17ab22d9-dc09-44ed-b2b9-115e1d25c18d" annotationText="MEPover" left="305.525644926926" top="-30.6091050520101" width="232" height="217" fontSize="30" InitialTop="15.3908949479899" InitialHeight="201" TextblockHeight="36" backgrouund="#FFC1D676">
      <Models ModelGuid="d4da7db0-4615-4a7b-9589-eaa6f0648027" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="b66de110-b324-4c6d-9566-4b97ee011af8" annotationText="MEPover" left="341.689423463864" top="626.579246042299" width="233" height="217" fontSize="30" InitialTop="672.579246042299" InitialHeight="201" TextblockHeight="36" backgrouund="#FFC1D676">
      <Models ModelGuid="83bd83b9-ecbf-41df-b5ab-3ff6c4203144" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>