{
  "Uuid": "d74a2365-db05-4ed3-a4b1-288a6be34669",
  "IsCustomNode": false,
  "Description": null,
  "Name": "findViewNotOnSheet",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc=DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n\r\n# COLLECTING DATA\r\ndviews = []\r\nmviews = []\r\nlviews = []\r\nscheduleviews = []\r\nall_sheeted_view_ids = []\r\n\r\n# Collecting all the model, drafting, and legend views\r\nviews = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Views).WhereElementIsNotElementType().ToElements()\r\n\r\nfor v in views:\r\n    if not v.IsTemplate:\r\n        if v.ViewType == ViewType.DraftingView:\r\n            dviews.append(v)\r\n        elif v.ViewType == ViewType.Legend:\r\n            lviews.append(v)\r\n        else:\r\n            mviews.append(v)\r\n\r\n# Schedules need to be collected separately\r\nschedule_views = FilteredElementCollector(doc).OfClass(ViewSchedule).WhereElementIsNotElementType().ToElements()\r\n\r\nfor sv in schedule_views:\r\n    scheduleviews.append(sv)\r\n\r\n# Now collecting all sheets and find all sheeted views\r\nsheets = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Sheets).WhereElementIsNotElementType().ToElements()\r\n\r\nfor sht in sheets:\r\n    vp_ids = [doc.GetElement(x).ViewId for x in sht.GetAllViewports()]\r\n    all_sheeted_view_ids.extend(vp_ids)\r\n\r\n\r\n# Find all sheeted schedule views and add them to the list as well\r\nallSheetedSchedules = FilteredElementCollector(doc).OfClass(ScheduleSheetInstance).ToElements()\r\n\r\nfor ss in allSheetedSchedules:\r\n    all_sheeted_view_ids.append(ss.ScheduleId)\r\n\r\n# NOW LET'S REPORT\r\nlist0 = ['DRAFTING VIEWS NOT ON ANY SHEETS']\r\nfor v in dviews:\r\n    if v.Id in all_sheeted_view_ids:\r\n        continue\r\n    else:\r\n        list0.append([v.ViewName,doc.GetElement(v.Id)])\r\n\r\n\r\nlist1 = ['MODEL VIEWS NOT ON ANY SHEETS']\r\nfor v in mviews:\r\n    if v.Id in all_sheeted_view_ids:\r\n        continue\r\n    else:\r\n        list1.append([v.ViewName,doc.GetElement(v.Id)])\r\n\r\n\r\nlist2 = ['LEGENDS NOT ON ANY SHEETS']\r\nfor v in lviews:\r\n    if v.Id in all_sheeted_view_ids:\r\n        continue\r\n    else:\r\n        list2.append([v.ViewName,doc.GetElement(v.Id)])\r\n\r\n\r\nlist3 = ['SCHEDULES NOT ON ANY SHEETS']\r\nfor v in scheduleviews:\r\n    if v.Id in all_sheeted_view_ids:\r\n        continue\r\n    else:\r\n        list3.append([v.ViewName,doc.GetElement(v.Id)])\r\n\r\nOUT = list1, list2, list3\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "efbbe96e0fb449bb8b8cbbf636d6c0fa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f1820fa2226b4855b82cfac749514d1a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "41e942b8f8514685b739ebe93f0b246f",
      "Inputs": [
        {
          "Id": "48157fbdeb2c4304867271b305ee1ecd",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "74630584cd6a492bae066f552d6a6618",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d645e8e62438415fbe6f9cfb56e2aeec",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "2;",
      "Id": "55a3806d74544008b0ba9b77ca4df652",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3fbd7edbb3e14ca483dbb75a4b2e7272",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Transpose@var[]..[]",
      "Id": "15060d366dff47e2835603f886c8c24d",
      "Inputs": [
        {
          "Id": "7ec634ce5510460da191cc7af033de62",
          "Name": "lists",
          "Description": "A list of lists to be transposed.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c2a991389ede42689ce9e1ab70de5712",
          "Name": "lists",
          "Description": "A list of transposed lists.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Swaps rows and columns in a list of lists. If there are some rows that are shorter than others, null values are inserted as place holders in the resultant array such that it is always rectangular.\n\nList.Transpose (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.RestOfItems@var[]..[]",
      "Id": "44ba7ab2f7604e81a21b2e994c8b88f5",
      "Inputs": [
        {
          "Id": "9ade6a2074aa49839896b233a98672ac",
          "Name": "list",
          "Description": "List to get the rest of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "02f054caa2dd40de8875c21b0b7f7cec",
          "Name": "rest",
          "Description": "Rest of the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes the first item from the given list.\n\nList.RestOfItems (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Deconstruct@var[]..[]",
      "Id": "6a1ca4648de94fcbaffdf64893212963",
      "Inputs": [
        {
          "Id": "6778f61639e649139a24fd2bdd2aaee6",
          "Name": "list",
          "Description": "List to be split.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "85f6e4054c484b69bde86fa440414c84",
          "Name": "first",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "12cd6dcd75714578a9afd015d1fe25d5",
          "Name": "rest",
          "Description": "Rest of the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Given a list, produces the first item in the list, and a new list containing all items except the first.\n\nList.Deconstruct (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "scheduleToBeDeleted[0];",
      "Id": "618387f0e0444e048ed64e17a75313ae",
      "Inputs": [
        {
          "Id": "100587ad017a4f47955a8f439e65e1ed",
          "Name": "scheduleToBeDeleted",
          "Description": "scheduleToBeDeleted",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7a1ea0946ee04be6885fcee3de8e2b11",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "a8709c69-aa1d-4e0d-b2f1-182332d5b6b9",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "b0ee66ed1c6041049c71290478ee210b",
      "Inputs": [
        {
          "Id": "ac5f94a85a684a449af91551641cc7b8",
          "Name": "element",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00d7339ba08b4f2b991572dbab0cef3b",
          "Name": "confirm",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "af09fe326fb843c0a5bf8065e7c32b57",
          "Name": "count",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b8e2c83448234ce0a2fae2ac259ee133",
          "Name": "deletedIds(str)",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4af31aa75a6446c286fc3648ed06f704",
          "Name": "failedIds(str)",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2016, Dimitar Venkov\r\n# @5devene, dimitar.ven@gmail.com\r\n\r\nimport clr\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef tolist(obj1):\r\n\tif hasattr(obj1,\"__iter__\"): return obj1\r\n\telse: return [obj1]\r\n\r\nelems = UnwrapElement(tolist(IN[0]) )\r\n\r\nif IN[1]:\r\n\tdeleted, failed = [], []\r\n\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\tfor e in elems:\r\n\t\tid = None\r\n\t\ttry:\r\n\t\t\tid = e.Id\r\n\t\t\tdel_id = doc.Delete(id)\r\n\t\t\tdeleted.extend([d.ToString() for d in del_id])\r\n\t\texcept:\r\n\t\t\tif id is not None:\r\n\t\t\t\tfailed.append(id.ToString() )\r\n\tTransactionManager.Instance.TransactionTaskDone()\r\n\ts = set(deleted)\r\n\tfailed1 = [x for x in failed if x not in s]\r\n\tOUT = len(deleted), ';'.join(deleted), ';'.join(failed1)\r\nelse:\r\n\tOUT = \"Set confirm to True\", \"\", \"\"",
      "VariableInputPorts": true,
      "Id": "1bf6738283c34aa998401ec99bd92fc1",
      "Inputs": [
        {
          "Id": "523df524c3bd46dc8890747b39d2ff3a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cd6e0ceb58d0436b9a74779bae92a678",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "026971c93f894c159ce67dac49b4b9a8",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "7a567939b4bc40ecbaf2c707d3fe05af",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8b0121509d064b20a4e7f2c636ee453c",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    }
  ],
  "Connectors": [
    {
      "Start": "f1820fa2226b4855b82cfac749514d1a",
      "End": "48157fbdeb2c4304867271b305ee1ecd",
      "Id": "71736a8b0e674d5c9483c74cdf685ae9"
    },
    {
      "Start": "d645e8e62438415fbe6f9cfb56e2aeec",
      "End": "9ade6a2074aa49839896b233a98672ac",
      "Id": "f74fe646178d4df6b6163e562b62d8c8"
    },
    {
      "Start": "3fbd7edbb3e14ca483dbb75a4b2e7272",
      "End": "74630584cd6a492bae066f552d6a6618",
      "Id": "6b2e990494ae4ab781e529c8e24e1691"
    },
    {
      "Start": "c2a991389ede42689ce9e1ab70de5712",
      "End": "6778f61639e649139a24fd2bdd2aaee6",
      "Id": "de964ed91375468b8733ad95dd7c169f"
    },
    {
      "Start": "02f054caa2dd40de8875c21b0b7f7cec",
      "End": "7ec634ce5510460da191cc7af033de62",
      "Id": "3c93c126adf74f3799afee5c7854955b"
    },
    {
      "Start": "12cd6dcd75714578a9afd015d1fe25d5",
      "End": "100587ad017a4f47955a8f439e65e1ed",
      "Id": "e61f24f47a7e40aa9b3ee82aaf92349b"
    },
    {
      "Start": "7a1ea0946ee04be6885fcee3de8e2b11",
      "End": "523df524c3bd46dc8890747b39d2ff3a",
      "Id": "3e7a86b9ee804e4d875f04cf82e7fafb"
    },
    {
      "Start": "8b0121509d064b20a4e7f2c636ee453c",
      "End": "cd6e0ceb58d0436b9a74779bae92a678",
      "Id": "0c2097347cf44b6dbbdb39e6c66edc08"
    }
  ],
  "Dependencies": [
    "a8709c69-aa1d-4e0d-b2f1-182332d5b6b9"
  ],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.1.4955",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "efbbe96e0fb449bb8b8cbbf636d6c0fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 790.50434215351368,
        "Y": 642.7040645134922
      },
      {
        "ShowGeometry": true,
        "Name": "List.GetItemAtIndex",
        "Id": "41e942b8f8514685b739ebe93f0b246f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1273.2594531335599,
        "Y": 640.35330658075281
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "55a3806d74544008b0ba9b77ca4df652",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1062.8180935763148,
        "Y": 722.35214309296759
      },
      {
        "ShowGeometry": true,
        "Name": "List.Transpose",
        "Id": "15060d366dff47e2835603f886c8c24d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1782.5414602141177,
        "Y": 641.6697077035044
      },
      {
        "ShowGeometry": true,
        "Name": "List.RestOfItems",
        "Id": "44ba7ab2f7604e81a21b2e994c8b88f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1526.0444787677404,
        "Y": 641.22198364478811
      },
      {
        "ShowGeometry": true,
        "Name": "List.Deconstruct",
        "Id": "6a1ca4648de94fcbaffdf64893212963",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2059.5598402646674,
        "Y": 637.50060932746385
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "618387f0e0444e048ed64e17a75313ae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2273.5250785998337,
        "Y": 666.617557464787
      },
      {
        "ShowGeometry": true,
        "Name": "Springs.Doc.DeleteElements",
        "Id": "b0ee66ed1c6041049c71290478ee210b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2916.38931779093,
        "Y": 501.51571223330359
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1bf6738283c34aa998401ec99bd92fc1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2984.5071877888927,
        "Y": 660.77445404959644
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "7a567939b4bc40ecbaf2c707d3fe05af",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2703.6396306008182,
        "Y": 783.08607367488321
      }
    ],
    "Annotations": [],
    "X": -2364.9436436143942,
    "Y": -464.95734277040503,
    "Zoom": 1.0125092511221057
  }
}